{
  "version": 3,
  "file": "markdown.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\markdown.test.coffee"
  ],
  "names": [],
  "mappings": ";AAAsB;AAAA,IAAA,KAAA,EAAA;;AAEtB,OAAA;EACC,KADD;EACQ,QADR;EACkB,OADlB;EAC2B,OAD3B;EACoC,GADpC;CAAA,MAAA;;AAGA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA;;AACA,OAAA;EAAQ,GAAR;EAAa,QAAb;CAAA,MAAA;;AACA,OAAA;EAAQ,YAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,UAAR;EAAoB,KAApB;CAAA,MAAA;;AACA,OAAA;EAAQ,KAAR;CAAA,MAAA;;AAEA,OAAA;EAAQ,WAAR;CAAA,MAAA,4BAXsB;;;AAetB,SAAA,GAAY,CAAC,KAAD,CAAA,GAAA;AAEZ,MAAA;EAAC,MAAA,GAAS,OAAA,CAAQ,KAAR,CACR,CAAC,MADO,CACA,CAAC,IAAD,CAAA,GAAA;WAAU,QAAA,CAAS,IAAT;EAAV,CADA,CAER,CAAC,GAFO,CAEH,CAAC,IAAD,CAAA,GAAA;WAAU,GAAA,CAAI,IAAJ;EAAV,CAFG;AAGT,SAAO,OAAA,CAAQ,MAAR;AALI;;AAOZ,KAAA,GAAQ,CAAA;;;MAAA;;AAOR,KAAA,CAAM,SAAA,CAAU,KAAV,CAAN,EAAwB,CAAA;;KAAA,CAAxB,EA7BsB;;;AAqCtB,CAAC,QAAA,CAAA,CAAA;AAED,MAAA,cAAA,EAAA;EAAO,iBAAN,MAAA,eAAA,QAA6B,WAA7B;IAEC,cAAgB,CAAC,IAAD,CAAA;AAEf,aAAO,SAAA,CAAU,WAAA,CAAY,IAAZ,CAAV;IAFQ;;IAIhB,iBAAmB,CAAC,IAAD,CAAA;AAElB,aAAO,SAAA,CAAU,IAAV;IAFW;;EANpB;EAUA,QAAA,GAAW,IAAI,cAAJ,CAAA,EAVZ;;EAcC,QAAQ,CAAC,KAAT,CAAe,CAAA;;IAAA,CAAf,EAIO,CAAA;WAAA,CAJP;EASA,QAAQ,CAAC,KAAT,CAAe,CAAA;;IAAA,CAAf,EAIO,CAAA;WAAA,CAJP,EAvBD;;EAkCC,QAAQ,CAAC,KAAT,CAAe,CAAA;IAAA,CAAf,EAGO,CAAA,WAAA,CAHP;EAOA,QAAQ,CAAC,KAAT,CAAe,CAAA;IAAA,CAAf,EAGO,CAAA,WAAA,CAHP;EAOA,QAAQ,CAAC,KAAT,CAAe,CAAA,qBAAA,CAAf,EAEM,CAAA,yCAAA,CAFN;SAMA,QAAQ,CAAC,KAAT,CAAe,CAAA;;;;;;MAAA,CAAf,EAQM,CAAA;;;;;aAAA,CARN;AAxDA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# markdown.test.coffee\n\nimport {\n\tundef, nonEmpty, toBlock, toArray, CWS,\n\t} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport {UnitTester, equal} from '@jdeighan/base-utils/utest'\nimport {mydir} from '@jdeighan/coffee-utils/fs'\n\nimport {markdownify} from '@jdeighan/mapper/markdown'\n\n# ---------------------------------------------------------------------------\n\nnormalize = (block) =>\n\n\tlLines = toArray(block) \\\n\t\t.filter((line) => nonEmpty(line)) \\\n\t\t.map((line) => CWS(line))\n\treturn toBlock(lLines)\n\nblock = \"\"\"\n\tsimple\n\t\tindented    more\\t\\t\\t\\twords\n\n\t\tblank\n\t\"\"\"\n\nequal normalize(block), \"\"\"\n\tsimple\n\tindented more words\n\tblank\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\tclass MarkdownTester extends UnitTester\n\n\t\ttransformValue: (text) ->\n\n\t\t\treturn normalize(markdownify(text))\n\n\t\ttransformExpected: (text) ->\n\n\t\t\treturn normalize(text)\n\n\tmdTester = new MarkdownTester()\n\n\t# ..........................................................\n\n\tmdTester.equal \"\"\"\n\t\t\ttitle\n\t\t\t=====\n\t\t\ttext\n\t\t\t\"\"\", \"\"\"\n\t\t\t<h1>title</h1>\n\t\t\t<p>text</p>\n\t\t\t\"\"\"\n\n\tmdTester.equal \"\"\"\n\t\t\ttitle\n\t\t\t-----\n\t\t\ttext\n\t\t\t\"\"\", \"\"\"\n\t\t\t<h2>title</h2>\n\t\t\t<p>text</p>\n\t\t\t\"\"\"\n\n\t# --- Comments are stripped\n\n\tmdTester.equal \"\"\"\n\t\t\t# title\n\t\t\ttext\n\t\t\t\"\"\", \"\"\"\n\t\t\t<p>text</p>\n\t\t\t\"\"\"\n\n\tmdTester.equal \"\"\"\n\t\t\t# title\n\t\t\ttext\n\t\t\t\"\"\", \"\"\"\n\t\t\t<p>text</p>\n\t\t\t\"\"\"\n\n\tmdTester.equal \"\"\"\n\t\tthis is **bold** text\n\t\t\"\"\", \"\"\"\n\t\t<p>this is <strong>bold</strong> text</p>\n\t\t\"\"\"\n\n\tmdTester.equal \"\"\"\n\t\t```javascript\n\t\t\t\tadapter: adapter({\n\t\t\t\t\tpages: 'build',\n\t\t\t\t\tassets: 'build',\n\t\t\t\t\tfallback: null,\n\t\t\t\t\t})\n\t\t```\n\t\t\"\"\", \"\"\"\n\t\t<pre><code class=\"language-javascript\"> adapter: adapter(&lbrace;\n\t\tpages: 'build',\n\t\tassets: 'build',\n\t\tfallback: null,\n\t\t&rbrace;)\n\t\t</code></pre>\n\t\t\"\"\"\n\n\t)()\n"
  ]
}
// Generated by CoffeeScript 2.6.1
(async function() {
  // printStory.coffee
  var LOG, dictPath, loadDictionary, main, maxlen, printSentence, slurpTAML, withExt, words;

  ({words} = (await import('@jdeighan/coffee-utils')));

  ({LOG} = (await import('@jdeighan/coffee-utils/log')));

  ({withExt} = (await import('@jdeighan/coffee-utils/fs')));

  ({slurpTAML} = (await import('@jdeighan/string-input/taml')));

  maxlen = 76;

  dictPath = "c:/Users/johnd/oz/src/stores/dictionary.taml";

  // ---------------------------------------------------------------------------
  main = function() {
    var err, filepath, h, hPara, hSent, hWords, i, j, len, len1, ref, ref1;
    filepath = process.argv[2];
    try {
      h = slurpTAML(filepath);
    } catch (error) {
      err = error;
      LOG(`Contents of ${filepath} isn't TAML`);
    }
    hWords = loadDictionary();
    //	LOG 'hWords', hWords
    LOG(h.title.en);
    LOG(`   by ${h.author.en}`);
    LOG('');
    ref = h.lParagraphs;
    for (i = 0, len = ref.length; i < len; i++) {
      hPara = ref[i];
      ref1 = hPara.lSentences;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        hSent = ref1[j];
        printSentence(hSent, hWords);
      }
      LOG('');
    }
  };

  // ---------------------------------------------------------------------------
  loadDictionary = function() {
    var epos, hDict, key, pos, ref, trans, word;
    hDict = {};
    ref = slurpTAML(dictPath);
    for (key in ref) {
      trans = ref[key];
      pos = key.indexOf('(');
      if (pos === -1) {
        hDict[key] = trans;
      } else {
        word = key.substring(0, pos);
        hDict[word] = trans;
        epos = key.indexOf(')', pos);
        hDict[word + key.substring(pos + 1, epos)] = trans;
        pos = key.indexOf('(', epos);
        while (pos !== -1) {
          epos = key.indexOf(')', pos);
          hDict[word + key.substring(pos + 1, epos)] = trans;
          pos = key.indexOf('(', epos);
        }
      }
    }
    return hDict;
  };

  // ---------------------------------------------------------------------------
  printSentence = function(hSent, hWords) {
    var baseword, i, j, lExtraLines, lWords, len, len1, line, nLines, str, word;
    lWords = words(hSent.en);
    str = '';
    lExtraLines = []; // word translations
    nLines = 0; // number of lines already output
    for (i = 0, len = lWords.length; i < len; i++) {
      word = lWords[i];
      baseword = word.replace(/[\.\?\!\,]/g, '');
      if (hWords[baseword] != null) {
        lExtraLines.push(`      (${baseword} ${hWords[baseword]})`);
        delete hWords[baseword];
      }
      if (str.length + word.length + 1 > maxlen) {
        if (nLines === 0) {
          LOG(str.trim());
        } else {
          LOG('   ' + str.trim());
        }
        nLines += 1;
        str = '';
      }
      str += word + ' ';
    }
    str = str.trim();
    if (str.length > 0) {
      if (nLines === 0) {
        LOG(str.trim());
      } else {
        LOG('   ' + str.trim());
      }
    }
    for (j = 0, len1 = lExtraLines.length; j < len1; j++) {
      line = lExtraLines[j];
      LOG(line);
    }
  };

  // ---------------------------------------------------------------------------
  main();

}).call(this);

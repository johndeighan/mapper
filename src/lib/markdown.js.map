{
  "version": 3,
  "file": "markdown.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\markdown.coffee"
  ],
  "names": [],
  "mappings": ";AAAiB;AAEjB,OAAA;EAAQ,MAAR;CAAA,MAAA;;AACA,OAAO,YAAP,MAAA;;AAEA,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,EAD7B;EACiC,OADjC;EAC0C,QAD1C;EACoD,QADpD;EAEC,OAFD;EAEU,OAFV;EAEmB,aAFnB;CAAA,MAAA;;AAIA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA;;AACA,OAAA;EAAQ,GAAR;EAAa,QAAb;CAAA,MAAA;;AACA,OAAA;EACC,GADD;EACM,QADN;EACgB,SADhB;CAAA,MAAA;;AAGA,OAAA;EAAQ,QAAR;CAAA,MAAA;;AAEA,OAAA;EAAQ,UAAR;CAAA,MAAA,wBAhBiB;;;AAoBjB,OAAA,IAAO,WAAA,GAAc,QAAA,CAAC,KAAD,CAAA;AAErB,MAAA,IAAA,EAAA,MAAA,EAAA;EAAC,QAAA,CAAS,aAAT,EAAwB,KAAxB;EACA,MAAA,CAAO,QAAA,CAAS,KAAT,CAAP,EAAwB,uBAAxB,EADD;;EAIC,KAAA,GAAQ,KAAK,CAAC,OAAN,CAAc,yCAAd,EAAyD,EAAzD,EAJT;;EAOC,MAAA,GAAS,OAAA,CAAQ,KAAR,EAPV;;EAUC,MAAA,GAAS,MAAM,CAAC,MAAP,CAAc,CAAC,IAAD,CAAA,GAAA;WAAU,CAAE,aAAA,CAAc,IAAd;EAAZ,CAAd;EAGT,MAAA,GAAS,QAAA,CAAS,MAAT;EAET,IAAA,GAAO,MAAM,CAAC,KAAP,CAAa,OAAA,CAAQ,MAAR,CAAb,EAA8B;IAAC,SAAA,EAAW,KAAZ;IAAmB,MAAA,EAAQ;EAA3B,CAA9B;EACP,IAAA,GAAO,YAAA,CAAa,IAAb,EAAmB;IACzB,iBAAA,EAAmB;MAClB,GAAA,EAAK,CAAE,OAAF;IADa;EADM,CAAnB;EAKP,GAAA,CAAI,iBAAJ,EAAuB,IAAvB;EACA,MAAA,GAAS,IACR,CAAC,OADO,CACC,KADD,EACQ,UADR,CAER,CAAC,OAFO,CAEC,KAFD,EAEQ,UAFR,CAGR,CAAC,OAHO,CAGC,KAHD,EAGQ,UAHR;EAIT,SAAA,CAAU,aAAV,EAAyB,MAAzB;AACA,SAAO;AA7Ba",
  "sourcesContent": [
    "# markdown.coffee\r\n\r\nimport {marked} from 'marked'\r\nimport sanitizeHtml from 'sanitize-html'\r\n\r\nimport {\r\n\tundef, defined, notdefined, OL, isEmpty, nonEmpty, isString,\r\n\ttoArray, toBlock, isHashComment,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\r\nimport {\r\n\tdbg, dbgEnter, dbgReturn,\r\n\t} from '@jdeighan/base-utils/debug'\r\nimport {undented} from '@jdeighan/base-utils/indent'\r\n\r\nimport {TreeMapper} from '@jdeighan/mapper/tree'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport markdownify = (block) ->\r\n\r\n\tdbgEnter \"markdownify\", block\r\n\tassert isString(block), \"block is not a string\"\r\n\r\n\t# --- Remove leading zero-width characters\r\n\tblock = block.replace(/^[\\u200B\\u200C\\u200D\\u200E\\u200F\\uFEFF]/, '')\r\n\r\n\t# --- get array of lines\r\n\tlLines = toArray(block)\r\n\r\n\t# --- remove hash comments\r\n\tlLines = lLines.filter((line) => ! isHashComment(line));\r\n\r\n\t# --- unindent\r\n\tlLines = undented(lLines)\r\n\r\n\thtml = marked.parse(toBlock(lLines), {headerIds: false, mangle: false})\r\n\thtml = sanitizeHtml(html, {\r\n\t\tallowedAttributes: {\r\n\t\t\t'*': [ 'class']\r\n\t\t\t}\r\n\t\t})\r\n\tdbg \"marked returned\", html\r\n\tresult = html \\\r\n\t\t.replace(/\\{/g, '&lbrace;') \\\r\n\t\t.replace(/\\}/g, '&rbrace;') \\\r\n\t\t.replace(/\\$/g, '&dollar;')\r\n\tdbgReturn \"markdownify\", result\r\n\treturn result\r\n"
  ]
}
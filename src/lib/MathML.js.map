{
  "version": 3,
  "file": "MathML.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\MathML.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# MathML.coffee\r\n\r\nimport {\r\n\tundef, defined, pass, escapeStr, OL,\r\n\tisEmpty, isArray, isNumber, isString, isIdentifier,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {LOG} from '@jdeighan/base-utils/log'\r\nimport {\r\n\tdbg, dbgEnter, dbgReturn,\r\n\t} from '@jdeighan/base-utils/debug'\r\nimport {slurp} from '@jdeighan/base-utils/fs'\r\nimport {\r\n\tisSimpleFileName, fileExt, isFile, isDir, pathTo,\r\n\t} from '@jdeighan/coffee-utils/fs'\r\n\r\nimport {TreeMapper} from '@jdeighan/mapper/tree'\r\n\r\n# --- commands, with allowed # of args, allowed # of children\r\nhCommands = {\r\n\texpr:  [ undef,  undef]\r\n\tgroup: [ [0,2],  undef]\r\n\tsvg:   [   1,    0]\r\n\tsub:   [   0,    2]\r\n\tsup:   [   0,    2]\r\n\tfrac:  [   0,    2]\r\n\tSIGMA: [ [0,1],  [2,undef]]\r\n\t}\r\nexport isCommand = (str) -> hCommands[str]?\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mapMath = (line) ->\r\n\r\n\tdbgEnter \"mapMath\", line\r\n\tif isEmpty(line)\r\n\t\tdbgReturn \"mapMath\", undef\r\n\t\treturn undef\r\n\r\n\t# --- These should not be needed\r\n\tassert line.indexOf(\"\\n\")==-1, \"mapper(): line contains newline char\"\r\n\tassert line.indexOf(\"\\r\")==-1, \"mapper(): line contains return char\"\r\n\r\n\tlWords = line.split(/\\s+/)    # split on whitespace\r\n\tassert defined(lWords), \"lWords is not defined!\"\r\n\tassert lWords.length > 0, \"lWords is empty!\"\r\n\r\n\tif isCommand(lWords[0])\r\n\t\tcmd = lWords[0]\r\n\t\tdbg \"Command '#{cmd}' found\"\r\n\t\thNode = getNode(cmd, lWords.slice(1))\r\n\telse\r\n\t\tdbg \"expression found\"\r\n\t\thNode = getNode('expr', lWords)\r\n\r\n\tdbgReturn \"mapMath\", hNode\r\n\treturn hNode\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\ngetNode = (cmd, lArgs) ->\r\n\t# --- Converts lArgs to array of atoms lAtoms\r\n\t#     If no args, don't include key lAtoms\r\n\t#     except that the 'group' command automatically supplies default atoms\r\n\r\n\tdbgEnter \"getNode\", cmd, lArgs\r\n\tassert isCommand(cmd), \"getNode(): Not a command: '#{cmd}'\"\r\n\tassert isArray(lArgs), \"getNode(): lArgs not an array\"\r\n\r\n\tnArgs = lArgs.length\r\n\tif cmd == 'group'\r\n\t\t# --- if cmd 'group', fill in missing values with default values\r\n\t\tassert (nArgs <= 2), \"Invalid 'group', #{nArgs} args\"\r\n\t\t[left, right] = lArgs\r\n\r\n\t\tif !left\r\n\t\t\tleft = '('\r\n\t\tif !right\r\n\t\t\tright = matching(left)\r\n\t\tlArgs = [left, right]\r\n\t\tdbg 'lArgs', lArgs\r\n\telse if cmd == 'SIGMA'\r\n\t\tassert (nArgs <= 1), \"Invalid 'SIGMA', #{nArgs} args\"\r\n\t\tif (lArgs.length == 0)\r\n\t\t\tlArgs = ['&#x03A3;']\r\n\t\tdbg 'lArgs', lArgs\r\n\r\n\tif lArgs.length == 0\r\n\t\thNode = {cmd}\r\n\telse\r\n\t\thNode = {\r\n\t\t\tcmd\r\n\t\t\tlAtoms: atomList(lArgs)\r\n\t\t\t}\r\n\r\n\tcheckArgs cmd, hNode.lAtoms\r\n\tdbgReturn \"getNode\", hNode\r\n\treturn hNode\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\ncheckArgs = (cmd, lAtoms) ->\r\n\r\n\tassert isCommand(cmd), \"Not a command: '#{cmd}'\"\r\n\tif lAtoms?\r\n\t\tassert isArray(lAtoms), \"checkArgs(): lAtoms not an array\"\r\n\t\tnAtoms = lAtoms.length\r\n\telse\r\n\t\tnAtoms = 0\r\n\r\n\tcheck = hCommands[cmd][0]\r\n\tif isNumber(check)\r\n\t\tassert nAtoms==check, \\\r\n\t\t\t\t\"cmd #{cmd} has #{nAtoms} args, should be #{check}\"\r\n\telse if isArray(check)\r\n\t\t[min, max] = check\r\n\t\tif min?\r\n\t\t\tassert nAtoms >= min, \\\r\n\t\t\t\t\t\"cmd #{cmd} has #{nAtoms} args, min = #{min}\"\r\n\t\tif max?\r\n\t\t\tassert nAtoms <= max, \\\r\n\t\t\t\t\t\"cmd #{cmd} has #{nAtoms} args, max = #{max}\"\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\natom = (str) ->\r\n\r\n\tassert isString(str), \"atom(): not a string\"\r\n\tif isIntegerStr(str)\r\n\t\treturn {\r\n\t\t\ttype: 'number'\r\n\t\t\tvalue: str\r\n\t\t\t}\r\n\telse if isIdentifier(str)\r\n\t\treturn {\r\n\t\t\ttype: 'ident'\r\n\t\t\tvalue: str\r\n\t\t\t}\r\n\telse\r\n\t\treturn {\r\n\t\t\ttype: 'op'\r\n\t\t\tvalue: str\r\n\t\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\natomList = (lItems) ->\r\n\r\n\tif !lItems? || (lItems.length==0) then return undef\r\n\tlAtoms = for str,i in lItems\r\n\t\tassert isString(str), \"atomList(): not a string: #{OL(str)} at #{i}\"\r\n\t\tatom(str)\r\n\treturn lAtoms\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nmatching = (bracket) ->\r\n\tassert bracket?, \"matching(): bracket is not defined\"\r\n\tswitch bracket\r\n\t\twhen '(' then return ')'\r\n\t\twhen '[' then return ']'\r\n\t\twhen '{' then return '}'\r\n\t\telse\r\n\t\t\treturn bracket\r\n\r\n# ===========================================================================\r\n\r\nexport class MathTreeWalker extends TreeMapper\r\n\t# --- The @dir parameter is required if you use svg\r\n\r\n\tconstructor: (tree, @dir=undef) ->\r\n\r\n\t\tsuper tree\r\n\t\t@mathml = ''\r\n\r\n\t# ..........................................................\r\n\r\n\tvisit: (superNode) ->\r\n\r\n\t\tdbgEnter \"visit\"\r\n\t\tnode = superNode.node\r\n\t\tswitch node.cmd\r\n\t\t\twhen 'expr'\r\n\t\t\t\tdbg \"cmd: #{node.cmd}\"\r\n\t\t\t\t@mathml += \"<mrow>\"\r\n\t\t\t\tfor atom in node.lAtoms\r\n\t\t\t\t\tswitch atom.type\r\n\t\t\t\t\t\twhen 'number'\r\n\t\t\t\t\t\t\t@mathml += \"<mn>#{atom.value}</mn>\"\r\n\t\t\t\t\t\twhen 'ident'\r\n\t\t\t\t\t\t\t@mathml += \"<mi>#{atom.value}</mi>\"\r\n\t\t\t\t\t\twhen 'op'\r\n\t\t\t\t\t\t\t@mathml += \"<mo>#{atom.value}</mo>\"\r\n\t\t\twhen 'svg'\r\n\t\t\t\tdbg \"cmd: #{node.cmd}\"\r\n\t\t\t\tleft = node.lAtoms[0]\r\n\t\t\t\tright = node.lAtoms[1]\r\n\t\t\t\t@mathml += \"<semantics><annotation-xml encoding='SVG1.1'>\\n\"\r\n\t\t\t\t@mathml += getSVG(left, @dir)\r\n\t\t\t\t@mathml += \"\\n</annotation-xml></semantics>\\n\"\r\n\t\t\twhen 'group'\r\n\t\t\t\tdbg \"cmd: #{node.cmd}\"\r\n\t\t\t\t@mathml += \"<mrow>\"\r\n\t\t\t\t@mathml += node.lAtoms[0].value\r\n\t\t\twhen 'sub'\r\n\t\t\t\tdbg \"cmd: #{node.cmd}\"\r\n\t\t\t\t@mathml += \"<msub>\"\r\n\t\t\twhen 'SIGMA'\r\n\t\t\t\tdbg \"cmd: #{node.cmd}\"\r\n\t\t\t\t@mathml += \"<munderover>\"\r\n\t\t\t\t@mathml += \"<mo class='large'> &#x03A3; </mo>\"\r\n\t\t\telse\r\n\t\t\t\tcroak \"visit(): Not a command: '#{node.cmd}'\"\r\n\t\tdbgReturn \"visit\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tendVisit: (superNode) ->\r\n\r\n\t\tdbgEnter \"endVisit\"\r\n\t\tnode = superNode.node\r\n\t\tswitch node.cmd\r\n\t\t\twhen 'expr'\r\n\t\t\t\tdbg \"cmd: #{node.cmd}\"\r\n\t\t\t\t@mathml += \"</mrow>\"\r\n\t\t\twhen 'group'\r\n\t\t\t\tdbg \"cmd: #{node.cmd}\"\r\n\t\t\t\t@mathml += node.lAtoms[1].value\r\n\t\t\t\t@mathml += \"</mrow>\"\r\n\t\t\twhen 'sub'\r\n\t\t\t\tdbg \"cmd: #{node.cmd}\"\r\n\t\t\t\t@mathml += \"</msub>\"\r\n\t\t\twhen 'SIGMA'\r\n\t\t\t\tdbg \"cmd: #{node.cmd}\"\r\n\t\t\t\t@mathml += \"</munderover>\"\r\n\t\t\twhen 'svg'\r\n\t\t\t\tpass\r\n\t\t\telse\r\n\t\t\t\tcroak \"endVisit(): Not a command: '#{node.cmd}'\"\r\n\t\tdbgReturn \"endVisit\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tgetMathML: () ->\r\n\r\n\t\tdbg \"CALL getMathML()\"\r\n\t\treturn @mathml\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\ngetSVG = (fname, dir) ->\r\n\r\n\tassert dir && isDir(dir), \"getSVG(): No search dir set\"\r\n\tdbg \"getSVG(): fname: #{fname}\"\r\n\tassert isSimpleFileName(fname),\\\r\n\t\t\t\"getSVG(): svg file should be simple file name\"\r\n\tassert fileExt(fname)=='.svg', \"getSVG(): svg file should end with .svg\"\r\n\tassert isFile(fname),\\\r\n\t\t\"getSVG(): file '#{fname}' does not exist or is not a file\"\r\n\tfullpath = pathTo(fname, dir)\r\n\tdbg \"getSVG(): fullpath: '#{fullpath}'\"\r\n\tcontents = slurp(fullpath)\r\n\treturn \"\"\"\r\n\t\t\t<semantics><annotation-xml encoding='SVG1.1'>\r\n\t     \t#{contents}\r\n\t     \t</annotation-xml></semantics>\r\n\t     \t\"\"\"\r\n\r\n# ===========================================================================\r\n#   Utilities\r\n# ===========================================================================\r\n\r\nisIntegerStr = (str) ->\r\n\r\n\tassert isString(str), \"isIntegerStr(): not a string\"\r\n\tif lMatches = str.match(///^ \\d+ (.*) $///)\r\n\t\t[_, tail] = lMatches\r\n\t\tassert !tail || tail.length==0, \"Invalid number\"\r\n\t\treturn true\r\n\telse\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n"
  ]
}
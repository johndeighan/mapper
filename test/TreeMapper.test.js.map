{
  "version": 3,
  "file": "TreeMapper.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\TreeMapper.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# TreeMapper.test.coffee\n\nimport {\n\tundef, pass, OL, defined, toBlock, toArray,\n\tisEmpty, nonEmpty, isString, isArray, DUMP,\n\t} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {LOG, LOGVALUE, echoLogsByDefault} from '@jdeighan/base-utils/log'\nimport {fromTAML} from '@jdeighan/base-utils/taml'\nimport {\n\tdbg, dbgEnter, dbgReturn, setDebugging,\n\t} from '@jdeighan/base-utils/debug'\nimport {\n\tUnitTester, utest,\n\t} from '@jdeighan/unit-tester'\nimport {\n\tindentLevel, undented, splitLine, indented,\n\t} from '@jdeighan/coffee-utils/indent'\nimport {mydir, mkpath} from '@jdeighan/coffee-utils/fs'\n\nimport {map} from '@jdeighan/mapper'\nimport {TreeMapper, getTrace} from '@jdeighan/mapper/tree'\nimport {markdownify} from '@jdeighan/mapper/markdown'\n\nechoLogsByDefault false\n\n###\n\tclass TreeMapper should handle the following:\n\t\t- remove empty lines and comments\n\t\t- extension lines\n\t\t- can override @getUserObj()\n\t\t- call @walk() to walk the tree\n\t\t- can override:\n\t\t\t- beginLevel()\n\t\t\t- visit()\n\t\t\t- endVisit()\n\t\t\t- endLevel()\n###\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tclass MapTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\tmapper = new TreeMapper(block)\n\t\t\tlNodes = []\n\t\t\tfor hNode from mapper.allNodes()\n\t\t\t\tlNodes.push hNode\n\t\t\tassert isArray(lNodes), \"lNodes is #{OL(lNodes)}\"\n\t\t\treturn lNodes\n\n\tmapTester = new MapTester()\n\n\t# ------------------------------------------------------------------------\n\t# --- remove comments and blank lines\n\t#     create user object from utest line\n\n\tmapTester.like 58, \"\"\"\n\t\t\t# --- comment, followed by blank line xxx\n\n\t\t\tabc\n\t\t\t\"\"\", [\n\t\t\t{str: 'abc', level: 0},\n\t\t\t]\n\n\t# ------------------------------------------------------------------------\n\t# --- remove comments and blank lines\n\t#     create user object from utest line\n\n\tmapTester.like 70, \"\"\"\n\t\t\t# --- comment, followed by blank line\n\n\t\t\tabc\n\n\t\t\t# --- this should not be removed\n\n\t\t\tdef\n\t\t\t\"\"\", [\n\t\t\t{str: 'abc', level: 0},\n\t\t\t{str: 'def', level: 0},\n\t\t\t]\n\n\t# ------------------------------------------------------------------------\n\t# --- level\n\n\tmapTester.like 86, \"\"\"\n\t\t\tabc\n\t\t\t\tdef\n\t\t\t\t\tghi\n\t\t\t\tuvw\n\t\t\txyz\n\t\t\t\"\"\", [\n\t\t\t{str: 'abc', level: 0 },\n\t\t\t{str: 'def', level: 1 },\n\t\t\t{str: 'ghi', level: 2 },\n\t\t\t{str: 'uvw', level: 1 },\n\t\t\t{str: 'xyz', level: 0 },\n\t\t\t]\n\t)()\n\n# ---------------------------------------------------------------------------\n# Create a more compact mapTester\n\n(() ->\n\tclass MapTester extends UnitTester\n\n\t\tconstructor: () ->\n\n\t\t\tsuper()\n\t\t\t@debug = false\n\n\t\ttransformValue: (block) ->\n\n\t\t\tmapper = new TreeMapper(block)\n\t\t\tlNodes = []\n\t\t\tfor hNode from mapper.allNodes()\n\t\t\t\tlNodes.push hNode\n\t\t\tif @debug\n\t\t\t\tLOG 'lNodes', lNodes\n\t\t\tassert isArray(lNodes), \"lNodes is #{OL(lNodes)}\"\n\t\t\treturn lNodes\n\n\t\teval_expr: (str) ->\n\n\t\t\tstr = str.replace(/\\bundef\\b/g, 'undefined')\n\t\t\treturn Function('\"use strict\";return (' + str + ')')();\n\n\t\tgetUserObj: (line) ->\n\n\t\t\tpos = line.indexOf(' ')\n\t\t\tassert (pos > 0), \"Missing 1st space char in #{OL(line)}\"\n\t\t\tlevel = parseInt(line.substring(0, pos))\n\t\t\tstr = line.substring(pos+1).replace(/\\\\N/g, '\\n').replace(/\\\\T/g, '\\t')\n\n\t\t\tif (str[0] == '{')\n\t\t\t\tstr = @eval_expr(str)\n\n\t\t\treturn {str, level}\n\n\t\ttransformExpected: (block) ->\n\n\t\t\tlExpected = []\n\t\t\tfor line in toArray(block)\n\t\t\t\tif @debug\n\t\t\t\t\tLOG 'transform line', line\n\t\t\t\tlExpected.push @getUserObj(line)\n\t\t\tif @debug\n\t\t\t\tLOG 'lExpected', lExpected\n\t\t\tassert isArray(lExpected), \"lExpected is #{OL(lExpected)}\"\n\t\t\treturn lExpected\n\n\t\tdoDebug: (flag=true) ->\n\n\t\t\t@debug = flag\n\t\t\treturn\n\n\tmapTester = new MapTester()\n\n\t# ------------------------------------------------------------------------\n\n\tmapTester.like 161, \"\"\"\n\t\t\tabc\n\t\t\t\tdef\n\t\t\t\t\tghi\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 abc\n\t\t\t1 def\n\t\t\t2 ghi\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- const replacement\n\n\tmapTester.like 174, \"\"\"\n\t\t\t#define name John Deighan\n\t\t\tabc\n\t\t\t__name__\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 abc\n\t\t\t0 John Deighan\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- extension lines\n\n\tmapTester.like 186, \"\"\"\n\t\t\tabc\n\t\t\t\t\t&& def\n\t\t\t\t\t&& ghi\n\t\t\txyz\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 abc && def && ghi\n\t\t\t0 xyz\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- HEREDOC handling - block (default)\n\n\tmapTester.like 199, \"\"\"\n\t\t\tfunc(<<<)\n\t\t\t\tabc\n\t\t\t\tdef\n\n\t\t\txyz\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 func(\"abc\\\\ndef\")\n\t\t\t0 xyz\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- HEREDOC handling - block (explicit)\n\n\tmapTester.like 213, \"\"\"\n\t\t\tfunc(<<<)\n\t\t\t\t===\n\t\t\t\tabc\n\t\t\t\tdef\n\n\t\t\txyz\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 func(\"abc\\\\ndef\")\n\t\t\t0 xyz\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- HEREDOC handling - oneline\n\n\tmapTester.like 228, \"\"\"\n\t\t\tfunc(<<<)\n\t\t\t\t...\n\t\t\t\tabc\n\t\t\t\tdef\n\n\t\t\txyz\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 func(\"abc def\")\n\t\t\t0 xyz\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- HEREDOC handling - oneline\n\n\tmapTester.like 243, \"\"\"\n\t\t\tfunc(<<<)\n\t\t\t\t...abc\n\t\t\t\t\tdef\n\n\t\t\txyz\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 func(\"abc def\")\n\t\t\t0 xyz\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- HEREDOC handling - TAML\n\n\tmapTester.like 257, \"\"\"\n\t\t\tfunc(<<<)\n\t\t\t\t---\n\t\t\t\t- abc\n\t\t\t\t- def\n\n\t\t\txyz\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 func([\"abc\",\"def\"])\n\t\t\t0 xyz\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- using __END__\n\n\tmapTester.like 272, \"\"\"\n\t\t\tabc\n\t\t\tdef\n\t\t\t__END__\n\t\t\tghi\n\t\t\tjkl\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 abc\n\t\t\t0 def\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# ------------------------------------------------------------------------\n\t# --- test #ifdef with no value - value not defined\n\n\tmapTester.like 287, \"\"\"\n\t\t\t#ifdef mobile\n\t\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 def\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- test #ifdef with no value - value defined\n\n\tmapTester.like 298, \"\"\"\n\t\t\t#define mobile anything\n\t\t\t#ifdef mobile\n\t\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 abc\n\t\t\t0 def\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# ------------------------------------------------------------------------\n\t# --- test #ifdef with a value - value not defined\n\n\tmapTester.like 312, \"\"\"\n\t\t\t#ifdef mobile samsung\n\t\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 def\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- test #ifdef with a value - value defined, but different\n\n\tmapTester.like 323, \"\"\"\n\t\t\t#define mobile apple\n\t\t\t#ifdef mobile samsung\n\t\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 def\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- test #ifdef with a value - value defined and same\n\n\tmapTester.like 335, \"\"\"\n\t\t\t#define mobile samsung\n\t\t\t#ifdef mobile samsung\n\t\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 abc\n\t\t\t0 def\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# ------------------------------------------------------------------------\n\t# --- test #ifndef with no value - not defined\n\n\tmapTester.like 349, \"\"\"\n\t\t\t#ifndef mobile\n\t\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 abc\n\t\t\t0 def\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- test #ifndef with no value - defined\n\n\tmapTester.like 361, \"\"\"\n\t\t\t#define mobile anything\n\t\t\t#ifndef mobile\n\t\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 def\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# ------------------------------------------------------------------------\n\t# --- test #ifndef with a value - not defined\n\n\tmapTester.like 374, \"\"\"\n\t\t\t#ifndef mobile samsung\n\t\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 abc\n\t\t\t0 def\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- test #ifndef with a value - defined, but different\n\n\tmapTester.like 386, \"\"\"\n\t\t\t#define mobile apple\n\t\t\t#ifndef mobile samsung\n\t\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 abc\n\t\t\t0 def\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# --- test #ifndef with a value - defined and same\n\n\tmapTester.like 399, \"\"\"\n\t\t\t#define mobile samsung\n\t\t\t#ifndef mobile samsung\n\t\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 def\n\t\t\t\"\"\"\n\n\t# ------------------------------------------------------------------------\n\t# ------------------------------------------------------------------------\n\t# --- nested commands\n\n\tmapTester.like 412, \"\"\"\n\t\t\t#define mobile samsung\n\t\t\t#define large anything\n\t\t\t#ifdef mobile samsung\n\t\t\t\t#ifdef large\n\t\t\t\t\tabc\n\t\t\t\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 abc\n\t\t\t1 def\n\t\t\t\"\"\"\n\n\t# --- nested commands\n\n\tmapTester.like 426, \"\"\"\n\t\t\t#define mobile samsung\n\t\t\t#define large anything\n\t\t\t#ifndef mobile samsung\n\t\t\t\t#ifdef large\n\t\t\t\t\tabc\n\t\t\t\"\"\", \"\"\n\n\t# --- nested commands\n\n\tmapTester.like 436, \"\"\"\n\t\t\t#define mobile samsung\n\t\t\t#define large anything\n\t\t\t#ifdef mobile samsung\n\t\t\t\t#ifndef large\n\t\t\t\t\tabc\n\t\t\t\"\"\", \"\"\n\n\t# --- nested commands\n\n\tmapTester.like 446, \"\"\"\n\t\t\t#define mobile samsung\n\t\t\t#define large anything\n\t\t\t#ifndef mobile samsung\n\t\t\t\t#ifndef large\n\t\t\t\t\tabc\n\t\t\t\"\"\", \"\"\n\n\t# ----------------------------------------------------------\n\t# --- nested commands - every combination\n\n\tmapTester.like 457, \"\"\"\n\t\t\t#define mobile samsung\n\t\t\t#define large anything\n\t\t\t#ifdef mobile samsung\n\t\t\t\tabc\n\t\t\t\t#ifdef large\n\t\t\t\t\tdef\n\t\t\tghi\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 abc\n\t\t\t0 def\n\t\t\t0 ghi\n\t\t\t\"\"\"\n\n\t# --- nested commands - every combination\n\n\tmapTester.like 473, \"\"\"\n\t\t\t#define mobile samsung\n\t\t\t#ifdef mobile samsung\n\t\t\t\tabc\n\t\t\t\t#ifdef large\n\t\t\t\t\tdef\n\t\t\tghi\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 abc\n\t\t\t0 ghi\n\t\t\t\"\"\"\n\n\t# --- nested commands - every combination\n\n\tmapTester.like 487, \"\"\"\n\t\t\t#define large anything\n\t\t\t#ifdef mobile samsung\n\t\t\t\tabc\n\t\t\t\t#ifdef large\n\t\t\t\t\tdef\n\t\t\tghi\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 ghi\n\t\t\t\"\"\"\n\n\t# --- nested commands - every combination\n\n\tmapTester.like 500, \"\"\"\n\t\t\t#ifdef mobile samsung\n\t\t\t\tabc\n\t\t\t\t#ifdef large\n\t\t\t\t\tdef\n\t\t\tghi\n\t\t\t\"\"\", \"\"\"\n\t\t\t0 ghi\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n#             BEGIN walk\n# ---------------------------------------------------------------------------\n\n# ---------------------------------------------------------------------------\n# Test TreeMapper.walk()\n\n(() ->\n\tclass Tester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\treturn getTrace(block)\n\n\twalkTester = new Tester()\n\n\twalkTester.equal 528, \"\",\n\t\t\t\"\"\"\n\t\t\tBEGIN WALK\n\t\t\tEND WALK\n\t\t\t\"\"\"\n\n\twalkTester.equal 534, \"\"\"\n\t\t\tabc\n\t\t\t\"\"\", \"\"\"\n\t\t\tBEGIN WALK\n\t\t\tBEGIN LEVEL 0\n\t\t\tVISIT 0 'abc'\n\t\t\tEND VISIT 0 'abc'\n\t\t\tEND LEVEL 0\n\t\t\tEND WALK\n\t\t\t\"\"\"\n\n\twalkTester.equal 545, \"\"\"\n\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\tBEGIN WALK\n\t\t\tBEGIN LEVEL 0\n\t\t\tVISIT 0 'abc'\n\t\t\tEND VISIT 0 'abc'\n\t\t\tVISIT 0 'def'\n\t\t\tEND VISIT 0 'def'\n\t\t\tEND LEVEL 0\n\t\t\tEND WALK\n\t\t\t\"\"\"\n\n\twalkTester.equal 559, \"\"\"\n\t\t\tabc\n\t\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\tBEGIN WALK\n\t\t\tBEGIN LEVEL 0\n\t\t\tVISIT 0 'abc'\n\t\t\t\tBEGIN LEVEL 1\n\t\t\t\tVISIT 1 'def'\n\t\t\t\tEND VISIT 1 'def'\n\t\t\t\tEND LEVEL 1\n\t\t\tEND VISIT 0 'abc'\n\t\t\tEND LEVEL 0\n\t\t\tEND WALK\n\t\t\t\"\"\"\n\n\twalkTester.equal 575, \"\"\"\n\t\t\t# this is a unit test\n\t\t\tabc\n\n\t\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\tBEGIN WALK\n\t\t\tBEGIN LEVEL 0\n\t\t\tVISIT 0 'abc'\n\t\t\t\tBEGIN LEVEL 1\n\t\t\t\tVISIT 1 'def'\n\t\t\t\tEND VISIT 1 'def'\n\t\t\t\tEND LEVEL 1\n\t\t\tEND VISIT 0 'abc'\n\t\t\tEND LEVEL 0\n\t\t\tEND WALK\n\t\t\t\"\"\"\n\n\twalkTester.equal 593, \"\"\"\n\t\t\t# this is a unit test\n\t\t\tabc\n\t\t\t__END__\n\t\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\tBEGIN WALK\n\t\t\tBEGIN LEVEL 0\n\t\t\tVISIT 0 'abc'\n\t\t\tEND VISIT 0 'abc'\n\t\t\tEND LEVEL 0\n\t\t\tEND WALK\n\t\t\t\"\"\"\n\n\twalkTester.equal 607, \"\"\"\n\t\t\t# this is a unit test\n\t\t\tabc\n\t\t\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\tBEGIN WALK\n\t\t\tBEGIN LEVEL 0\n\t\t\tVISIT 0 'abc˳def'\n\t\t\tEND VISIT 0 'abc˳def'\n\t\t\tEND LEVEL 0\n\t\t\tEND WALK\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n#             END walk\n# ---------------------------------------------------------------------------\n\n# ---------------------------------------------------------------------------\n#             BEGIN ifdef\n# ---------------------------------------------------------------------------\n\n# ---------------------------------------------------------------------------\n\nclass WalkTester extends UnitTester\n\n\ttransformValue: (block) ->\n\n\t\t\treturn getTrace(block)\n\nwalkTester = new WalkTester()\n\n# ..........................................................\n\nwalkTester.equal 642, \"\"\"\n\t\tabc\n\t\t\"\"\", \"\"\"\n\t\tBEGIN WALK\n\t\tBEGIN LEVEL 0\n\t\tVISIT 0 'abc'\n\t\tEND VISIT 0 'abc'\n\t\tEND LEVEL 0\n\t\tEND WALK\n\t\t\"\"\"\n\nwalkTester.equal 653, \"\"\"\n\t\tabc\n\t\tdef\n\t\t\"\"\", \"\"\"\n\t\tBEGIN WALK\n\t\tBEGIN LEVEL 0\n\t\tVISIT 0 'abc'\n\t\tEND VISIT 0 'abc'\n\t\tVISIT 0 'def'\n\t\tEND VISIT 0 'def'\n\t\tEND LEVEL 0\n\t\tEND WALK\n\t\t\"\"\"\n\nwalkTester.equal 667, \"\"\"\n\t\tabc\n\t\t\tdef\n\t\t\"\"\", \"\"\"\n\t\tBEGIN WALK\n\t\tBEGIN LEVEL 0\n\t\tVISIT 0 'abc'\n\t\t\tBEGIN LEVEL 1\n\t\t\tVISIT 1 'def'\n\t\t\tEND VISIT 1 'def'\n\t\t\tEND LEVEL 1\n\t\tEND VISIT 0 'abc'\n\t\tEND LEVEL 0\n\t\tEND WALK\n\t\t\"\"\"\n\nwalkTester.equal 683, \"\"\"\n\t\tabc\n\t\t#ifdef NOPE\n\t\t\tdef\n\t\t\"\"\", \"\"\"\n\t\tBEGIN WALK\n\t\tBEGIN LEVEL 0\n\t\tVISIT 0 'abc'\n\t\tEND VISIT 0 'abc'\n\t\tEND LEVEL 0\n\t\tEND WALK\n\t\t\"\"\"\n\nwalkTester.equal 696, \"\"\"\n\t\tabc\n\t\t#ifndef NOPE\n\t\t\tdef\n\t\t\"\"\", \"\"\"\n\t\tBEGIN WALK\n\t\tBEGIN LEVEL 0\n\t\tVISIT 0 'abc'\n\t\tEND VISIT 0 'abc'\n\t\tVISIT 0 'def'\n\t\tEND VISIT 0 'def'\n\t\tEND LEVEL 0\n\t\tEND WALK\n\t\t\"\"\"\n\nwalkTester.equal 711, \"\"\"\n\t\t#define NOPE 42\n\t\tabc\n\t\t#ifndef NOPE\n\t\t\tdef\n\t\t\"\"\", \"\"\"\n\t\tBEGIN WALK\n\t\tBEGIN LEVEL 0\n\t\tVISIT 0 'abc'\n\t\tEND VISIT 0 'abc'\n\t\tEND LEVEL 0\n\t\tEND WALK\n\t\t\"\"\"\n\nwalkTester.equal 725, \"\"\"\n\t\t#define NOPE 42\n\t\tabc\n\t\t#ifdef NOPE\n\t\t\tdef\n\t\t\"\"\", \"\"\"\n\t\tBEGIN WALK\n\t\tBEGIN LEVEL 0\n\t\tVISIT 0 'abc'\n\t\tEND VISIT 0 'abc'\n\t\tVISIT 0 'def'\n\t\tEND VISIT 0 'def'\n\t\tEND LEVEL 0\n\t\tEND WALK\n\t\t\"\"\"\n\nwalkTester.equal 741, \"\"\"\n\t\t#define NOPE 42\n\t\t#define name John\n\t\tabc\n\t\t#ifdef NOPE\n\t\t\tdef\n\t\t\t#ifdef name\n\t\t\t\tghi\n\t\t\"\"\", \"\"\"\n\t\tBEGIN WALK\n\t\tBEGIN LEVEL 0\n\t\tVISIT 0 'abc'\n\t\tEND VISIT 0 'abc'\n\t\tVISIT 0 'def'\n\t\tEND VISIT 0 'def'\n\t\tVISIT 0 'ghi'\n\t\tEND VISIT 0 'ghi'\n\t\tEND LEVEL 0\n\t\tEND WALK\n\t\t\"\"\"\n\n# ---------------------------------------------------------------------------\n#             END ifdef\n# ---------------------------------------------------------------------------\n\n# --- Test TreeMapper.get() with special lines\n\n(() ->\n\tmapper = new TreeMapper(\"\"\"\n\t\tline1\n\t\t# a comment\n\t\tline2\n\n\t\tline3\n\t\t\"\"\")\n\tutest.like 776, mapper.get(), {\n\t\tstr: 'line1'\n\t\tlevel: 0\n\t\tsource: \"<unknown>/1\"\n\t\t}\n\tutest.like 781, mapper.get(), {\n\t\tstr: 'line2'\n\t\tlevel: 0\n\t\tsource: \"<unknown>/3\"\n\t\t}\n\tutest.like 786, mapper.get(), {\n\t\tstr: 'line3'\n\t\tlevel: 0\n\t\tsource: \"<unknown>/5\"\n\t\t}\n\tutest.equal 791, mapper.get(), undef\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# Test TreeMapper.get()\n\n(() ->\n\tmapper = new TreeMapper(\"\"\"\n\t\t\t# --- a comment\n\n\t\t\tabc\n\t\t\t\tdef\n\t\t\t\t\tghi\n\t\t\t\"\"\")\n\n\tutest.like 807, mapper.get(), {\n\t\tstr:  'abc'\n\t\tlevel: 0\n\t\t}\n\tutest.like 811, mapper.get(), {\n\t\tstr:  'def'\n\t\tlevel: 1\n\t\t}\n\tutest.like 815, mapper.get(), {\n\t\tstr:  'ghi'\n\t\tlevel: 2\n\t\t}\n\tutest.equal 819, mapper.get(), undef\n\t)()\n\n# ---------------------------------------------------------------------------\n# Test __END__ and extension lines with TreeMapper.get()\n\n(() ->\n\tmapper = new TreeMapper(\"\"\"\n\t\t\tabc\n\t\t\t\t\tdef\n\t\t\t\tghi\n\t\t\t__END__\n\t\t\t\t\tghi\n\t\t\t\"\"\")\n\n\t# --- get() should return {uobj, level}\n\n\tutest.like 836, mapper.get(), {\n\t\tstr: 'abc def'\n\t\tlevel: 0\n\t\t}\n\tutest.like 840, mapper.get(), {\n\t\tstr: 'ghi'\n\t\tlevel: 1\n\t\t}\n\tutest.equal 844, mapper.get(), undef\n\t)()\n\n# ---------------------------------------------------------------------------\n# __END__ only works with no identation\n\n(() ->\n\tutest.fails 851, () -> map(\"\"\"\n\t\t\tabc\n\t\t\t\t\tdef\n\t\t\t\tghi\n\t\t\t\t__END__\n\t\t\t\t\tghi\n\t\t\t\"\"\", TreeMapper)\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\tclass Tester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\treturn map(block, TreeMapper)\n\n\ttreeTester = new Tester()\n\n\t# ---------------------------------------------------------------------------\n\t# --- Test basic reading till EOF\n\n\ttreeTester.equal 875, \"\"\"\n\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\"\n\n\ttreeTester.equal 883, \"\"\"\n\t\t\tabc\n\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\"\n\n\ttreeTester.equal 892, \"\"\"\n\t\t# --- a comment\n\t\tp\n\t\t\tmargin: 0\n\t\t\tspan\n\t\t\t\tcolor: red\n\t\t\"\"\", \"\"\"\n\t\tp\n\t\t\tmargin: 0\n\t\t\tspan\n\t\t\t\tcolor: red\n\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# Test empty line handling\n\n(() ->\n\tclass MyMapper extends TreeMapper\n\n\t\t# --- This removes blank lines\n\t\tmapEmptyLine: () ->\n\n\t\t\tdbg \"in MyMapper.mapEmptyLine()\"\n\t\t\treturn undef\n\n\t# ..........................................................\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\treturn map(block, MyMapper)\n\n\ttreeTester = new MyTester()\n\n\t# ..........................................................\n\n\tblock = \"\"\"\n\t\t\tabc\n\n\t\t\tdef\n\t\t\t\"\"\"\n\n\tutest.equal 937, map(block, MyMapper), \"\"\"\n\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\"\n\n\ttreeTester.equal 942, block, \"\"\"\n\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# Test comment handling\n\n(() ->\n\tclass MyMapper extends TreeMapper\n\n\t\tisComment: (hNode) ->\n\n\t\t\t# --- comments start with //\n\t\t\treturn hNode.str.match(///^ \\/ \\/ ///)\n\n\t\tmapComment: (hNode) ->\n\n\t\t\t# --- remove comments\n\t\t\treturn undef\n\n\t# ..........................................................\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\treturn map(block, MyMapper)\n\n\ttreeTester = new MyTester()\n\n\t# ..........................................................\n\n\tblock = \"\"\"\n\t\t\t// a comment - should be removed\n\t\t\t//also a comment\n\t\t\t# not a comment\n\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\"\n\n\tutest.equal 985, map(block, MyMapper), \"\"\"\n\t\t\t# not a comment\n\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\"\n\n\ttreeTester.equal 991, block, \"\"\"\n\t\t\t# not a comment\n\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# Test command handling\n\n(() ->\n\tclass MyMapper extends TreeMapper\n\n\t\tisCmd: (hNode) ->\n\t\t\t# --- commands consist of '-' + one whitespace char + word\n\t\t\tif (lMatches = hNode.str.match(///^ - \\s (\\w+) $///))\n\t\t\t\thNode.uobj = {\n\t\t\t\t\tcmd: lMatches[1]\n\t\t\t\t\targstr: ''\n\t\t\t\t\t}\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\n\t\t# .......................................................\n\n\t\tmapCmd: (hNode) ->\n\n\t\t\t# --- NOTE: this disables handling all commands,\n\t\t\t#           i.e. #define, etc.\n\t\t\t# --- Returning any non-undef value prevents discarding hNode\n\t\t\t#     and sets key uobj to the returned value\n\t\t\treturn hNode.uobj\n\n\t\t# .......................................................\n\n\t\tvisitCmd: (hNode) ->\n\n\t\t\tdbgEnter \"MyMapper.visitCmd\"\n\t\t\tresult = \"COMMAND: #{hNode.uobj.cmd}\"\n\t\t\tdbgReturn \"MyMapper.visitCmd\", result\n\t\t\treturn result\n\n\t# ..........................................................\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\t\t\treturn map(block, MyMapper)\n\n\ttreeTester = new MyTester()\n\n\t# ..........................................................\n\n\tblock = \"\"\"\n\t\t\t# remove this\n\n\t\t\tabc\n\t\t\t- command\n\t\t\tdef\n\t\t\t\"\"\"\n\n\ttreeTester.equal 1054, block, \"\"\"\n\t\t\tabc\n\t\t\tCOMMAND: command\n\t\t\tdef\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# try retaining indentation for mapped lines\n\n(()->\n\n\t# --- NOTE: getUserObj() returns anything,\n\t#           or undef to ignore the line\n\n\tclass MyMapper extends TreeMapper\n\n\t\t# --- This maps all non-empty lines to the string 'x'\n\t\t#     and removes all empty lines\n\t\tgetUserObj: (hNode) ->\n\n\t\t\tdbgEnter \"MyMapper.getUserObj\", hNode\n\t\t\t{str, level} = hNode\n\t\t\tif isEmpty(str)\n\t\t\t\tdbgReturn \"MyMapper.getUserObj\", undef\n\t\t\t\treturn undef\n\t\t\telse\n\t\t\t\tresult = 'x'\n\t\t\t\tdbgReturn \"MyMapper.getUserObj\", result\n\t\t\t\treturn result\n\n\t# ..........................................................\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\treturn map(block, MyMapper)\n\n\ttreeTester = new MyTester()\n\n\t# ..........................................................\n\n\ttreeTester.equal 1098, \"\"\"\n\t\t\tabc\n\t\t\t\tdef\n\n\t\t\tghi\n\t\t\t\"\"\", \"\"\"\n\t\t\tx\n\t\t\t\tx\n\t\t\tx\n\t\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Test ability to access 'this' object from a TreeMapper\n#     Goal: remove not only blank lines, but also the line following\n\n(()->\n\n\tclass MyMapper extends TreeMapper\n\n\t\t# --- Remove blank lines PLUS the line following a blank line\n\t\tmapEmptyLine: (hNode) ->\n\n\t\t\tfollow = @fetch()\n\t\t\treturn undef    # remove empty lines\n\n\t# ..........................................................\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\treturn map(block, MyMapper)\n\n\ttreeTester = new MyTester()\n\n\t# ..........................................................\n\n\ttreeTester.equal 1136, \"\"\"\n\t\t\tabc\n\n\t\t\tdef\n\t\t\tghi\n\t\t\t\"\"\", \"\"\"\n\t\t\tabc\n\t\t\tghi\n\t\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Test #include\n\n(() ->\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\treturn map(block, TreeMapper)\n\n\t# ..........................................................\n\n\ttreeTester = new MyTester()\n\n\ttreeTester.equal 1162, \"\"\"\n\t\t\tabc\n\t\t\t\t#include title.md\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\tabc\n\t\t\t\ttitle\n\t\t\t\t=====\n\t\t\tdef\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Test allNodes()\n\n(() ->\n\n\t# ..........................................................\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\tmapper = new TreeMapper(block)\n\t\t\treturn Array.from(mapper.allNodes())\n\n\ttreeTester = new MyTester()\n\n\ttreeTester.like 1191, \"\"\"\n\t\t\tabc\n\t\t\t\tdef\n\t\t\t\t\tghi\n\t\t\tjkl\n\t\t\t\"\"\", fromTAML(\"\"\"\n\t\t\t---\n\t\t\t-\n\t\t\t\tlevel: 0\n\t\t\t\tstr: 'abc'\n\t\t\t-\n\t\t\t\tlevel: 1\n\t\t\t\tstr: 'def'\n\t\t\t-\n\t\t\t\tlevel: 2\n\t\t\t\tstr: 'ghi'\n\t\t\t-\n\t\t\t\tlevel: 0\n\t\t\t\tstr: 'jkl'\n\t\t\t\"\"\")\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\tmapper = new TreeMapper(\"\"\"\n\t\t\tif (x == 2)\n\t\t\t\tdoThis\n\t\t\t\tdoThat\n\t\t\t\t\tthen this\n\t\t\twhile (x > 2)\n\t\t\t\t--x\n\t\t\t\"\"\")\n\n\tutest.like 1227, mapper.get(),  {level:0, str: 'if (x == 2)'}\n\tutest.like 1228, mapper.get(),  {level:1, str: 'doThis'}\n\tutest.like 1229, mapper.get(),  {level:1, str: 'doThat'}\n\tutest.like 1230, mapper.get(),  {level:2, str: 'then this'}\n\tutest.like 1231, mapper.get(),  {level:0, str: 'while (x > 2)'}\n\tutest.like 1232, mapper.get(),  {level:1, str: '--x'}\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Test HEREDOC\n\n(() ->\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\treturn map(block, TreeMapper)\n\n\t# ..........................................................\n\n\ttreeTester = new MyTester()\n\n\ttreeTester.equal 1250, \"\"\"\n\t\t\tabc\n\t\t\tif x == <<<\n\t\t\t\tabc\n\t\t\t\tdef\n\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\tabc\n\t\t\tif x == \"abc\\\\ndef\"\n\t\t\tdef\n\t\t\t\"\"\"\n\n\ttreeTester.equal 1263, \"\"\"\n\t\t\tabc\n\t\t\tif x == <<<\n\t\t\t\t===\n\t\t\t\tabc\n\t\t\t\tdef\n\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\tabc\n\t\t\tif x == \"abc\\\\ndef\"\n\t\t\tdef\n\t\t\t\"\"\"\n\n\ttreeTester.equal 1277, \"\"\"\n\t\t\tabc\n\t\t\tif x == <<<\n\t\t\t\t...\n\t\t\t\tabc\n\t\t\t\tdef\n\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\tabc\n\t\t\tif x == \"abc def\"\n\t\t\tdef\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- A more complex example\n\nclass HtmlMapper extends TreeMapper\n\n\tgetUserObj: (hNode) ->\n\n\t\tdbgEnter \"HtmlMapper.getUserObj\", hNode\n\t\t{str, level} = hNode\n\t\tlMatches = str.match(///^\n\t\t\t\t(\\S+)     # the tag\n\t\t\t\t(?:\n\t\t\t\t\t\\s+    # some whitespace\n\t\t\t\t\t(.*)   # everything else\n\t\t\t\t\t)?     # optional\n\t\t\t\t$///)\n\t\tassert defined(lMatches), \"missing HTML tag: #{OL(str)}\"\n\t\t[_, tag, text] = lMatches\n\t\thResult = {\n\t\t\ttag\n\t\t\tlevel: @level\n\t\t\t}\n\t\tswitch tag\n\t\t\twhen 'body'\n\t\t\t\tassert isEmpty(text), \"body tag doesn't allow content\"\n\t\t\twhen 'p', 'div'\n\t\t\t\tif nonEmpty(text)\n\t\t\t\t\thResult.body = text\n\t\t\twhen 'div:markdown'\n\t\t\t\thResult.tag = 'div'\n\t\t\t\tbody = @fetchBlockAtLevel(level+1)\n\t\t\t\tdbg \"body\", body\n\t\t\t\tif nonEmpty(body)\n\t\t\t\t\tmd = markdownify(body)\n\t\t\t\t\tdbg \"md\", md\n\t\t\t\t\thResult.body = md\n\t\t\telse\n\t\t\t\tcroak \"Unknown tag: #{OL(tag)}\"\n\n\t\tdbgReturn \"HtmlMapper.getUserObj\", hResult\n\t\treturn hResult\n\n\t# .......................................................\n\n\tvisit: (hNode, hEnv, hParentEnv) ->\n\n\t\tdbgEnter 'HtmlMapper.visit', hNode\n\t\t{str, uobj, level} = hNode\n\t\tlParts = [indented(\"<#{uobj.tag}>\", level)]\n\t\tif nonEmpty(uobj.body)\n\t\t\tlParts.push indented(uobj.body, level+1)\n\t\tresult = toBlock(lParts)\n\t\tdbgReturn 'HtmlMapper.visit', result\n\t\treturn result\n\n\t# .......................................................\n\n\tendVisit: (hNode) ->\n\n\t\tdbgEnter 'HtmlMapper.endVisit', hNode\n\t\t{uobj, level} = hNode\n\t\tresult = indented(\"</#{uobj.tag}>\", level)\n\t\tdbgReturn 'HtmlMapper.endVisit', result\n\t\treturn result\n\n\t# .......................................................\n\n\tmapComment: (hNode) ->\n\n\t\tdbgEnter 'HtmlMapper.mapComment', hNode\n\n\t\t# --- NOTE: in Mapper.isComment(), the comment text\n\t\t#           is placed in hNode._commentText\n\n\t\t{level, _commentText} = hNode\n\t\tresult = \"<!-- #{_commentText} -->\"\n\t\tdbgReturn 'HtmlMapper.mapComment', result\n\t\treturn result\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\treturn map(block, HtmlMapper)\n\n\ttreeTester = new MyTester()\n\n\t# ----------------------------------------------------------\n\n\ttreeTester.equal 1386, \"\"\"\n\t\t\tbody\n\t\t\t\t# a comment\n\n\t\t\t\tdiv:markdown\n\t\t\t\t\tA title\n\t\t\t\t\t=======\n\n\t\t\t\t\tsome text\n\n\t\t\t\tdiv\n\t\t\t\t\tp more text\n\t\t\t\"\"\", \"\"\"\n\t\t\t<body>\n\t\t\t\t<!-- a comment -->\n\t\t\t\t<div>\n\t\t\t\t\t<h1>A title</h1>\n\t\t\t\t\t<p>some text</p>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tmore text\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</body>\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test #ifdef and #ifndef\n\n(() ->\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\treturn map(block, TreeMapper)\n\n\ttreeTester = new MyTester()\n\n\ttreeTester.equal 1428, \"\"\"\n\t\t\tabc\n\t\t\t#ifdef something\n\t\t\t\tdef\n\t\t\t\tghi\n\t\t\t#ifndef something\n\t\t\t\txyz\n\t\t\t\"\"\", \"\"\"\n\t\t\tabc\n\t\t\txyz\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test beginLevel() and endLevel()\n\n(() ->\n\n\tlTrace = []\n\n\tclass MyMapper extends TreeMapper\n\n\t\tbeginLevel: (hEnv, hNode) ->\n\t\t\tlTrace.push \"B #{hNode.level}\"\n\t\t\treturn\n\n\t\tendLevel: (hEnv, hNode) ->\n\t\t\tlTrace.push \"E #{hNode.level}\"\n\t\t\treturn\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\treturn map(block, MyMapper)\n\n\ttreeTester = new MyTester()\n\n\ttreeTester.equal 1467, \"\"\"\n\t\t\tabc\n\t\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\tabc\n\t\t\t\tdef\n\t\t\t\"\"\"\n\n\tutest.equal 1475, lTrace, [\n\t\t\"B 0\"\n\t\t\"B 1\"\n\t\t\"E 1\"\n\t\t\"E 0\"\n\t\t]\n\n\t)()\n\n# ---------------------------------------------------------------------------\n"
  ]
}
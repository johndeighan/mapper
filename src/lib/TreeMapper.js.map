{
  "version": 3,
  "file": "TreeMapper.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\TreeMapper.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# TreeMapper.coffee\r\n\r\nimport {\r\n\tundef, pass, defined, notdefined, OL, rtrim, words,\r\n\tisString, isNumber, isFunction, isArray, isHash, isInteger,\r\n\tisEmpty, nonEmpty, getOptions, toBlock, isArrayOfStrings,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {\r\n\tLOG, LOGVALUE, clearMyLogs, getMyLogs, echoMyLogs,\r\n\t} from '@jdeighan/base-utils/log'\r\nimport {\r\n\tdbg, dbgEnter, dbgReturn, clearDebugLog, getDebugLog,\r\n\t} from '@jdeighan/base-utils/debug'\r\nimport {toTAML} from '@jdeighan/base-utils/taml'\r\nimport {\r\n\tsplitLine, indentLevel, indented, undented, isUndented,\r\n\t} from '@jdeighan/base-utils/indent'\r\n\r\nimport {Mapper} from '@jdeighan/mapper'\r\nimport {replaceHereDocs} from '@jdeighan/mapper/heredoc'\r\nimport {RunTimeStack} from '@jdeighan/mapper/stack'\r\n\r\nthreeSpaces = \"   \"\r\n\r\n# ===========================================================================\r\n#   class TreeMapper\r\n#   to use, override:\r\n#      getUserObj(hNode) - returns user object\r\n#         default: returns hNode.str\r\n#      mapCmd(hNode)\r\n#\r\n#      beginLevel(hEnv, hNode)\r\n#      endLevel(hEnv, hNode)\r\n#\r\n#      visit(hNode, hEnv, hParentEnv)\r\n#      endVisit(hNode, hEnv, hParentEnv)\r\n#\r\n#      visitSpecial(hNode, hEnv, hParentEnv)\r\n#      endVisitSpecial(hNode, hEnv, hParentEnv)\r\n#   the call one of:\r\n#      .getBlock() - to get a block of text\r\n\r\nexport class TreeMapper extends Mapper\r\n\r\n\tconstructor: (hInput, hOptions={}) ->\r\n\r\n\t\tsuper hInput, hOptions\r\n\r\n\t\t@hSpecialVisitTypes = {}\r\n\r\n\t\t@registerVisitType 'empty',   @visitEmptyLine, @endVisitEmptyLine\r\n\t\t@registerVisitType 'comment', @visitComment,   @endVisitComment\r\n\t\t@registerVisitType 'cmd',     @visitCmd,       @endVisitCmd\r\n\r\n\t\t@lMinuses = []   # used to adjust level in #ifdef and #ifndef\r\n\r\n\t# ..........................................................\r\n\r\n\tregisterVisitType: (type, visitor, endVisitor) ->\r\n\r\n\t\tassert @isValidType(type), \"Unknown type: #{type}\"\r\n\t\t@hSpecialVisitTypes[type] = {\r\n\t\t\tvisitor\r\n\t\t\tendVisitor\r\n\t\t\t}\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- Will only receive non-special lines\r\n\t#        - adjust level if #ifdef or #ifndef was encountered\r\n\t#        - replace HEREDOCs\r\n\t#        - call getUserObj() - returns str by default\r\n\r\n\tmapToUserObj: (hNode) ->\r\n\r\n\t\tdbgEnter \"TreeMapper.mapToUserObj\", hNode\r\n\t\t@checkNonSpecial hNode\r\n\r\n\t\tif @adjustLevel(hNode)\r\n\t\t\tdbg \"hNode.level adjusted #{hNode.srcLevel} => #{hNode.level}\"\r\n\t\telse\r\n\t\t\tdbg \"no level adjustment\"\r\n\r\n\t\t{str, srcLevel} = hNode\r\n\t\tdbg \"check for HEREDOC\"\r\n\t\tif (str.indexOf('<<<') >= 0)\r\n\t\t\tnewStr = replaceHereDocs(str, this)\r\n\t\t\tdbg \"=> #{OL(newStr)}\"\r\n\t\t\tassert isUndented(newStr),\r\n\t\t\t\t\"after heredoc handling, str has indentation\"\r\n\t\t\thNode.str = newStr\r\n\t\telse\r\n\t\t\tdbg \"no HEREDOCs\"\r\n\r\n\t\t# --- NOTE: getUserObj() may return undef, meaning to ignore\r\n\t\t#     We must pass srcLevel since getUserObj() may use fetch()\r\n\t\tuobj = @getUserObj(hNode)\r\n\t\tdbgReturn \"TreeMapper.mapToUserObj\", uobj\r\n\t\treturn uobj\r\n\r\n\t# ..........................................................\r\n\r\n\tgetUserObj: (hNode) ->\r\n\r\n\t\treturn hNode.str\r\n\r\n\t# ..........................................................\r\n\r\n\tcheckNonSpecial: (hNode) ->\r\n\r\n\t\t{type, str, srcLevel, level} = hNode\r\n\t\tassert notdefined(hNode.type), \"hNode is #{OL(hNode)}\"\r\n\t\tassert nonEmpty(str), \"empty str in #{OL(hNode)}\"\r\n\t\tassert isUndented(str), \"str has indentation\"\r\n\t\tassert isInteger(srcLevel, {min: 0}), \"Bad srcLevel in #{OL(hNode)}\"\r\n\t\tassert isInteger(level, {min: 0}), \"Bad level in #{OL(hNode)}\"\r\n\t\tassert (level == srcLevel), \"levels not equal in #{OL(hNode)}\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tisEmptyHereDocLine: (str) ->\r\n\r\n\t\treturn (str == '.')\r\n\r\n\t# ..........................................................\r\n\t# --- We define commands 'ifdef' and 'ifndef'\r\n\r\n\tmapCmd: (hNode) ->\r\n\r\n\t\tdbgEnter \"TreeMapper.mapCmd\", hNode\r\n\r\n\t\t{type, uobj, prefix, srcLevel} = hNode\r\n\t\tassert (type == 'cmd'), 'not a command'\r\n\t\t{cmd, argstr} = uobj\r\n\t\tdbg \"srcLevel = #{srcLevel}\"\r\n\r\n\t\t# --- Handle our commands, returning if found\r\n\t\tswitch cmd\r\n\t\t\twhen 'ifdef', 'ifndef'\r\n\t\t\t\t[name, value, isEnv] = @splitDef(argstr)\r\n\t\t\t\tassert defined(name), \"Invalid #{cmd}, argstr=#{OL(argstr)}\"\r\n\t\t\t\tok = @isDefined(name, value, isEnv)\r\n\t\t\t\tdbg \"ok = #{OL(ok)}\"\r\n\t\t\t\tif (cmd == 'ifdef')\r\n\t\t\t\t\tkeep = ok\r\n\t\t\t\telse\r\n\t\t\t\t\tkeep = ! ok\r\n\t\t\t\tdbg \"keep = #{OL(keep)}\"\r\n\t\t\t\tif keep\r\n\t\t\t\t\tdbg \"add #{srcLevel} to lMinuses\"\r\n\t\t\t\t\t@lMinuses.push srcLevel\r\n\t\t\t\telse\r\n\t\t\t\t\tlSkipLines = @fetchLinesAtLevel(srcLevel+1)\r\n\t\t\t\t\tdbg \"Skip #{lSkipLines.length} lines\"\r\n\t\t\t\tdbgReturn \"TreeMapper.mapCmd\", undef\r\n\t\t\t\treturn undef\r\n\r\n\t\tdbg \"call super\"\r\n\t\tuobj = super(hNode)\r\n\t\tdbgReturn \"TreeMapper.mapCmd\", uobj\r\n\t\treturn uobj\r\n\r\n\t# ..........................................................\r\n\r\n\tadjustLevel: (hNode) ->\r\n\r\n\t\tdbgEnter \"adjustLevel\", hNode\r\n\r\n\t\tsrcLevel = hNode.srcLevel\r\n\t\tdbg \"srcLevel\", srcLevel\r\n\t\tassert isInteger(srcLevel, {min: 0}), \"level is #{OL(srcLevel)}\"\r\n\r\n\t\t# --- Calculate the needed adjustment and new level\r\n\t\tdbg \"lMinuses\", @lMinuses\r\n\t\tlNewMinuses = []\r\n\t\tadjust = 0\r\n\t\tfor i in @lMinuses\r\n\t\t\tif (srcLevel > i)\r\n\t\t\t\tadjust += 1\r\n\t\t\t\tlNewMinuses.push i\r\n\t\t@lMinuses = lNewMinuses\r\n\t\tdbg 'new lMinuses', @lMinuses\r\n\r\n\t\tif (adjust == 0)\r\n\t\t\tdbgReturn \"adjustLevel\", false\r\n\t\t\treturn false\r\n\r\n\t\tassert (srcLevel >= adjust), \"srcLevel=#{srcLevel}, adjust=#{adjust}\"\r\n\t\tnewLevel = srcLevel - adjust\r\n\r\n\t\t# --- Make adjustments to hNode\r\n\t\thNode.level = newLevel\r\n\r\n\t\tdbg \"level adjusted #{srcLevel} => #{newLevel}\"\r\n\t\tdbgReturn \"adjustLevel\", true\r\n\t\treturn true\r\n\r\n\t# ..........................................................\r\n\r\n\tsplitDef: (argstr) ->\r\n\r\n\t\tlMatches = argstr.match(///^\r\n\t\t\t\t(env \\.)?\r\n\t\t\t\t([A-Za-z_][A-Za-z0-9_]*)\r\n\t\t\t\t\\s*\r\n\t\t\t\t(.*)\r\n\t\t\t\t$///)\r\n\t\tif lMatches\r\n\t\t\t[_, env, name, value] = lMatches\r\n\t\t\tisEnv = if nonEmpty(env) then true else false\r\n\t\t\tif isEmpty(value)\r\n\t\t\t\tvalue = undef\r\n\t\t\treturn [name, value, isEnv]\r\n\t\telse\r\n\t\t\treturn [undef, undef, undef]\r\n\r\n\t# ..........................................................\r\n\t# ..........................................................\r\n\r\n\tisDefined: (name, value, isEnv) ->\r\n\r\n\t\tif isEnv\r\n\t\t\tif defined(value)\r\n\t\t\t\treturn (process.env[name] == value)\r\n\t\t\telse\r\n\t\t\t\treturn defined(process.env[name])\r\n\t\telse\r\n\t\t\tif defined(value)\r\n\t\t\t\treturn (@getConst(name) == value)\r\n\t\t\telse\r\n\t\t\t\treturn defined(@getConst(name))\r\n\t\treturn true\r\n\r\n\t# ..........................................................\r\n\r\n\twhichCmd: (uobj) ->\r\n\r\n\t\tif isHash(uobj) && uobj.hasOwnProperty('cmd')\r\n\t\t\treturn uobj.cmd\r\n\t\treturn undef\r\n\r\n\t# ..........................................................\r\n\t# ..........................................................\r\n\r\n\twalk: (hOptions={}) ->\r\n\t\t# --- returns an array, normally strings\r\n\t\t#     Valid options:\r\n\t\t#        logNodes\r\n\t\t#        logCalls\r\n\t\t#        logLines\r\n\t\t#        logHash\r\n\t\t#        logStack\r\n\t\t#        echo\r\n\r\n\t\tdbgEnter \"TreeMapper.walk\"\r\n\r\n\t\thOptions = getOptions(hOptions)\r\n\t\tif hOptions.echo\r\n\t\t\techoMyLogs()\r\n\t\t{logNodes,logCalls,logLines,logHash,logStack} = hOptions\r\n\t\tlDebugs = []\r\n\t\tfor key in Object.keys(hOptions)\r\n\t\t\tif hOptions[key]\r\n\t\t\t\tlDebugs.push key\r\n\t\tif nonEmpty(lDebugs)\r\n\t\t\tdbg \"DEBUG: #{lDebugs.join(',')}\"\r\n\r\n\t\t# --- hParent for level 0 nodes\r\n\t\thGlobalEnv = {\r\n\t\t\t_global_: true   # marker, for help debugging\r\n\t\t\t}\r\n\r\n\t\tlLines = []                   # --- resulting output\r\n\t\tstack = new RunTimeStack()    # --- a stack of Node objects\r\n\r\n\t\t# .......................................................\r\n\t\t#     Local Functions\r\n\t\t#     these MUST use fat-arrow syntax, to preserve 'this'\r\n\t\t# .......................................................\r\n\r\n\t\tlogstr = (block, level=undef) =>\r\n\r\n\t\t\tdbgEnter 'logstr', block, level\r\n\t\t\tif defined(level)\r\n\t\t\t\tresult = indented(block, level)\r\n\t\t\telse\r\n\t\t\t\tresult = block\r\n\t\t\tdbgReturn 'logstr', result\r\n\t\t\treturn result\r\n\r\n\t\t# .......................................................\r\n\r\n\t\tdoLogNode = (hNode) =>\r\n\r\n\t\t\tif logNodes\r\n\t\t\t\tLOG logstr(\"----- NODE -----\")\r\n\t\t\t\tLOG logstr(indented(toTAML(hNode)))\r\n\t\t\t\tLOG logstr(\"----------------\")\r\n\t\t\telse\r\n\t\t\t\t# --- This works when debugging is set to 'walk'\r\n\t\t\t\t#     because we don't have dbgEnter/dbgReturn in here\r\n\t\t\t\tdbg \"NODE: #{OL(hNode.level)} #{OL(hNode.uobj)}\"\r\n\t\t\treturn\r\n\r\n\t\t# .......................................................\r\n\r\n\t\tdoLogCall = (call, level) =>\r\n\r\n\t\t\tif ! logCalls\r\n\t\t\t\treturn\r\n\t\t\tif defined(level)\r\n\t\t\t\tstr = logstr(call, level)\r\n\t\t\telse\r\n\t\t\t\tstr = logstr(call)\r\n\t\t\tLOG str\r\n\t\t\treturn\r\n\r\n\t\t# .......................................................\r\n\r\n\t\tdoLogLines = (level) =>\r\n\r\n\t\t\tif ! logLines\r\n\t\t\t\treturn\r\n\t\t\tLOG logstr(\"----- LINES -----\", level)\r\n\t\t\tfor line in lLines\r\n\t\t\t\tLOG logstr(indented(line), level)\r\n\t\t\treturn\r\n\r\n\t\t# .......................................................\r\n\r\n\t\tdoLogHash = (h, level) =>\r\n\r\n\t\t\tif ! logHash\r\n\t\t\t\treturn\r\n\t\t\tif isEmpty(h)\r\n\t\t\t\tLOG logstr(\"----- EMPTY HASH -----\", level)\r\n\t\t\telse\r\n\t\t\t\tLOG logstr(\"----- HASH -----\", level)\r\n\t\t\t\tLOG logstr(toTAML(h), level)\r\n\t\t\tLOG logstr(\"----------------\", level)\r\n\t\t\treturn\r\n\r\n\t\t# .......................................................\r\n\r\n\t\tdoLogStack = (level) =>\r\n\r\n\t\t\tif ! logStack\r\n\t\t\t\treturn\r\n\t\t\tLOG logstr(\"----- STACK -----\", level)\r\n\t\t\tLOG logstr(stack.desc(), level)\r\n\t\t\tLOG logstr(\"-----------------\", level)\r\n\t\t\treturn\r\n\r\n\t\t# .......................................................\r\n\r\n\t\tadd = (item) =>\r\n\t\t\t# --- item can be any type of object\r\n\t\t\t#     returns true iff something was added\r\n\r\n\t\t\tdbgEnter \"add\", item\r\n\t\t\tif isString(item)\r\n\t\t\t\tdbg \"add item #{OL(item)}\"\r\n\t\t\t\tlLines.push item\r\n\t\t\t\tresult = true\r\n\t\t\telse if isArray(item)\r\n\t\t\t\tdbg \"item is an array\"\r\n\t\t\t\tresult = false\r\n\t\t\t\tfor subitem in item\r\n\t\t\t\t\tif add subitem\r\n\t\t\t\t\t\tresult = true\r\n\t\t\telse if notdefined(item)\r\n\t\t\t\tresult = false\r\n\t\t\telse\r\n\t\t\t\tcroak \"Bad item: #{OL(item)}\"\r\n\t\t\tdbgReturn \"add\", result\r\n\t\t\treturn result\r\n\r\n\t\t# .......................................................\r\n\r\n\t\tdoAddEnv = (hNode) =>\r\n\r\n\t\t\tif (hNode.level == 0)\r\n\t\t\t\thNode.hEnv = {\r\n\t\t\t\t\t_hParEnv: hGlobalEnv\r\n\t\t\t\t\t}\r\n\t\t\telse\r\n\t\t\t\thNode.hEnv = {\r\n\t\t\t\t\t_hParEnv: stack.TOS().hEnv\r\n\t\t\t\t\t}\r\n\t\t\t# --- This logs when debugging is set to 'walk'\r\n\t\t\t#     because we don't have dbgEnter/dbgReturn in here\r\n\t\t\tdbg \"ADD ENV: #{OL(hNode.hEnv)}\"\r\n\t\t\treturn\r\n\r\n\t\t# .......................................................\r\n\r\n\t\tdoBeginLevel = (hNode) =>\r\n\r\n\t\t\tdbgEnter 'doBeginLevel', level\r\n\t\t\t{level, hEnv} = hNode\r\n\t\t\tassert isHash(hEnv), \"node has no env\"\r\n\t\t\t_hParEnv = hEnv._hParEnv\r\n\t\t\tassert isHash(_hParEnv), \"node's env has no parent env\"\r\n\r\n\t\t\tdoLogCall \"BEGIN LEVEL #{level}\", level\r\n\t\t\tadded = add @beginLevel(_hParEnv, hNode)\r\n\t\t\tif added\r\n\t\t\t\tdoLogLines level\r\n\t\t\tdoLogHash hEnv, level\r\n\t\t\tdbgReturn 'doBeginLevel'\r\n\t\t\treturn\r\n\r\n\t\t# .......................................................\r\n\r\n\t\tdoEndLevel = (hNode) =>\r\n\r\n\t\t\tdbgEnter 'doEndLevel', level\r\n\t\t\t{level, hEnv} = hNode\r\n\t\t\tassert isHash(hEnv), \"node has no env\"\r\n\t\t\t_hParEnv = hEnv._hParEnv\r\n\t\t\tassert isHash(_hParEnv), \"node's env has no parent env\"\r\n\r\n\t\t\tdoLogCall \"END LEVEL #{level}\", level\r\n\t\t\tadded = add @endLevel(_hParEnv, hNode)\r\n\t\t\tif added\r\n\t\t\t\tdoLogLines level\r\n\t\t\tdoLogHash hEnv, level\r\n\t\t\tdbgReturn 'doEndLevel'\r\n\t\t\treturn\r\n\r\n\t\t# .......................................................\r\n\r\n\t\tdoVisitNode = (hNode) =>\r\n\r\n\t\t\tdbgEnter 'doVisitNode'\r\n\t\t\t{type, level, uobj, hEnv} = hNode\r\n\t\t\tassert isHash(hEnv), \"node has no env\"\r\n\t\t\t_hParEnv = hEnv._hParEnv\r\n\t\t\tassert isHash(_hParEnv), \"node's env has no parent env\"\r\n\t\t\tdoLogCall \"VISIT #{level} #{OL(uobj)}\", level\r\n\r\n\t\t\tif defined(type)\r\n\t\t\t\tadded = add @visitSpecial(hNode, hEnv, _hParEnv)\r\n\t\t\telse\r\n\t\t\t\tadded = add @visit(hNode, hEnv, _hParEnv)\r\n\t\t\tif added\r\n\t\t\t\tdoLogLines level\r\n\r\n\t\t\tdoLogHash hEnv, level\r\n\t\t\tdbgReturn 'doVisitNode'\r\n\t\t\treturn\r\n\r\n\t\t# .......................................................\r\n\r\n\t\tdoEndVisitNode = (hNode) =>\r\n\r\n\t\t\tdbgEnter 'doEndVisitNode'\r\n\t\t\t{type, level, uobj, hEnv} = hNode\r\n\t\t\tdoLogCall \"END VISIT #{level} #{OL(uobj)}\", level\r\n\r\n\t\t\tif defined(type)\r\n\t\t\t\tadded = add @endVisitSpecial(hNode, hEnv, hEnv._hParEnv)\r\n\t\t\telse\r\n\t\t\t\tadded = add @endVisit(hNode, hEnv, hEnv._hParEnv)\r\n\t\t\tif added\r\n\t\t\t\tdoLogLines level\r\n\r\n\t\t\tdoLogHash hEnv, level\r\n\t\t\tdbgReturn 'doEndVisitNode'\r\n\t\t\treturn\r\n\r\n\t\t# .......................................................\r\n\t\t#     main body of walk()\r\n\t\t# .......................................................\r\n\r\n\t\tdoLogCall \"BEGIN WALK\", 0\r\n\t\tadded = add @beginWalk(hGlobalEnv)\r\n\t\tif added\r\n\t\t\tdoLogLines 0\r\n\t\tdoLogHash hGlobalEnv, 0\r\n\r\n\t\t# === Begin First Node ===\r\n\r\n\t\thNode = @get()\r\n\r\n\t\tif notdefined(hNode)\r\n\t\t\tdbg \"first node is not defined\"\r\n\t\t\tdoLogCall \"END WALK\"\r\n\t\t\tadded = add @endWalk(hGlobalEnv)\r\n\t\t\tif added\r\n\t\t\t\tdoLogLines 0\r\n\t\t\tdoLogHash hGlobalEnv\r\n\t\t\tdbgReturn \"TreeMapper.walk\", lLines\r\n\t\t\treturn lLines\r\n\r\n\t\tassert (hNode.level == 0), \"1st node at level #{hNode.level}\"\r\n\t\tdoLogNode hNode\r\n\r\n\t\tdoAddEnv hNode\r\n\t\tdoBeginLevel hNode\r\n\t\tdoVisitNode hNode\r\n\r\n\t\tdbg \"push onto stack\", hNode\r\n\t\tstack.push hNode\r\n\t\tdoLogStack 0\r\n\r\n\t\t# --- From now on, there's always something on the stack\r\n\t\t#     Until the very end, where everything is popped off\r\n\r\n\t\t# === End First Node ===\r\n\r\n\t\twhile defined(hNode = @get())\r\n\t\t\tdoLogNode hNode\r\n\r\n\t\t\t# --- End any levels > hNode.level\r\n\t\t\twhile (stack.TOS().level > hNode.level)\r\n\t\t\t\thPopNode = stack.pop()\r\n\t\t\t\tdbg \"POP: [#{OL(hPopNode.level)} #{OL(hPopNode.uobj)}]\"\r\n\t\t\t\tdoEndVisitNode hPopNode\r\n\t\t\t\tdoEndLevel hPopNode\r\n\r\n\t\t\t# --- Now, there are 2 cases:\r\n\t\t\t#        1. TOS level = current node's level\r\n\t\t\t#        2. TOS level < current node's level\r\n\r\n\t\t\tif (stack.TOS().level == hNode.level)\r\n\t\t\t\thPopNode = stack.pop()\r\n\t\t\t\tdbg \"POP: [#{OL(hPopNode.level)} #{OL(hPopNode.uobj)}]\"\r\n\t\t\t\tdoEndVisitNode hPopNode\r\n\t\t\t\tnewLevel = false\r\n\t\t\telse\r\n\t\t\t\tnewLevel = true\r\n\t\t\t\tassert (stack.TOS().level < hNode.level), \"Can't happen\"\r\n\r\n\t\t\tdoAddEnv hNode\r\n\t\t\tif newLevel\r\n\t\t\t\tdoBeginLevel hNode\r\n\t\t\tdoVisitNode hNode\r\n\t\t\tdbg \"push onto stack\", hNode\r\n\t\t\tstack.push hNode\r\n\r\n\t\twhile (stack.size() > 0)\r\n\t\t\thNode = stack.pop()\r\n\t\t\tdbg \"pop node\", hNode\r\n\t\t\tdoEndVisitNode hNode\r\n\t\t\tdoEndLevel(hNode)\r\n\r\n\t\tdoLogCall \"END WALK\"\r\n\t\tadded = add @endWalk hGlobalEnv\r\n\t\tif added\r\n\t\t\tdoLogLines 0\r\n\t\tdoLogHash hGlobalEnv\r\n\r\n\t\tdbgReturn \"TreeMapper.walk\", lLines\r\n\t\treturn lLines\r\n\r\n\t# ..........................................................\r\n\t# These are designed to override\r\n\t# ..........................................................\r\n\r\n\tbeginWalk: (hGlobalEnv) ->\r\n\r\n\t\treturn undef\r\n\r\n\t# ..........................................................\r\n\r\n\tbeginLevel: (hEnv, hNode) ->\r\n\r\n\t\treturn undef\r\n\r\n\t# ..........................................................\r\n\r\n\tstartLevel: (hEnv, level) ->\r\n\r\n\t\tcroak \"There is no startLevel() method - use beginLevel()\"\r\n\r\n\t# ..........................................................\r\n\r\n\tendLevel: (hEnv, hNode) ->\r\n\r\n\t\treturn undef\r\n\r\n\t# ..........................................................\r\n\r\n\tendWalk: (hEnv) ->\r\n\r\n\t\treturn undef\r\n\r\n\t# ..........................................................\r\n\r\n\tvisit: (hNode, hEnv, hParentEnv) ->\r\n\r\n\t\tdbgEnter \"TreeMapper.visit\", hNode\r\n\t\t{uobj, level} = hNode\r\n\t\tif isString(uobj) && (level > 0)\r\n\t\t\tuobj = indented(uobj, level, @oneIndent)\r\n\t\tdbgReturn \"TreeMapper.visit\", uobj\r\n\t\treturn uobj\r\n\r\n\t# ..........................................................\r\n\r\n\tendVisit:  (hNode, hEnv, hParentEnv) ->\r\n\r\n\t\tdbgEnter \"TreeMapper.endVisit\", hNode\r\n\t\tdbgReturn \"TreeMapper.endVisit\", undef\r\n\t\treturn undef\r\n\r\n\t# ..........................................................\r\n\r\n\tvisitEmptyLine: (hNode, hEnv, hParentEnv) ->\r\n\r\n\t\tdbg \"in TreeMapper.visitEmptyLine()\"\r\n\t\treturn ''\r\n\r\n\t# ..........................................................\r\n\r\n\tendVisitEmptyLine: (hNode, hEnv, hParentEnv) ->\r\n\r\n\t\tdbg \"in TreeMapper.endVisitEmptyLine()\"\r\n\t\treturn undef\r\n\r\n\t# ..........................................................\r\n\r\n\tvisitComment: (hNode, hEnv, hParentEnv) ->\r\n\r\n\t\tdbgEnter \"TreeMapper.visitComment\", hNode\r\n\r\n\t\t# --- NOTE: in Mapper.isComment(), the comment text\r\n\t\t#           is placed in hNode._commentText\r\n\r\n\t\t{uobj, level, _commentText} = hNode\r\n\t\tassert isString(uobj), \"uobj not a string\"\r\n\t\tresult = indented(uobj, level, @oneIndent)\r\n\t\thEnv.commentText = _commentText\r\n\t\tdbgReturn \"TreeMapper.visitComment\", result\r\n\t\treturn result\r\n\r\n\t# ..........................................................\r\n\r\n\tendVisitComment: (hNode, hEnv, hParentEnv) ->\r\n\r\n\t\tdbg \"in TreeMapper.endVisitComment()\"\r\n\t\treturn undef\r\n\r\n\t# ..........................................................\r\n\r\n\tvisitCmd: (hNode, hEnv, hParentEnv) ->\r\n\r\n\t\tdbg \"in TreeMapper.visitCmd() - ERROR\"\r\n\t\t{uobj} = hNode\r\n\t\t{cmd, argstr, level} = hNode.uobj\r\n\r\n\t\t# --- NOTE: built in commands, e.g. #ifdef\r\n\t\t#           are handled during the mapping phase\r\n\t\tcroak \"Unknown cmd: '#{cmd} #{argstr}'\"\r\n\r\n\t# ..........................................................\r\n\r\n\tendVisitCmd: (hNode, hEnv, hParentEnv) ->\r\n\r\n\t\tdbg \"in TreeMapper.endVisitCmd()\"\r\n\t\treturn undef\r\n\r\n\t# ..........................................................\r\n\r\n\tvisitSpecial: (hNode, hEnv, hParentEnv) ->\r\n\r\n\t\tdbgEnter \"TreeMapper.visitSpecial\", hNode\r\n\t\t{type} = hNode\r\n\t\tvisitor = @hSpecialVisitTypes[type].visitor\r\n\t\tassert defined(visitor), \"No such type: #{OL(type)}\"\r\n\t\tfunc = visitor.bind(this)\r\n\t\tassert isFunction(func), \"not a function\"\r\n\t\tresult = func(hNode, hEnv, hParentEnv)\r\n\t\tdbgReturn \"TreeMapper.visitSpecial\", result\r\n\t\treturn result\r\n\r\n\t# ..........................................................\r\n\r\n\tendVisitSpecial: (hNode, hEnv, hParentEnv) ->\r\n\r\n\t\tdbgEnter \"TreeMapper.endVisitSpecial\", hNode\r\n\t\t{type} = hNode\r\n\t\tendVisitor = @hSpecialVisitTypes[type].endVisitor\r\n\t\tassert defined(endVisitor), \"No such type: #{OL(type)}\"\r\n\t\tfunc = endVisitor.bind(this)\r\n\t\tresult = func(hNode, hEnv, hParentEnv)\r\n\t\tdbgReturn \"TreeMapper.endVisitSpecial\", result\r\n\t\treturn result\r\n\r\n\t# ..........................................................\r\n\r\n\tgetBlock: (hOptions=undef) ->\r\n\r\n\t\tdbgEnter \"getBlock\"\r\n\t\tlLines = @walk(hOptions)\r\n\t\tdbg 'lLines', lLines\r\n\t\tblock = toBlock(lLines)\r\n\t\tdbg 'block', block\r\n\t\tresult = @finalizeBlock(block)\r\n\t\tdbgReturn \"getBlock\", result\r\n\t\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n# UTILITIES\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getTrace = (hInput, hOptions='logCalls') ->\r\n\r\n\tdbgEnter \"getTrace\", hInput\r\n\tmapper = new TreeMapper(hInput)\r\n\tclearMyLogs()\r\n\tmapper.walk(hOptions)\r\n\tresult = getMyLogs()\r\n\tdbgReturn \"getTrace\", result\r\n\treturn result\r\n"
  ]
}
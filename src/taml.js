// Generated by CoffeeScript 2.7.0
// taml.coffee
import yaml from 'js-yaml';

import {
  assert,
  error,
  croak
} from '@jdeighan/unit-tester/utils';

import {
  undef,
  defined,
  notdefined,
  OL,
  isString
} from '@jdeighan/coffee-utils';

import {
  untabify,
  tabify,
  splitLine
} from '@jdeighan/coffee-utils/indent';

import {
  LOG,
  log,
  tamlStringify
} from '@jdeighan/coffee-utils/log';

import {
  slurp,
  forEachLineInFile
} from '@jdeighan/coffee-utils/fs';

import {
  debug
} from '@jdeighan/coffee-utils/debug';

import {
  firstLine,
  blockToArray
} from '@jdeighan/coffee-utils/block';

import {
  Mapper,
  doMap
} from '@jdeighan/mapper';

// ---------------------------------------------------------------------------
//   isTAML - is the string valid TAML?
export var isTAML = function(text) {
  return isString(text) && (firstLine(text).indexOf('---') === 0);
};

// ---------------------------------------------------------------------------
//   taml - convert valid TAML string to a JavaScript value
export var taml = function(text, hOptions = {}) {
  var premapper, result;
  // --- Valid options:
  //        premapper - a subclass of Mapper
  debug(`enter taml(${OL(text)})`);
  if (text == null) {
    debug("return undef from taml() - text is not defined");
    return undef;
  }
  // --- If a premapper is provided, use it to map the text
  if (defined(hOptions.premapper)) {
    premapper = hOptions.premapper;
    // --- THIS FAILS and I don't know why???
    //		assert (premapper instanceof Mapper),
    //				"not a Mapper subclass: #{OL(premapper)}"
    assert(hOptions.source, "taml(): premapper without source");
    text = doMap(premapper, hOptions.source, text);
  }
  assert(isTAML(text), `taml(): string ${OL(text)} isn't TAML`);
  result = yaml.load(untabify(text), {
    skipInvalid: true
  });
  debug("return from taml()", result);
  return result;
};

// ---------------------------------------------------------------------------
//   slurpTAML - read TAML from a file
export var slurpTAML = function(filepath, hOptions = undef) {
  var text;
  text = slurp(filepath);
  return taml(text, hOptions);
};

{
  "version": 3,
  "file": "coffee.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\coffee.test.coffee"
  ],
  "names": [],
  "mappings": ";AAAoB;AAEpB,OAAA;EAAQ,KAAR;EAAe,OAAf;EAAwB,QAAxB;CAAA,MAAA;;AACA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA;;AACA,OAAA;EAAQ,GAAR;EAAa,QAAb;CAAA,MAAA;;AACA,OAAA;EAAQ,YAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,UAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,UAAR;CAAA,MAAA;;AAEA,OAAA;EAAQ,GAAR;CAAA,MAAA;;AACA,OAAA;EACC,kBADD;EAEC,cAFD;EAEiB,cAFjB;EAEiC,OAFjC;EAE0C,QAF1C;CAAA,MAAA,0BAVoB;;;;;;;AAqBpB,CAAC,QAAA,CAAA,CAAA;AACD,MAAA,gBAAA,EAAA;EAAO,mBAAN,MAAA,iBAAA,QAA+B,WAA/B;IAEC,cAAgB,CAAC,IAAD,CAAA;AACf,aAAO,GAAA,CAAI,IAAJ,EAAU,kBAAV;IADQ;;EAFjB;EAKA,aAAA,GAAgB,IAAI,gBAAJ,CAAA,EALjB;;EASC,aAAa,CAAC,KAAd,CAAoB,CAAA;;KAAA,CAApB,EAIO,CAAA;KAAA,CAJP;EASA,aAAa,CAAC,KAAd,CAAoB,CAAA,aAAA,CAApB,EAEO,CAAA,oBAAA,CAFP;SAMA,aAAa,CAAC,KAAd,CAAoB,CAAA;gCAAA,CAApB,EAGO,CAAA;8CAAA,CAHP;AAzBA,CAAD,CAAA,CAAA,EArBoB;;;AA0DpB,CAAC,QAAA,CAAA,CAAA;AACD,MAAA,YAAA,EAAA;EAAO,eAAN,MAAA,aAAA,QAA2B,WAA3B;IAEC,cAAgB,CAAC,IAAD,CAAA;AACf,aAAO,cAAA,CAAe,IAAf;IADQ;;EAFjB;EAKA,aAAA,GAAgB,IAAI,YAAJ,CAAA,EALjB;;EASC,aAAa,CAAC,KAAd,CAAoB,CAAA;;KAAA,CAApB,EAIO,CAAA;;MAAA,CAJP;SAUA,aAAa,CAAC,KAAd,CAAoB,CAAA;;;;gCAAA,CAApB,EAMO,CAAA;;;;2BAAA,CANP;AApBA,CAAD,CAAA,CAAA;;AA1DoB",
  "sourcesContent": [
    "# coffee.test.coffee\n\nimport {undef, isEmpty, nonEmpty} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport {UnitTester} from '@jdeighan/base-utils/utest'\nimport {joinBlocks} from '@jdeighan/coffee-utils/block'\n\nimport {map} from '@jdeighan/mapper'\nimport {\n\tCoffeePreProcessor,\n\tcoffeeExprToJS, coffeeCodeToJS, cleanJS, minifyJS,\n\t} from '@jdeighan/mapper/coffee'\n\n# ---------------------------------------------------------------------------\n# --- Test the CoffeePreProcessor\n#        1. retain comments\n#        2. remove blank lines\n#        3. replace $<ident> with #{OL(<ident>)}\n\n(() ->\n\tclass PreProcessTester extends UnitTester\n\n\t\ttransformValue: (code) ->\n\t\t\treturn map(code, CoffeePreProcessor)\n\n\tpreprocTester = new PreProcessTester()\n\n\t# ------------------------------------------------------------------------\n\n\tpreprocTester.equal \"\"\"\n\t\t\t# --- a comment\n\n\t\t\ty = x\n\t\t\t\"\"\", \"\"\"\n\t\t\t# --- a comment\n\t\t\ty = x\n\t\t\t\"\"\"\n\n\tpreprocTester.equal \"\"\"\n\t\t\tLOG \"x is $x\"\n\t\t\t\"\"\", \"\"\"\n\t\t\tLOG \"x is \\#{OL(x)}\"\n\t\t\t\"\"\"\n\n\tpreprocTester.equal \"\"\"\n\t\t\tx = 3\n\t\t\tdebug \"word is $word, not $this\"\n\t\t\t\"\"\", \"\"\"\n\t\t\tx = 3\n\t\t\tdebug \"word is \\#{OL(word)}, not \\#{OL(this)}\"\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tclass CoffeeTester extends UnitTester\n\n\t\ttransformValue: (code) ->\n\t\t\treturn coffeeCodeToJS(code)\n\n\tpreprocTester = new CoffeeTester()\n\n\t# ------------------------------------------------------------------------\n\n\tpreprocTester.equal \"\"\"\n\t\t\t# --- a comment\n\n\t\t\ty = x\n\t\t\t\"\"\", \"\"\"\n\t\t\t// --- a comment\n\t\t\tvar y;\n\t\t\ty = x;\n\t\t\t\"\"\"\n\n\tpreprocTester.equal \"\"\"\n\t\t\t# --- a comment\n\n\t\t\tx = 3\n\t\t\tcallme 'a', 3, [1,2,3]\n\t\t\ty = if x==3 then 'OK' else 'Bad'\n\t\t\t\"\"\", \"\"\"\n\t\t\t// --- a comment\n\t\t\tvar x, y;\n\t\t\tx = 3;\n\t\t\tcallme('a', 3, [1, 2, 3]);\n\t\t\ty = x === 3 ? 'OK' : 'Bad';\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n"
  ]
}
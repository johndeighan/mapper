// Generated by CoffeeScript 2.7.0
  // Getter.coffee
import {
  assert,
  error,
  croak
} from '@jdeighan/unit-tester/utils';

import {
  undef,
  pass,
  OL,
  rtrim,
  defined,
  notdefined,
  escapeStr,
  isString,
  isHash,
  isArray,
  isFunction,
  isIterable,
  isEmpty,
  nonEmpty
} from '@jdeighan/coffee-utils';

import {
  indented
} from '@jdeighan/coffee-utils/indent';

import {
  arrayToBlock,
  blockToArray
} from '@jdeighan/coffee-utils/block';

import {
  LOG,
  DEBUG
} from '@jdeighan/coffee-utils/log';

import {
  debug
} from '@jdeighan/coffee-utils/debug';

import {
  Node
} from '@jdeighan/mapper/node';

import {
  Fetcher
} from '@jdeighan/mapper/fetcher';

// ---------------------------------------------------------------------------
//   class Getter
//      - get(), peek(), eof(), skip() for mapped data
export var Getter = class Getter extends Fetcher {
  constructor(source = undef, collection = undef) {
    super(source, collection);
    this.hConsts = {}; // support variable replacement
  }

  
    // ..........................................................
  setConst(name, value) {
    assert((name === 'LINE') || (this.hConsts[name] === undef), `cannot set constant ${name} twice`);
    this.hConsts[name] = value;
  }

  // ..........................................................
  getConst(name) {
    return this.hConsts[name];
  }

  // ..........................................................
  //        Mapped Data
  // ..........................................................
  get() {
    var hNode, uobj;
    debug("enter Getter.get()");
    while (defined(hNode = this.fetch())) {
      debug("GOT", hNode);
      assert(hNode instanceof Node, `hNode is ${OL(hNode)}`);
      if (hNode.isMapped()) {
        // --- This can happen when the node was previously unfetched
        debug("return from Getter.get() - already mapped", hNode);
        return hNode;
      }
      uobj = this.mapAnyNode(hNode);
      if (defined(uobj)) {
        hNode.uobj = uobj;
        debug("return from Getter.get() - newly mapped", hNode);
        return hNode;
      }
    }
    debug("return from Getter.get() - EOF", undef);
    return undef;
  }

  // ..........................................................
  skip() {
    debug('enter Getter.skip():');
    this.get();
    debug('return from Getter.skip()');
  }

  // ..........................................................
  peek() {
    var hNode;
    debug('enter Getter.peek()');
    hNode = this.get();
    if (hNode === undef) {
      debug("return from Getter.peek()", undef);
      return undef;
    } else {
      this.unfetch(hNode);
      debug("return from Getter.peek()", hNode);
      return hNode;
    }
  }

  // ..........................................................
  eof() {
    var result;
    debug("enter Getter.eof()");
    result = this.peek() === undef;
    debug("return from Getter.eof()", result);
    return result;
  }

  // ..........................................................
  // --- return of undef doesn't mean EOF, it means skip this item
  //     sets key 'uobj' to a defined value if not returning undef
  //     sets key 'type' if a special type
  mapAnyNode(hNode) {
    var level, newstr, str, type, uobj;
    debug("enter Getter.mapAnyNode()", hNode);
    assert(defined(hNode), "hNode is undef");
    type = this.getItemType(hNode);
    if (defined(type)) {
      debug(`item type is ${OL(type)}`);
      assert(isString(type) && nonEmpty(type), `bad type: ${OL(type)}`);
      hNode.type = type;
      uobj = this.mapSpecial(type, hNode);
      debug(`mapped ${type}`, uobj);
    } else {
      debug("no special type");
      ({str, level} = hNode);
      assert(defined(str), "str is undef");
      assert(str !== '__END__', "__END__ encountered");
      newstr = this.replaceConsts(str, this.hConsts);
      if (newstr !== str) {
        debug(`${OL(str)} => ${OL(newstr)}`);
        hNode.str = newstr;
      }
      uobj = this.mapNonSpecial(hNode);
      debug("mapped non-special", uobj);
    }
    debug("return from Getter.mapAnyNode()", uobj);
    return uobj;
  }

  // ..........................................................
  mapSpecial(type, hNode) {
    // --- default - ignore any special item types
    //     - but by default, there aren't any!
    return undef;
  }

  // ..........................................................
  mapNonSpecial(hNode) {
    // --- TreeWalker overrides this
    return this.mapNode(hNode);
  }

  // ..........................................................
  // --- designed to override
  //     only non-special nodes
  mapNode(hNode) {
    var level, str;
    // --- by default, just returns str key indented
    ({str, level} = hNode);
    return indented(str, level, this.oneIndent);
  }

  // ..........................................................
  replaceConsts(str, hVars = {}) {
    var replacerFunc;
    assert(isHash(hVars), "hVars is not a hash");
    replacerFunc = (match, prefix, name) => {
      var value;
      if (prefix) {
        return process.env[name];
      } else {
        value = hVars[name];
        if (defined(value)) {
          if (isString(value)) {
            return value;
          } else {
            return JSON.stringify(value);
          }
        } else {
          return `__${name}__`;
        }
      }
    };
    return str.replace(/__(env\.)?([A-Za-z_][A-Za-z0-9_]*)__/g, replacerFunc);
  }

  // ..........................................................
  getItemType(hNode) {
    // --- returns name of item type
    debug("in Getter.getItemType()");
    return undef; // default: no special item types
  }

  
    // ..........................................................
  // --- GENERATOR
  * allMapped() {
    var hNode;
    debug("enter Getter.allMapped()");
    // --- NOTE: @get will skip items that are mapped to undef
    //           and only returns undef when the input is exhausted
    while (defined(hNode = this.get())) {
      debug("GOT", hNode);
      yield hNode;
    }
    debug("return from Getter.allMapped()");
  }

  // ..........................................................
  // --- GENERATOR
  * allMappedUntil(func, hOptions = undef) {
    var discardEndLine, hNode;
    debug("enter Getter.allMappedUntil()");
    assert(isFunction(func), "Arg 1 not a function");
    if (defined(hOptions)) {
      discardEndLine = hOptions.discardEndLine;
    } else {
      discardEndLine = true;
    }
    // --- NOTE: @get will skip items that are mapped to undef
    //           and only returns undef when the input is exhausted
    while (defined(hNode = this.get()) && !func(hNode)) {
      debug("GOT", hNode);
      yield hNode;
    }
    if (defined(hNode) && !discardEndLine) {
      this.unfetch(hNode);
    }
    debug("return from Getter.allMappedUntil()");
  }

  // ..........................................................
  getAll() {
    var lNodes;
    debug("enter Getter.getAll()");
    lNodes = Array.from(this.allMapped());
    debug("return from Getter.getAll()", lNodes);
    return lNodes;
  }

  // ..........................................................
  getUntil(func, hOptions = undef) {
    var lNodes;
    debug("enter Getter.getUntil()");
    lNodes = Array.from(this.allMappedUntil(func, hOptions));
    debug("return from Getter.getUntil()", lNodes);
    return lNodes;
  }

  // ..........................................................
  // --- Rarely used - requires that uobj's are strings
  //     TreeWalker overrides this, and is more commonly used
  getBlock(hOptions = {}) {
    var block, endStr, hNode, i, lStrings, ref, result;
    // --- Valid options: logNodes
    debug("enter Getter.getBlock()");
    lStrings = [];
    i = 0;
    ref = this.allMapped();
    for (hNode of ref) {
      if (hOptions.logNodes) {
        LOG(`hNode[${i}]`, hNode);
      } else {
        debug(`hNode[${i}]`, hNode);
      }
      i += 1;
      // --- default visit() & visitSpecial() return uobj
      if (hNode.type === undef) {
        result = this.visit(hNode);
      } else {
        result = this.visitSpecial(hNode.type, hNode);
      }
      if (defined(result)) {
        assert(isString(result), "not a string");
        lStrings.push(result);
      }
    }
    debug('lStrings', lStrings);
    if (defined(endStr = this.endBlock())) {
      debug('endStr', endStr);
      lStrings.push(endStr);
    }
    if (hOptions.logNodes) {
      LOG('logNodes', lStrings);
    }
    block = this.finalizeBlock(arrayToBlock(lStrings));
    debug("return from Getter.getBlock()", block);
    return block;
  }

  // ..........................................................
  visit(hNode) {
    var uobj;
    debug("enter Getter.visit()", hNode);
    ({uobj} = hNode);
    if (isString(uobj)) {
      debug("return from Getter.visit()", uobj);
      return uobj;
    } else if (defined(uobj)) {
      return croak(`uobj ${OL(uobj)} should be a string`);
    } else {
      debug("return undef from Getter.visit()");
      return undef;
    }
  }

  // ..........................................................
  visitSpecial(type, hNode) {
    var uobj;
    debug("enter Getter.visitSpecial()", type, hNode);
    ({uobj} = hNode);
    if (isString(uobj)) {
      debug("return from Getter.visitSpecial()", uobj);
      return uobj;
    } else if (defined(uobj)) {
      return croak(`uobj ${OL(uobj)} should be a string`);
    } else {
      debug("return undef from Getter.visitSpecial()");
      return undef;
    }
  }

  // ..........................................................
  endBlock() {
    // --- currently, only used in markdown processing
    return undef;
  }

  // ..........................................................
  finalizeBlock(block) {
    return block;
  }

};

{
  "version": 3,
  "file": "Mapper.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\Mapper.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Mapper.test.coffee\n\nimport {\n\tundef, defined, notdefined, rtrim, toBlock,\n\t} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\nimport {\n\tdbg, dbgEnter, dbgReturn, setDebugging,\n\t} from '@jdeighan/base-utils/debug'\nimport {UnitTester, utest} from '@jdeighan/unit-tester'\nimport {indented} from '@jdeighan/coffee-utils/indent'\n\nimport {Mapper, map} from '@jdeighan/mapper'\n\n# ---------------------------------------------------------------------------\n# --- Special lines\n\n(() ->\n\tmapper = new Mapper(\"\"\"\n\t\tline1\n\t\t# a comment\n\t\tline2\n\n\t\tline3\n\t\t\"\"\")\n\tutest.like 27, mapper.get(), {\n\t\tstr: 'line1'\n\t\tlevel: 0\n\t\tsource: \"<unknown>/1\"\n\t\t}\n\tutest.like 32, mapper.get(), {\n\t\tstr: 'line2'\n\t\tlevel: 0\n\t\tsource: \"<unknown>/3\"\n\t\t}\n\tutest.like 37, mapper.get(), {\n\t\tstr: 'line3'\n\t\tlevel: 0\n\t\tsource: \"<unknown>/5\"\n\t\t}\n\tutest.equal 42, mapper.get(), undef\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Test allNodes()\n\n(() ->\n\n\tmapper = new Mapper(\"\"\"\n\t\t\tabc\n\t\t\tdef\n\t\t\tghi\n\t\t\t\"\"\")\n\n\tlStrings = []\n\n\t# --- By default, the end line is kept\n\tfor item from mapper.allNodes()\n\t\tlStrings.push item.str\n\n\tutest.equal 66, lStrings, ['abc','def','ghi']\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\tmapper = new Mapper(\"\"\"\n\t\t\tabc\n\t\t\tdef\n\t\t\tghi\n\t\t\t\"\"\")\n\n\tlStrings = []\n\n\tfor item from mapper.allNodes()\n\t\tlStrings.push item.str\n\n\tutest.equal 89, lStrings, ['abc','def','ghi']\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (hInput) ->\n\n\t\t\tmapper = new Mapper(hInput)\n\n\t\t\tblock = mapper.getBlock()\n\t\t\treturn block\n\n\ttester = new MyTester()\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 110, \"\"\"\n\t\tabc\n\n\t\tdef\n\t\t# --- a comment\n\t\t\"\"\", \"\"\"\n\t\tabc\n\t\tdef\n\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- to prevent mapping, you must use fetch()\n\n(() ->\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (hInput) ->\n\n\t\t\tmapper = new Mapper(hInput)\n\t\t\tlLines = []\n\t\t\twhile defined(hNode = mapper.fetch())\n\t\t\t\tif (hNode.str == 'stop')\n\t\t\t\t\tbreak\n\t\t\t\tlLines.push hNode.str\n\n\t\t\treturn toBlock(lLines)\n\n\ttester = new MyTester()\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 145, \"\"\"\n\t\tabc\n\n\t\tdef\n\t\t# --- a comment\n\t\tstop\n\t\tghi\n\t\t\"\"\", \"\"\"\n\t\tabc\n\n\t\tdef\n\t\t# --- a comment\n\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\t# --- A generator is a function that, when you call it,\n\t#     it returns an iterator\n\n\tgenerator = () ->\n\t\tyield 'line1'\n\t\tyield 'line2'\n\t\tyield 'line3'\n\t\treturn\n\n\t# --- You can pass any iterator to the Mapper() constructor\n\tmapper = new Mapper(generator())\n\n\tutest.like  177, mapper.fetch(), {str: 'line1'}\n\tutest.like  178, mapper.fetch(), {str: 'line2'}\n\tutest.like  179, mapper.fetch(), {str: 'line3'}\n\tutest.equal 180, mapper.fetch(), undef\n\t)()\n\n# ---------------------------------------------------------------------------\n# File title.md contains:\n# title\n# =====\n# ---------------------------------------------------------------------------\n# --- Test #include\n\n(() ->\n\n\tnumLines = undef\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\tmapper = new Mapper(block)\n\t\t\tblock = mapper.getBlock()\n\t\t\tnumLines = mapper.lineNum   # set variable numLines\n\t\t\treturn block\n\n\t# ..........................................................\n\n\tmyTester = new MyTester()\n\n\tmyTester.equal 207, \"\"\"\n\t\t\tabc\n\t\t\t\t#include title.md\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\tabc\n\t\t\t\ttitle\n\t\t\t\t=====\n\t\t\tdef\n\t\t\t\"\"\"\n\n\tutest.equal 218, numLines, 3\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\tmapper = new Mapper(\"\"\"\n\t\t\tabc\n\t\t\t\t#include title.md\n\t\t\tdef\n\t\t\t\"\"\")\n\n\tutest.equal 231, mapper.getBlock(), \"\"\"\n\t\t\tabc\n\t\t\t\ttitle\n\t\t\t\t=====\n\t\t\tdef\n\t\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Test __END__\n\n(() ->\n\n\tnumLines = undef\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\tmapper = new Mapper(block)\n\t\t\tblock = mapper.getBlock()\n\t\t\tnumLines = mapper.lineNum   # set variable numLines\n\t\t\treturn block\n\n\t# ..........................................................\n\n\tmyTester = new MyTester()\n\n\tmyTester.equal 259, \"\"\"\n\t\t\tabc\n\t\t\tdef\n\t\t\t__END__\n\t\t\tghi\n\t\t\tjkl\n\t\t\t\"\"\", \"\"\"\n\t\t\tabc\n\t\t\tdef\n\t\t\t\"\"\"\n\n\tutest.equal 270, numLines, 2\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Test #include with __END__\n\n(() ->\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\tmapper = new Mapper(block)\n\t\t\tblock = mapper.getBlock()\n\t\t\treturn block\n\n\t# ..........................................................\n\n\tmyTester = new MyTester()\n\n\tmyTester.equal 290, \"\"\"\n\t\t\tabc\n\t\t\t\t#include ended.md\n\t\t\tdef\n\t\t\t\"\"\", \"\"\"\n\t\t\tabc\n\t\t\t\tghi\n\t\t\tdef\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Test #define\n\n(() ->\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\tmapper = new Mapper(block)\n\t\t\tblock = mapper.getBlock()\n\t\t\treturn block\n\n\t# ..........................................................\n\n\tmyTester = new MyTester()\n\n\tmyTester.equal 319, \"\"\"\n\t\t\tabc\n\t\t\t#define meaning 42\n\t\t\tmeaning is __meaning__\n\t\t\t\"\"\", \"\"\"\n\t\t\tabc\n\t\t\tmeaning is 42\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Test map()\n\n(() ->\n\n\t# --- Usually:\n\t#        1. empty lines are removed\n\t#        2. '#' style comments are recognized and removed\n\t#        3. Only the #define command is interpreted\n\n\tresult = map(\"\"\"\n\t\t\t# - test.txt\n\n\t\t\tabc\n\t\t\t#define meaning 42\n\t\t\tThe meaning of life is __meaning__\n\t\t\t\"\"\")\n\n\tutest.equal 348, result, \"\"\"\n\t\t\tabc\n\t\t\tThe meaning of life is 42\n\t\t\t\"\"\"\n\n\t# --- Now, create a subclass that:\n\t#        1. recognizes '//' style comments and removes them\n\t#        2. implements a '#for <args>' cmd that outputs '{#for <args>}'\n\n\tclass MyMapper extends Mapper\n\n\t\tisComment: (hNode) -> return hNode.str.match(///^ \\s* \\/ \\/ ///)\n\n\t\tmapCmd: (hNode) ->\n\t\t\t{cmd, argstr} = hNode.uobj\n\t\t\tif (cmd == 'for')\n\t\t\t\treturn indented(\"{#for #{argstr}}\", hNode.level, @oneIndent)\n\t\t\telse\n\t\t\t\treturn super(hNode)\n\n\tresult = map(\"\"\"\n\t\t\t// test.txt\n\n\t\t\tabc\n\t\t\t#define meaning 42\n\t\t\tThe meaning of life is __meaning__\n\t\t\t#for x in lItems\n\t\t\t\"\"\", MyMapper)\n\n\tutest.equal 377, result, \"\"\"\n\t\t\tabc\n\t\t\tThe meaning of life is 42\n\t\t\t{#for x in lItems}\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Test mapToUserObj\n\n(() ->\n\n\tclass MyMapper extends Mapper\n\n\t\t# --- change definition of a comment\n\t\tisComment: (hNode) -> return hNode.str.match(///\n\t\t\t\t\\s*\n\t\t\t\t\\/\n\t\t\t\t\\/\n\t\t\t\t///)\n\n\t\tmapEmptyLine: (hNode) -> return undef\n\t\tmapComment: (hNode) -> return undef\n\t\tmapToUserObj: (hNode) ->\n\t\t\treturn hNode.str.length.toString()\n\n\tresult = map(\"\"\"\n\t\t\t// test.txt\n\n\t\t\tabc\n\n\t\t\tdefghi\n\t\t\t\"\"\", MyMapper)\n\tutest.equal 406, result, \"\"\"\n\t\t\t3\n\t\t\t6\n\t\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- Test complex mapping,\n#     where source is passed through multiple mappers\n\n# ---------------------------------------------------------------------------\n# JSMapper:\n#    1. retains comments\n#    2. removes empty lines\n#    3. appends a semicolon to each non-comment line\n\nclass JSMapper extends Mapper\n\n\tmapComment: (hNode) ->\n\n\t\treturn hNode.str\n\n\tmapToUserObj: (hNode) ->\n\t\treturn hNode.str + ';'\n\n(() ->\n\n\tclass JSTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\treturn map(block, JSMapper)\n\n\tmapTester = new JSTester()\n\n\t# --- some utest tests of JSMapper\n\n\tmapTester.equal 444, \"\"\"\n\t\t\t# |||| $:\n\t\t\ty = 2*x\n\t\t\t\"\"\", \"\"\"\n\t\t\t# |||| $:\n\t\t\ty = 2*x;\n\t\t\t\"\"\"\n\n\tmapTester.equal 452, \"\"\"\n\t\t\t# |||| $: {\n\t\t\ty = 2*x\n\t\t\tconsole.log \"OK\"\n\t\t\t# |||| }\n\t\t\t\"\"\", \"\"\"\n\t\t\t# |||| $: {\n\t\t\ty = 2*x;\n\t\t\tconsole.log \"OK\";\n\t\t\t# |||| }\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# BarMapper should:\n#    1. Remove comments and empty lines   (happens by default)\n#    2. Convert\n#          #reactive <code>\n#       to\n#          # |||| $:\n#          <code>\n#    3. Convert\n#          #reactive\n#             <code>\n#       to\n#          # |||| $: {\n#          <code>\n#          # |||| }\n\nexport class BarMapper extends Mapper\n\n\tmapCmd: (hNode) ->\n\n\t\tdbgEnter \"mapCmd\", hNode\n\t\t{str, uobj, level} = hNode\n\t\t{cmd, argstr} = uobj        # isCmd() put this here\n\n\t\tif (cmd == 'reactive')\n\t\t\tif (argstr == '')\n\t\t\t\t# --- A reactive block\n\t\t\t\tlLines = @fetchLinesAtLevel(level+1)\n\n\t\t\t\t# --- simulate conversion to JavaScript\n\t\t\t\tcode = map(lLines, JSMapper)\n\n\t\t\t\tblock = toBlock([\n\t\t\t\t\t\"# |||| $: {\"\n\t\t\t\t\tcode\n\t\t\t\t\t\"# |||| }\"\n\t\t\t\t\t])\n\t\t\telse\n\t\t\t\t# --- A reactive statement\n\t\t\t\tcode = map(argstr, JSMapper)\n\n\t\t\t\tblock = toBlock([\n\t\t\t\t\t\"# |||| $:\"\n\t\t\t\t\tcode\n\t\t\t\t\t])\n\t\t\tdbgReturn \"mapCmd\", block\n\t\t\treturn block\n\n\t\treturn super(hNode)\n\n(() ->\n\n\tclass BarTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\treturn map(block, BarMapper)\n\n\tmapTester = new BarTester()\n\n\t# ..........................................................\n\t# --- some utest tests of BarMapper\n\n\tmapTester.equal 530, \"\"\"\n\t\t\t# --- a comment (should remove)\n\n\t\t\t<h1>title</h1>\n\t\t\t<script>\n\t\t\t\t#reactive y = 2*x\n\t\t\t</script>\n\t\t\t\"\"\", \"\"\"\n\t\t\t<h1>title</h1>\n\t\t\t<script>\n\t\t\t\t# |||| $:\n\t\t\t\ty = 2*x;\n\t\t\t</script>\n\t\t\t\"\"\"\n\n\tmapTester.equal 545, \"\"\"\n\t\t\t# --- a comment (should remove)\n\n\t\t\t<h1>title</h1>\n\t\t\t<script>\n\t\t\t\t#reactive\n\t\t\t\t\ty = 2*x\n\t\t\t\t\tconsole.log \"OK\"\n\t\t\t</script>\n\t\t\t\"\"\", \"\"\"\n\t\t\t<h1>title</h1>\n\t\t\t<script>\n\t\t\t\t# |||| $: {\n\t\t\t\ty = 2*x;\n\t\t\t\tconsole.log \"OK\";\n\t\t\t\t# |||| }\n\t\t\t</script>\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# DebarMapper should convert:\n#     # |||| <something>\n# to\n#     <something>\n\nexport class DebarMapper extends Mapper\n\n\tmapComment: (hNode) ->\n\n\t\t{str, uobj, level, _commentText} = hNode\n\n\t\tif lMatches = _commentText.match(///^\n\t\t\t\t\\| \\| \\| \\|    # 4 vertical bars\n\t\t\t\t\\s*            # skip whitespace\n\t\t\t\t(.*)           # anything\n\t\t\t\t$///)\n\t\t\tstr = lMatches[1]\n\t\treturn str\n\n(() ->\n\n\tclass DebarTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\treturn map(block, DebarMapper)\n\n\tmapTester = new DebarTester()\n\n\t# ..........................................................\n\t# --- some utest tests of DebarMapper\n\n\tmapTester.equal 600, \"\"\"\n\t\t\t<h1>title</h1>\n\t\t\t<script>\n\t\t\t\t# |||| $:\n\t\t\t\ty = 2*x\n\t\t\t</script>\n\t\t\t\"\"\", \"\"\"\n\t\t\t<h1>title</h1>\n\t\t\t<script>\n\t\t\t\t$:\n\t\t\t\ty = 2*x\n\t\t\t</script>\n\t\t\t\"\"\"\n\n\tmapTester.equal 614, \"\"\"\n\t\t\t<h1>title</h1>\n\t\t\t<script>\n\t\t\t\t# |||| $: {\n\t\t\t\ty = 2*x\n\t\t\t\tconsole.log \"OK\"\n\t\t\t\t# |||| }\n\t\t\t</script>\n\t\t\t\"\"\", \"\"\"\n\t\t\t<h1>title</h1>\n\t\t\t<script>\n\t\t\t\t$: {\n\t\t\t\ty = 2*x\n\t\t\t\tconsole.log \"OK\"\n\t\t\t\t}\n\t\t\t</script>\n\t\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\tclass MultiTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\treturn map(block, [BarMapper, DebarMapper])\n\n\tmapTester = new MultiTester()\n\n\t# ..........................................................\n\t# --- some utest tests of multiple mapping\n\n\tmapTester.equal 649, \"\"\"\n\t\t\t# --- a comment (should remove)\n\n\t\t\t<h1>title</h1>\n\t\t\t<script>\n\t\t\t\t#reactive y = 2*x\n\t\t\t</script>\n\t\t\t\"\"\", \"\"\"\n\t\t\t<h1>title</h1>\n\t\t\t<script>\n\t\t\t\t$:\n\t\t\t\ty = 2*x;\n\t\t\t</script>\n\t\t\t\"\"\"\n\n\tmapTester.equal 664, \"\"\"\n\t\t\t# --- a comment (should remove)\n\n\t\t\t<h1>title</h1>\n\t\t\t<script>\n\t\t\t\t#reactive\n\t\t\t\t\ty = 2*x\n\t\t\t\t\tconsole.log \"OK\"\n\t\t\t</script>\n\t\t\t\"\"\", \"\"\"\n\t\t\t<h1>title</h1>\n\t\t\t<script>\n\t\t\t\t$: {\n\t\t\t\ty = 2*x;\n\t\t\t\tconsole.log \"OK\";\n\t\t\t\t}\n\t\t\t</script>\n\t\t\t\"\"\"\n\n\t)()\n"
  ]
}
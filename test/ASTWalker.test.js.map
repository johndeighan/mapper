{
  "version": 3,
  "file": "ASTWalker.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\ASTWalker.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# ASTWalker.test.coffee\n\nimport {defined, nonEmpty, toBlock, OL} from '@jdeighan/base-utils'\nimport {\n\tLOG, LOGVALUE, clearMyLogs, getMyLogs,\n\t} from '@jdeighan/base-utils/log'\nimport {\n\tsetDebugging, getDebugLog,\n\t} from '@jdeighan/base-utils/debug'\nimport {slurp} from '@jdeighan/base-utils/fs'\nimport {utest, UnitTester} from '@jdeighan/unit-tester'\nimport {indented} from '@jdeighan/coffee-utils/indent'\nimport {projRoot} from '@jdeighan/coffee-utils/fs'\n\nimport {ASTWalker} from '@jdeighan/mapper/ast'\n\nrootDir = projRoot import.meta.url\n\n# ---------------------------------------------------------------------------\n\nclass ASTTester extends UnitTester\n\n\ttransformValue: (coffeeCode) ->\n\n\t\twalker = new ASTWalker(coffeeCode)\n\t\tresult = walker.walk('asText')\n\t\treturn result\n\ntester = new ASTTester()\n\n# ---------------------------------------------------------------------------\n# Test keeping track of imported symbols\n\ntester.equal 28, \"\"\"\n\tLOG someSymbol\n\t\"\"\", \"\"\"\n\tlMissing: LOG someSymbol\n\t\"\"\"\n\ntester.equal 34, \"\"\"\n\timport {toArray, toBlock} from '@jdeighan/coffee-utils'\n\timport {LOG} from '@jdeighan/coffee-utils/log'\n\tLOG someSymbol\n\t\"\"\", \"\"\"\n\tlImported: toArray toBlock LOG\n\tlMissing: someSymbol\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n# Test keeping track of exported symbols\n\n# --- list of symbols\ntester.equal 47, \"\"\"\n\timport {toArray, toBlock} from '@jdeighan/coffee-utils'\n\timport {arrayToBlock} from '@jdeighan/coffee-utils/block'\n\texport {toArray, arrayToBlock}\n\t\"\"\", \"\"\"\n\tlImported: toArray toBlock arrayToBlock\n\tlExported: toArray arrayToBlock\n\t\"\"\"\n\n# --- class\ntester.equal 57, \"\"\"\n\timport {toArray, toBlock} from '@jdeighan/coffee-utils'\n\timport {arrayToBlock} from '@jdeighan/coffee-utils/block'\n\texport class ASTWalker\n\t\tconstructor: (from) ->\n\t\t\tdebug \"enter ASTWalker()\"\n\t\"\"\", \"\"\"\n\tlImported: toArray toBlock arrayToBlock\n\tlExported: ASTWalker\n\tlMissing: debug\n\t\"\"\"\n\n# --- function\ntester.equal 70, \"\"\"\n\texport toBlock = (lItems) ->\n\t\treturn lItems.join(\"\\n\")\n\t\"\"\", \"\"\"\n\tlExported: toBlock\n\t\"\"\"\n\n# --- variable\ntester.equal 78, \"\"\"\n\texport meaning = 42\n\t\"\"\", \"\"\"\n\tlExported: meaning\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 86, \"\"\"\n\timport {undef} from '@jdeighan/coffee-utils'\n\tx = undef\n\t\"\"\", \"\"\"\n\tlImported: undef\n\t\"\"\"\n\ntester.equal 93, \"\"\"\n\tx = undef\n\t\"\"\", \"\"\"\n\tlMissing: undef\n\t\"\"\"\n\ntester.equal 99, \"\"\"\n\tfunc = () ->\n\t\treturn undef\n\tx = func()\n\t\"\"\", \"\"\"\n\tlMissing: undef\n\t\"\"\"\n\n\n# ---------------------------------------------------------------------------\n\ntester.equal 110, \"\"\"\n\tx = toArray(\"abc\")\n\t\"\"\", \"\"\"\n\tlMissing: toArray\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 118, \"\"\"\n\timport {undef, toArray} from '@jdeighan/coffee-utils'\n\tx = toArray(\"abc\")\n\t\"\"\", \"\"\"\n\tlImported: undef toArray\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 127, \"\"\"\n\timport {undef, toArray} from '@jdeighan/coffee-utils'\n\tx = str + toArray(\"abc\")\n\t\"\"\", \"\"\"\n\tlImported: undef toArray\n\tlMissing: str\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 137, \"\"\"\n\tfunc = (x,y) ->\n\t\tz = x+y\n\t\treturn z\n\tw = func(1,2)\n\t\"\"\", \"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 146, \"\"\"\n\tfunc = (x,y) ->\n\t\tz = sum(x+y)\n\t\treturn z\n\t\"\"\", \"\"\"\n\tlMissing: sum\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 156, \"\"\"\n\texport isHashComment = (line) =>\n\n\t\treturn defined(line)\n\t\"\"\",\n\n\t\"\"\"\n\tlExported: isHashComment\n\tlMissing: defined\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 169, \"\"\"\n\texport isHashComment = (line) ->\n\n\t\treturn defined(line)\n\t\"\"\",\n\n\t\"\"\"\n\tlExported: isHashComment\n\tlMissing: defined\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 182, \"\"\"\n\texport isSubclassOf = (subClass, superClass) ->\n\n\t\treturn (subClass == superClass) \\\n\t\t\t|| (subClass.prototype instanceof superClass)\n\t\"\"\",\n\n\t\"\"\"\n\tlExported: isSubclassOf\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 195, \"\"\"\n\texport patchStr = (bigstr, pos, str) ->\n\n\t\tendpos = pos + str.length\n\t\tif (endpos < bigstr.length)\n\t\t\treturn bigstr.substring(0, pos) + str + bigstr.substring(endpos)\n\t\telse\n\t\t\treturn bigstr.substring(0, pos) + str\n\t\"\"\",\n\n\t\"\"\"\n\tlExported: patchStr\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 211, \"\"\"\n\texport removeKeys = (h, lKeys) =>\n\n\t\tfor key in lKeys\n\t\t\tdelete h[key]\n\t\tfor own key,value of h\n\t\t\tif defined(value)\n\t\t\t\tif isArray(value)\n\t\t\t\t\tfor item in value\n\t\t\t\t\t\tif isHash(item)\n\t\t\t\t\t\t\tremoveKeys(item, lKeys)\n\t\t\t\telse if (typeof value == 'object')\n\t\t\t\t\tremoveKeys value, lKeys\n\t\treturn\n\t\"\"\",\n\n\t\"\"\"\n\tlExported: removeKeys\n\tlMissing: defined isArray isHash\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 234, \"\"\"\n\texport isNonEmptyString = (x) ->\n\n\t\tif typeof x != 'string' && x ! instanceof String\n\t\t\treturn false\n\t\tif x.match(/^\\\\s*$/)\n\t\t\treturn false\n\t\treturn true\n\t\"\"\",\n\n\t\"\"\"\n\tlExported: isNonEmptyString\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 250, \"\"\"\n\texport isNonEmptyArray = (x) ->\n\n\t\treturn isArray(x) && (x.length > 0)\n\t\"\"\",\n\n\t\"\"\"\n\tlExported: isNonEmptyArray\n\tlMissing: isArray\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 263, \"\"\"\n\texport hashHasKey = (x, key) ->\n\n\t\tassert isHash(x), \"hashHasKey(): not a hash\"\n\t\tassert isString(key), \"hashHasKey(): key not a string\"\n\t\treturn x.hasOwnProperty(key)\n\t\"\"\",\n\n\t\"\"\"\n\tlExported: hashHasKey\n\tlMissing: assert isHash isString\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 278, \"\"\"\n\texport pushCond = (lItems, item, doPush=notInArray) ->\n\n\t\tif doPush(lItems, item)\n\t\t\tlItems.push item\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\"\"\",\n\n\t\"\"\"\n\tlExported: pushCond\n\tlMissing: notInArray\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 295, '''\n\texport isUniqueList = (lItems, func=undef) ->\n\n\t\tif notdefined(lItems)\n\t\t\treturn true     # empty list is unique\n\t\tif defined(func)\n\t\t\tassert isFunction(func), \"Not a function: #{OL(func)}\"\n\t\th = {}\n\t\tfor item in lItems\n\t\t\tif defined(func) && !func(item)\n\t\t\t\treturn false\n\t\t\tif defined(h[item])\n\t\t\t\treturn false\n\t\t\th[item] = 1\n\t\treturn true\n\t''',\n\n\t\"\"\"\n\tlExported: isUniqueList\n\tlMissing: undef notdefined defined assert isFunction OL\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 319, '''\n\texport isUniqueTree = (lItems, func=undef, hFound={}) ->\n\n\t\tif isEmpty(lItems)\n\t\t\treturn true     # empty list is unique\n\t\tif defined(func)\n\t\t\tassert isFunction(func), \"Not a function: #{OL(func)}\"\n\t\tfor item in lItems\n\t\t\tif isArray(item)\n\t\t\t\tif ! isUniqueTree(item, func, hFound)\n\t\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tif defined(func) && !func(item)\n\t\t\t\t\treturn false\n\t\t\t\tif defined(hFound[item])\n\t\t\t\t\treturn false\n\t\t\t\thFound[item] = 1\n\t\treturn true\n\t''',\n\n\t\"\"\"\n\tlExported: isUniqueTree\n\tlMissing: undef isEmpty defined assert isFunction OL isArray\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\ntester.equal 346, '''\n\texport uniq = (lItems) ->\n\n\t\treturn [...new Set(lItems)]\n\t''',\n\n\t'''\n\tlExported: uniq\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 358, '''\n\texport test_try = (lItems) ->\n\n\t\ttry\n\t\t\tx = toString(lItems)\n\t\tcatch err\n\t\t\tLOG err.message\n\t\tfinally\n\t\t\tGOTO 23\n\t''',\n\n\t'''\n\tlExported: test_try\n\tlMissing: toString LOG GOTO\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 376, '''\n\tx = toString(y)\n\tz = a + b\n\tm = 4\n\t''',\n\n\t'''\n\tlMissing: toString y a b\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 388, '''\n\tfor y in blockToArray(code)\n\t\tLOG y\n\t\toutput y\n\t''',\n\n\t'''\n\tlMissing: blockToArray code LOG output\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 400, '''\n\tfor y,i in blockToArray(code)\n\t\tLOG i\n\t\toutput y\n\t''',\n\n\t'''\n\tlMissing: blockToArray code LOG output\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 412, '''\n\timport {LOG} from '@jdeighan/coffee-utils/log'\n\tx = 42\n\tLOG \"x is #{OL(x)}\"\n\t''',\n\n\t'''\n\tlImported: LOG\n\tlMissing: OL\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 425, '''\n\texport say = (x) ->\n\n\t\tif isHash(x)\n\t\t\tLOG hashToStr(x)\n\t\telse\n\t\t\tLOG x\n\t\treturn\n\texport warn = (message) ->\n\n\t\tsay \"WARNING: #{message}\"\n\t''',\n\n\t'''\n\tlExported: say warn\n\tlMissing: isHash LOG hashToStr\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 445, '''\n\tnLeft = MMath.floor(3.5)\n\t''',\n\n\t'''\n\tlMissing: MMath\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 455, '''\n\tnLeft = Math.floor(3.5)\n\t''',\n\n\t''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 463, '''\n\texport titleLine = (title, char='=', padding=2, linelen=42) ->\n\t\t# --- used in logger\n\n\t\tif ! title\n\t\t\treturn char.repeat(linelen)\n\n\t\ttitleLen = title.length + 2 * padding\n\t\tnLeft = Math.floor((linelen - titleLen) / 2)\n\t\tnRight = linelen - nLeft - titleLen\n\t\tstrLeft = char.repeat(nLeft)\n\t\tstrMiddle = ' '.repeat(padding) + title + ' '.repeat(padding)\n\t\tstrRight = char.repeat(nRight)\n\t\treturn strLeft + strMiddle + strRight\n\t''',\n\n\t'''\n\tlExported: titleLine\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 485, '''\n\texport extractMatches = (line, regexp, convertFunc=undef) ->\n\n\t\tlStrings = [...line.matchAll(regexp)]\n\t\tlStrings = for str in lStrings\n\t\t\tstr[0]\n\t\tif defined(convertFunc)\n\t\t\tlConverted = for str in lStrings\n\t\t\t\tconvertFunc(str)\n\t\t\treturn lConverted\n\t\telse\n\t\t\treturn lStrings\n\t''',\n\n\t'''\n\tlExported: extractMatches\n\tlMissing: undef defined\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 506, '''\n\texport envVarsWithPrefix = (prefix, hOptions={}) ->\n\t\t# --- valid options:\n\t\t#        stripPrefix\n\n\t\tassert prefix, \"envVarsWithPrefix: empty prefix!\"\n\t\tplen = prefix.length\n\t\th = {}\n\t\tfor key in Object.keys(process.env)\n\t\t\tif key.indexOf(prefix) == 0\n\t\t\t\tif hOptions.stripPrefix\n\t\t\t\t\th[key.substr(plen)] = process.env[key]\n\t\t\t\telse\n\t\t\t\t\th[key] = process.env[key]\n\t\treturn h\n\t''',\n\n\t'''\n\tlExported: envVarsWithPrefix\n\tlMissing: assert\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 530, '''\n\texport getTimeStr = (date=undef) ->\n\n\t\tif date == undef\n\t\t\tdate = new Date()\n\t\treturn date.toLocaleTimeString('en-US')\n\t''',\n\n\t'''\n\tlExported: getTimeStr\n\tlMissing: undef\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 545, '''\n\texport replaceVars = (line, hVars) ->\n\n\t\tassert isHash(hVars), \"replaceVars() hVars is not a hash\"\n\t''',\n\n\t'''\n\tlExported: replaceVars\n\tlMissing: assert isHash\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 558, '''\n\texport replaceVars = (line, hVars, rx) ->\n\n\t\tfunc = (value) =>\n\t\t\tif defined(value)\n\t\t\t\treturn value\n\n\t\treturn line.replace(line)\n\t''',\n\n\t'''\n\tlExported: replaceVars\n\tlMissing: defined\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 575, '''\n\texport replaceVars = (line, hVars={}, rx) ->\n\n\t\tassert isString(line)\n\t\treplacerFunc = (match, prefix, name) =>\n\t\t\tif prefix\n\t\t\t\treturn process.env[name]\n\t\t\telse\n\t\t\t\tvalue = hVars[name]\n\t\t\t\tif defined(value)\n\t\t\t\t\treturn value\n\t\t\t\telse\n\t\t\t\t\treturn name\n\t\treturn line.replace(rx, replacerFunc)\n\t''',\n\n\t'''\n\tlExported: replaceVars\n\tlMissing: assert isString defined\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 598, '''\n\texport replaceVars = (line, hVars={}, rx=/__(env\\.)?([A-Za-z_]\\w*)__/g) ->\n\n\t\tassert isHash(hVars), \"replaceVars() hVars is not a hash\"\n\n\t\treplacerFunc = (match, prefix, name) =>\n\t\t\tif prefix\n\t\t\t\treturn process.env[name]\n\t\t\telse\n\t\t\t\tvalue = hVars[name]\n\t\t\t\tif defined(value)\n\t\t\t\t\tif isString(value)\n\t\t\t\t\t\treturn value\n\t\t\t\t\telse\n\t\t\t\t\t\treturn JSON.stringify(value)\n\t\t\t\telse\n\t\t\t\t\treturn \"__#{name}__\"\n\t\treturn line.replace(rx, replacerFunc)\n\t''',\n\n\t'''\n\tlExported: replaceVars\n\tlMissing: assert isHash defined isString\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 625, '''\n\texport isIterable = (obj) ->\n\n\t\tif (obj == undef) || (obj == null)\n\t\t\treturn false\n\t\treturn typeof obj[Symbol.iterator] == 'function'\n\t''',\n\n\t'''\n\tlExported: isIterable\n\tlMissing: undef\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 640, '''\n\texport className = (aClass) ->\n\n\t\tif lMatches = aClass.toString().match(/class\\s+(\\w+)/)\n\t\t\treturn lMatches[1]\n\t\telse\n\t\t\tcroak \"className(): Bad input class\"\n\n\texport range = (n) ->\n\n\t\treturn [0..n-1]\n\n\texport timestamp = () ->\n\n\t\treturn new Date().toLocaleTimeString(\"en-US\")\n\t''',\n\n\t'''\n\tlExported: className range timestamp\n\tlMissing: croak\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 664, slurp(rootDir, 'test', 'utils_utest.coffee'),\n\n\t'''\n\tlExported: isHashComment\n\t'''\n\n# ---------------------------------------------------------------------------\n\ncoffeeCode = '''\n\texport mapMath = (line) ->\n\n\t\tdebug \"enter mapMath('#{escapeStr(line)}')\"\n\t\tif isEmpty(line)\n\t\t\tdebug \"return undef from mapMath() - empty string\"\n\t\t\treturn undef\n\n\t\t# --- These should not be needed\n\t\tassert line.indexOf(\"\\\\n\")==-1, \"mapper(): line contains newline char\"\n\t\tassert line.indexOf(\"\\\\r\")==-1, \"mapper(): line contains return char\"\n\n\t\tlWords = line.split(/\\s+/)    # split on whitespace\n\t\tassert defined(lWords), \"lWords is not defined!\"\n\t\tassert lWords.length > 0, \"lWords is empty!\"\n\n\t\tif isCommand(lWords[0])\n\t\t\tcmd = lWords[0]\n\t\t\tdebug \"Command '#{cmd}' found\"\n\t\t\thNode = getNode(cmd, lWords.slice(1))\n\t\telse\n\t\t\tdebug \"expression found\"\n\t\t\thNode = getNode('expr', lWords)\n\n\t\tdebug \"return from mapMath()\", hNode\n\t\treturn hNode\n\t'''\n\ntester.equal 700, coffeeCode,\n\n\t'''\n\tlExported: mapMath\n\tlMissing: debug escapeStr isEmpty undef assert defined isCommand getNode\n\t'''\n\n# ---------------------------------------------------------------------------\n\ntester.equal 709, '''\n\texport charCount = () ->\n\t\treturn\n\texport removeKeys = (h, lKeys) =>\n\t\tremoveKeys(lKeys)\n\t\treturn\n\t''',\n\n\t'''\n\tlExported: charCount removeKeys\n\t'''\n\n# ---------------------------------------------------------------------------\n# This tester includes debugging info\n\n(() ->\n\tsetDebugging [\n\t\t'ASTWalker.visit'\n\t\t'beginScope'\n\t\t'endScope'\n\t\t'Context.add'\n\t\t'Context.addGlobal'\n\t\t],\n\t\t{\n\t\t\tnoecho: true,\n\t\t\treturnFrom: () => return true\n\t\t\tyield: ()      => return true\n\t\t\tresume: ()     => return true\n\t\t\tstring: ()     => return true\n\t\t\tvalue: ()      => return true\n\n\t\t\t# --- set a custom logger for dbgEnter()\n\n\t\t\tenter: (level, funcName, lArgs) ->\n\n\t\t\t\tswitch funcName\n\t\t\t\t\twhen 'ASTWalker.visit'\n\t\t\t\t\t\tLOG indented(lArgs[0].type, level)\n\t\t\t\t\twhen 'beginScope'\n\t\t\t\t\t\tLOG indented('BEGIN SCOPE', level)\n\t\t\t\t\twhen 'endScope'\n\t\t\t\t\t\tLOG indented('END SCOPE', level)\n\t\t\t\t\twhen 'Context.add'\n\t\t\t\t\t\tLOG indented(\"ADD #{lArgs[0]}\", level)\n\t\t\t\t\twhen 'Context.addGlobal'\n\t\t\t\t\t\tLOG indented(\"ADDGLOBAL #{lArgs[0]}\", level)\n\t\t\t\t\telse\n\t\t\t\t\t\tconsole.log \"ERROR: UNKNOWN funcName #{OL(funcName)}\"\n\t\t\t\t\t\treturn true\n\t\t\t}\n\n\tclass ASTTester2 extends UnitTester\n\n\t\ttransformValue: (coffeeCode) ->\n\n\t\t\tclearMyLogs()\n\t\t\twalker = new ASTWalker(coffeeCode)\n\t\t\tresult = walker.walk('logCalls')\n\t\t\treturn getMyLogs()\n\n\ttester2 = new ASTTester2()\n\n\t# ------------------------------------------------------------------------\n\n\ttester2.equal 736, '''\n\t\texport charCount = () ->\n\t\t\treturn\n\t\texport removeKeys = (h, lKeys) =>\n\t\t\tremoveKeys(lKeys)\n\t\t\treturn\n\t\t''', '''\n\t\tFile\n\t\t\tProgram\n\t\t\t\tExportNamedDeclaration\n\t\t\t\t\tAssignmentExpression\n\t\t\t\t\t\tADDGLOBAL charCount\n\t\t\t\t\t\tFunctionExpression\n\t\t\t\t\t\t\tBEGIN SCOPE\n\t\t\t\t\t\t\tBlockStatement\n\t\t\t\t\t\t\t\tReturnStatement\n\t\t\t\t\t\t\tEND SCOPE\n\t\t\t\tExportNamedDeclaration\n\t\t\t\t\tAssignmentExpression\n\t\t\t\t\t\tADDGLOBAL removeKeys\n\t\t\t\t\t\tArrowFunctionExpression\n\t\t\t\t\t\t\tBEGIN SCOPE\n\t\t\t\t\t\t\tIdentifier\n\t\t\t\t\t\t\tIdentifier\n\t\t\t\t\t\t\tBlockStatement\n\t\t\t\t\t\t\t\tExpressionStatement\n\t\t\t\t\t\t\t\t\tCallExpression\n\t\t\t\t\t\t\t\tReturnStatement\n\t\t\t\t\t\t\tEND SCOPE\n\t\t'''\n\t)()\n"
  ]
}
{
  "version": 3,
  "file": "UtilMappers.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\UtilMappers.coffee"
  ],
  "names": [],
  "mappings": ";AAAoB;AAEpB,OAAA;EAAQ,KAAR;EAAe,OAAf;CAAA,MAAA;;AACA,OAAA;EAAQ,QAAR;EAAkB,SAAlB;EAA6B,GAA7B;CAAA,MAAA;;AAEA,OAAA;EAAQ,MAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,UAAR;CAAA,MAAA,wBANoB;;;;;;;;;;AAiBpB,OAAA,IAAa,cAAN,MAAA,YAAA,QAA0B,WAA1B;EAEN,UAAY,CAAC,KAAD,CAAA;AAEb,QAAA,CAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,EAAA;IAAE,QAAA,CAAS,YAAT,EAAuB,KAAvB;IACA,IAAG,QAAA,GAAW,KAAK,CAAC,GAAG,CAAC,KAAV,CAAgB,oCAAhB,CAAd;;;;MAMC,GAAA,CAAI,mBAAJ;MACA,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,CAAA,GAAkB;MAClB,GAAA,CAAI,KAAJ,EAAW,GAAX;MACA,GAAA,CAAI,OAAJ,EAAa,KAAb;MAEA,IAAG,KAAK,CAAC,KAAN,CAAY,gBAAZ,CAAH;;QAQC,GAAA,CAAI,4CAAJ;QACA,MAAA,GAAS,CAAA,CAAA,CAAG,GAAH,CAAA,EAAA,CAAA,CAAW,KAAX,CAAA,EATV;OAAA,MAAA;QAWC,GAAA,CAAI,yBAAJ,EAAJ;;;QAGI,KAAA,GAAQ,GAAA,GAAM,KAAK,CAAC,OAAN,CAAc,KAAd,EAAqB,IAArB,CAAN,GAAmC;QAC3C,MAAA,GAAS,CAAA,CAAA,CAAG,GAAH,CAAA,EAAA,CAAA,CAAW,KAAX,CAAA,EAfV;OAXD;KAAA,MAAA;MA4BC,GAAA,CAAI,sCAAJ;MACA,MAAA,GAAS,KAAK,CAAC,IA7BhB;;IA8BA,SAAA,CAAU,YAAV,EAAwB,MAAxB;AACA,WAAO;EAlCI;;AAFN",
  "sourcesContent": [
    "# UtilMappers.coffee\r\n\r\nimport {undef, defined} from '@jdeighan/base-utils'\r\nimport {dbgEnter, dbgReturn, dbg} from '@jdeighan/base-utils/debug'\r\n\r\nimport {Mapper} from '@jdeighan/mapper'\r\nimport {TreeMapper} from '@jdeighan/mapper/tree'\r\n\r\n# ---------------------------------------------------------------------------\r\n#    Convert lines like:\r\n#       key: <string>\r\n#    to\r\n#       key: '<string>'\r\n#    while doubling internal single-quote characters\r\n#    unless <string> is a number\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class StoryMapper extends TreeMapper\r\n\r\n\tgetUserObj: (hNode) ->\r\n\r\n\t\tdbgEnter 'getUserObj', hNode\r\n\t\tif lMatches = hNode.str.match(///\r\n\t\t\t\t([A-Za-z_][A-Za-z0-9_]*)  # identifier\r\n\t\t\t\t\\:                        # colon\r\n\t\t\t\t\\s*                       # optional whitespace\r\n\t\t\t\t(.+)                      # a non-empty string\r\n\t\t\t\t$///)\r\n\t\t\tdbg \"is <key>: <value>\"\r\n\t\t\t[_, key, value] = lMatches\r\n\t\t\tdbg 'key', key\r\n\t\t\tdbg 'value', value\r\n\r\n\t\t\tif value.match(///\r\n\t\t\t\t\t\\d+\r\n\t\t\t\t\t(?:\r\n\t\t\t\t\t\t\\.\r\n\t\t\t\t\t\t\\d*\r\n\t\t\t\t\t\t)?\r\n\t\t\t\t\t$///)\r\n\t\t\t\t# --- don't mess with numbers\r\n\t\t\t\tdbg \"<value> is a number, return <key>: <value>\"\r\n\t\t\t\tresult = \"#{key}: #{value}\"\r\n\t\t\telse\r\n\t\t\t\tdbg \"<value> is not a number\"\r\n\t\t\t\t# --- surround with single quotes,\r\n\t\t\t\t#     double internal single quotes\r\n\t\t\t\tvalue = \"'\" + value.replace(/\\'/g, \"''\") + \"'\"\r\n\t\t\t\tresult = \"#{key}: #{value}\"\r\n\t\telse\r\n\t\t\tdbg \"not <key>: <value>, return hNode.str\"\r\n\t\t\tresult = hNode.str\r\n\t\tdbgReturn 'getUserObj', result\r\n\t\treturn result\r\n"
  ]
}
// Generated by CoffeeScript 2.5.1
// code.test.coffee
var filepath, testDir;

import {
  strict as assert
} from 'assert';

import test from 'ava';

import {
  undef,
  say,
  isString,
  isHash,
  isEmpty,
  nonEmpty,
  setUnitTesting,
  arrayToString
} from '@jdeighan/coffee-utils';

import {
  mydir,
  mkpath
} from '@jdeighan/coffee-utils/fs';

import {
  UnitTester
} from '@jdeighan/coffee-utils/test';

import {
  setDebugging
} from '@jdeighan/coffee-utils/debug';

import {
  forEachLine,
  forEachBlock,
  forEachSetOfBlocks
} from '@jdeighan/coffee-utils/block';

import {
  getMissingSymbols,
  getNeededImports,
  getAvailSymbols
} from '@jdeighan/string-input/code';

testDir = mydir(import.meta.url);

filepath = mkpath(testDir, 'code.test.txt');

// ----------------------------------------------------------------------------
(function() {
  var callback, lExpected, lExpectedImports, lGot, lGotImports;
  lGot = [];
  lExpected = [];
  lGotImports = [];
  lExpectedImports = [];
  callback = function(lBlocks) {
    var expected, expectedImports, got, gotImports, lImports, lMissing, src;
    assert(lBlocks.length === 3, `there are ${lBlocks.length} blocks`);
    [src, expectedImports, expected] = lBlocks;
    [lImports, lMissing] = getNeededImports(lBlocks[0]);
    got = lMissing.join(',');
    gotImports = arrayToString(lImports);
    if (got !== expected) {
      say(`'${got}' should be '${expected}' in\n${src}`);
    }
    lGot.push(got);
    lExpected.push(expected);
    lGotImports.push(gotImports);
    lExpectedImports.push(expectedImports);
  };
  return test("line 35", async function(t) {
    await forEachSetOfBlocks(filepath, callback);
    t.deepEqual(lGot, lExpected);
    return t.deepEqual(lGotImports, lExpectedImports);
  });
})();

// ----------------------------------------------------------------------------

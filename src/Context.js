// Generated by CoffeeScript 2.7.0
// Context.coffee
var lBuiltins;

import {
  assert,
  LOG,
  debug
} from '@jdeighan/exceptions';

import {
  undef,
  deepCopy,
  words,
  OL
} from '@jdeighan/coffee-utils';

import {
  Scope
} from '@jdeighan/mapper/scope';

lBuiltins = words("parseInt process JSON import console", "Function String Number Boolean Object Set", "Math Date");

// ---------------------------------------------------------------------------
export var Context = class Context {
  constructor() {
    this.globalScope = new Scope('global', lBuiltins);
    this.lScopes = [this.globalScope];
    this.currentScope = this.globalScope;
  }

  // ..........................................................
  atGlobalLevel() {
    var result;
    result = this.currentScope === this.globalScope;
    if (result) {
      assert(this.lScopes.length === 1, "more than one scope");
      return true;
    } else {
      return false;
    }
  }

  // ..........................................................
  add(symbol) {
    debug(`enter Context.add(${OL(symbol)})`);
    this.currentScope.add(symbol);
    debug("return from Context.add()");
  }

  // ..........................................................
  addGlobal(symbol) {
    debug(`enter Context.addGlobal(${OL(symbol)})`);
    this.globalScope.add(symbol);
    debug("return from Context.addGlobal()");
  }

  // ..........................................................
  has(symbol) {
    var i, len, ref, scope;
    ref = this.lScopes;
    for (i = 0, len = ref.length; i < len; i++) {
      scope = ref[i];
      if (scope.has(symbol)) {
        return true;
      }
    }
    return false;
  }

  // ..........................................................
  beginScope(name = undef, lSymbols = undef) {
    var newScope;
    debug("enter beginScope()");
    newScope = new Scope(name, lSymbols);
    this.lScopes.unshift(newScope);
    this.currentScope = newScope;
    debug("return from beginScope()");
  }

  // ..........................................................
  endScope() {
    debug("enter endScope()");
    this.lScopes.shift(); // remove ended scope
    this.currentScope = this.lScopes[0];
    debug("return from endScope()");
  }

  // ..........................................................
  dump() {
    var i, len, ref, scope;
    ref = this.lScopes;
    for (i = 0, len = ref.length; i < len; i++) {
      scope = ref[i];
      LOG("   SCOPE:");
      scope.dump();
    }
  }

};

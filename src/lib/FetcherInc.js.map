{
  "version": 3,
  "file": "FetcherInc.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\FetcherInc.coffee"
  ],
  "names": [],
  "mappings": ";AAAmB;AAEnB,OAAO,EAAP,MAAA;;AAEA,OAAA;EACC,KADD;EACQ,EADR;EACY,OADZ;EACqB,UADrB;EAEC,QAFD;EAEW,SAFX;EAEsB,OAFtB;EAE+B,QAF/B;CAAA,MAAA;;AAIA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA;;AACA,OAAA;EACC,GADD;EACM,QADN;EACgB,SADhB;CAAA,MAAA;;AAGA,OAAA;EACC,gBADD;EACmB,KADnB;EAC0B,MAD1B;CAAA,MAAA;;AAIA,OAAA;EAAQ,IAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,OAAR;CAAA,MAAA,2BAjBmB;;;;AAsBnB,OAAA,IAAa,aAAN,MAAA,WAAA,QAAyB,QAAzB;EAEN,WAAa,CAAC,MAAD,EAAS,UAAQ,CAAA,CAAjB,CAAA;IAEZ,QAAA,CAAS,YAAT,EAAuB,MAAvB,EAA+B,OAA/B;SACA,CAAM,MAAN,EAAc,OAAd;IACA,IAAC,CAAA,QAAD,GAAY,MAFd;IAGE,SAAA,CAAU,YAAV;EALY,CAAd;;;;EAUC,KAAO,CAAA,CAAA;AAER,QAAA,CAAA,EAAA,QAAA,EAAA,KAAA,EAAA,KAAA,EAAA,QAAA,EAAA,KAAA,EAAA,WAAA,EAAA;IAAE,QAAA,CAAS,kBAAT,EAAF;;IAIE,IAAG,OAAA,CAAQ,IAAC,CAAA,QAAT,CAAH;MACC,GAAA,CAAI,cAAJ;MACA,KAAA,GAAQ,IAAC,CAAA,QAAQ,CAAC,KAAV,CAAA,EADX;;;MAMG,IAAG,OAAA,CAAQ,KAAR,CAAH;;;QAGC,MAAA,CAAO,KAAA,YAAiB,IAAxB,EAA8B,CAAA,YAAA,CAAA,CAAe,EAAA,CAAG,KAAH,CAAf,CAAA,CAA9B;QACA,GAAA,CAAI,yBAAJ,EAHJ;;QAMI,CAAA,CAAC,QAAD,CAAA,GAAa,IAAC,CAAA,WAAd;QACA,KAAK,CAAC,MAAN,GAAe,CAAA,CAAA,CAAG,QAAH,CAAA,CAAA,CAAA,CAAe,IAAC,CAAA,cAAhB,EAAA,CAAA,CAAkC,KAAK,CAAC,MAAxC,CAAA;QAEf,SAAA,CAAU,kBAAV,EAA8B,KAA9B;AACA,eAAO,MAXR;OANH;;MAoBG,IAAC,CAAA,QAAD,GAAY;MACZ,GAAA,CAAI,SAAJ,EAtBD;KAAA,MAAA;MAwBC,GAAA,CAAI,sBAAJ,EAxBD;KAJF;;IA+BE,WAAA,GAAc,IAAC,CAAA;IAEf,KAAA,QAnCD,CAAA,KAmCS,CAAA,EAjCV;IAkCE,IAAG,UAAA,CAAW,KAAX,CAAH;MACC,SAAA,CAAU,kBAAV,EAA8B,KAA9B;AACA,aAAO,MAFR;;IAIA,CAAA,CAAC,GAAD,EAAM,KAAN,CAAA,GAAe,KAAf,EAtCF;;IAyCE,IAAG,QAAA,GAAW,GAAG,CAAC,KAAJ,CAAU,sBAAV,CAAd;MAMC,CAAC,CAAD,EAAI,KAAJ,CAAA,GAAa;MACb,IAAC,CAAA,cAAD,GAAkB;MAClB,GAAA,CAAI,CAAA,SAAA,CAAA,CAAY,KAAZ,CAAA,CAAJ;MACA,MAAA,CAAO,QAAA,CAAS,KAAT,CAAP,EAAwB,+BAAxB;MACA,IAAC,CAAA,cAAD,CAAgB,KAAhB,EAAuB,KAAvB;MACA,KAAA,GAAQ,IAAC,CAAA,KAAD,CAAA,EALX;MAMG,SAAA,CAAU,kBAAV,EAA8B,KAA9B;AACA,aAAO,MAbR;KAAA,MAAA;MAeC,GAAA,CAAI,aAAJ,EAfD;;IAiBA,SAAA,CAAU,kBAAV,EAA8B,KAA9B;AACA,WAAO;EA7DD,CAVR;;;EA2EC,cAAgB,CAAC,KAAD,EAAQ,KAAR,CAAA;AAEjB,QAAA,GAAA,EAAA;IAAE,QAAA,CAAS,2BAAT,EAAsC,KAAtC,EAA6C,KAA7C,EAAF;;IAGE,MAAA,CAAO,QAAA,CAAS,KAAT,CAAP,EAAwB,CAAA,cAAA,CAAA,CAAiB,EAAA,CAAG,KAAH,CAAjB,CAAA,CAAxB;IACA,MAAA,CAAO,gBAAA,CAAiB,KAAjB,CAAP,EACE,CAAA,wBAAA,CAAA,CAA2B,EAAA,CAAG,KAAH,CAA3B,CAAA,CADF,EAJF;;IAQE,GAAA,GAAM,IAAC,CAAA,WAAW,CAAC;IACnB,IAAG,GAAH;MACC,MAAA,CAAO,KAAA,CAAM,GAAN,CAAP,EAAmB,CAAA,iBAAA,CAAA,CAAoB,EAAA,CAAG,GAAH,CAApB,CAAA,CAAnB,EADD;KAAA,MAAA;MAGC,GAAA,GAAM,OAAO,CAAC,GAAR,CAAA,EAHP;;IAKA,QAAA,GAAW,MAAA,CAAO,KAAP,EAAc,GAAd;IACX,GAAA,CAAI,UAAJ,EAAgB,QAAhB;IACA,IAAG,UAAA,CAAW,QAAX,CAAH;MACC,KAAA,CAAM,CAAA,wBAAA,CAAA,CAA2B,KAA3B,CAAA,QAAA,CAAA,CAA2C,GAA3C,CAAA,CAAN,EADD;;IAEA,MAAA,CAAO,EAAE,CAAC,UAAH,CAAc,QAAd,CAAP,EAAgC,CAAA,CAAA,CAAG,QAAH,CAAA,eAAA,CAAhC;IAEA,IAAC,CAAA,QAAD,GAAY,IAAI,UAAJ,CAAe;MAAC,MAAA,EAAQ;IAAT,CAAf,EAAmC;MAAC,QAAA,EAAU;IAAX,CAAnC;IACZ,SAAA,CAAU,2BAAV;EAvBe;;AA7EV",
  "sourcesContent": [
    "# FetcherInc.coffee\r\n\r\nimport fs from 'fs'\r\n\r\nimport {\r\n\tundef, OL, defined, notdefined,\r\n\tisString, isInteger, isEmpty, nonEmpty,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {\r\n\tdbg, dbgEnter, dbgReturn,\r\n\t} from '@jdeighan/base-utils/debug'\r\nimport {\r\n\tisSimpleFileName, isDir, pathTo,\r\n\t} from '@jdeighan/coffee-utils/fs'\r\n\r\nimport {Node} from '@jdeighan/mapper/node'\r\nimport {Fetcher} from '@jdeighan/mapper/fetcher'\r\n\r\n# ---------------------------------------------------------------------------\r\n# 1. handle '#include' - implemented using @altInput, overriding fetch()\r\n\r\nexport class FetcherInc extends Fetcher\r\n\r\n\tconstructor: (hInput, options={}) ->\r\n\r\n\t\tdbgEnter \"FetcherInc\", hInput, options\r\n\t\tsuper hInput, options\r\n\t\t@altInput = undef      # implements #include\r\n\t\tdbgReturn \"FetcherInc\"\r\n\r\n\t# ..........................................................\r\n\t# --- override to handle '#include'\r\n\r\n\tfetch: () ->\r\n\r\n\t\tdbgEnter \"FetcherInc.fetch\"\r\n\r\n\t\t# --- Check if data available from @altInput\r\n\r\n\t\tif defined(@altInput)\r\n\t\t\tdbg \"has altInput\"\r\n\t\t\thNode = @altInput.fetch()\r\n\r\n\t\t\t# --- NOTE: hNode.str will never be #include\r\n\t\t\t#           because altInput's fetch would handle it\r\n\r\n\t\t\tif defined(hNode)\r\n\t\t\t\t# --- NOTE: altInput was created knowing how many levels\r\n\t\t\t\t#           to add due to indentation in #include statement\r\n\t\t\t\tassert hNode instanceof Node, \"Not a Node: #{OL(hNode)}\"\r\n\t\t\t\tdbg \"from alt, update source\"\r\n\r\n\t\t\t\t# --- Update 'source'\r\n\t\t\t\t{filename} = @hSourceInfo\r\n\t\t\t\thNode.source = \"#{filename}/#{@includeLineNum} #{hNode.source}\"\r\n\r\n\t\t\t\tdbgReturn \"FetcherInc.fetch\", hNode\r\n\t\t\t\treturn hNode\r\n\r\n\t\t\t# --- alternate input is exhausted\r\n\t\t\t@altInput = undef\r\n\t\t\tdbg \"alt EOF\"\r\n\t\telse\r\n\t\t\tdbg \"there is no altInput\"\r\n\r\n\t\t# --- If we find a #include, this is the line it's on\r\n\t\tsaveLineNum = @lineNum\r\n\r\n\t\thNode = super()      # call Fetcher.fetch()\r\n\t\tif notdefined(hNode)\r\n\t\t\tdbgReturn 'FetcherInc.fetch', undef\r\n\t\t\treturn undef\r\n\r\n\t\t{str, level} = hNode\r\n\r\n\t\t# --- check for #include\r\n\t\tif lMatches = str.match(///^\r\n\t\t\t\t\\#\r\n\t\t\t\tinclude \\b\r\n\t\t\t\t\\s*\r\n\t\t\t\t(.*)\r\n\t\t\t\t$///)\r\n\t\t\t[_, fname] = lMatches\r\n\t\t\t@includeLineNum = saveLineNum\r\n\t\t\tdbg \"#include #{fname}\"\r\n\t\t\tassert nonEmpty(fname), \"missing file name in #include\"\r\n\t\t\t@createAltInput fname, level\r\n\t\t\thNode = @fetch()    # recursive call to this function\r\n\t\t\tdbgReturn \"FetcherInc.fetch\", hNode\r\n\t\t\treturn hNode\r\n\t\telse\r\n\t\t\tdbg \"no #include\"\r\n\r\n\t\tdbgReturn \"FetcherInc.fetch\", hNode\r\n\t\treturn hNode\r\n\r\n\t# ..........................................................\r\n\r\n\tcreateAltInput: (fname, level) ->\r\n\r\n\t\tdbgEnter \"FetcherInc.createAltInput\", fname, level\r\n\r\n\t\t# --- Make sure we have a simple file name\r\n\t\tassert isString(fname), \"not a string: #{OL(fname)}\"\r\n\t\tassert isSimpleFileName(fname),\r\n\t\t\t\t\"not a simple file name: #{OL(fname)}\"\r\n\r\n\t\t# --- Decide which directory to search for file\r\n\t\tdir = @hSourceInfo.dir\r\n\t\tif dir\r\n\t\t\tassert isDir(dir), \"not a directory: #{OL(dir)}\"\r\n\t\telse\r\n\t\t\tdir = process.cwd()  # --- Use current directory\r\n\r\n\t\tfullpath = pathTo(fname, dir)\r\n\t\tdbg \"fullpath\", fullpath\r\n\t\tif notdefined(fullpath)\r\n\t\t\tcroak \"Can't find include file #{fname} in dir #{dir}\"\r\n\t\tassert fs.existsSync(fullpath), \"#{fullpath} does not exist\"\r\n\r\n\t\t@altInput = new FetcherInc({source: fullpath}, {addLevel: level})\r\n\t\tdbgReturn \"FetcherInc.createAltInput\"\r\n\t\treturn\r\n"
  ]
}
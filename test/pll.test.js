// Generated by CoffeeScript 2.5.1
// pll.test.coffee
var simple;

import {
  strict as assert
} from 'assert';

import {
  AvaTester
} from '@jdeighan/ava-tester';

import {
  say,
  undef,
  error,
  warn,
  rtrim
} from '@jdeighan/coffee-utils';

import {
  setDebugging
} from '@jdeighan/coffee-utils/debug';

import {
  StringInput
} from '@jdeighan/string-input';

import {
  PLLParser
} from '@jdeighan/string-input/pll';

import {
  isTAML,
  taml
} from '@jdeighan/string-input/convert';

simple = new AvaTester();

// ---------------------------------------------------------------------------
// --- test using identity mapper
(function() {
  var contents, oInput, tree;
  contents = `development = yes
if development
	color = red
	if usemoods
		mood = somber
if not development
	color = blue
	if usemoods
		mood = happy`;
  oInput = new PLLParser(contents);
  tree = oInput.getTree();
  return simple.equal(33, tree, taml(`---
-
	lineNum: 1
	node: development = yes
-
	lineNum: 2
	node: if development
	body:
		-
			lineNum: 3
			node: color = red
		-
			lineNum: 4
			node: if usemoods
			body:
				-
					lineNum: 5
					node: mood = somber
-
	lineNum: 6
	node: if not development
	body:
		-
			lineNum: 7
			node: color = blue
		-
			lineNum: 8
			node: if usemoods
			body:
				-
					lineNum: 9
					node: mood = happy`));
})();

// ---------------------------------------------------------------------------
(function() {
  var NewInput, content, oInput, tree;
  NewInput = class NewInput extends PLLParser {
    mapString(str) {
      var _, dqstr, ident, key, lMatches, neg, number, op, sqstr, value;
      if (lMatches = str.match(/^([A-Za-z_]+)\s*=\s*(.*)$/)) { // identifier
        [_, key, value] = lMatches;
        return 'assign';
      } else if (lMatches = str.match(/^if\s+(?:(not)\s+)?([A-Za-z_]+)$/)) { // identifier
        [_, neg, key] = lMatches;
        if (neg) {
          return 'if_falsy';
        } else {
          return 'if_truthy';
        }
      } else if (lMatches = str.match(/^if\s+([A-Za-z_]+)\s*(==|!=|>|>=|<|<=)\s*(?:([A-Za-z_]+)|([0-9]+)|'([^']*)'|"([^"]*)")$/)) { // identifier (key)
        // comparison operator
        // identifier
        // number
        // single quoted string
        // double quoted string
        [_, key, op, ident, number, sqstr, dqstr] = lMatches;
        if (ident) {
          return 'compare_ident';
        } else if (number) {
          return 'compare_number';
        } else if (sqstr || dqstr) {
          return 'compare_string';
        } else {
          return error(`Invalid line: '${str}'`);
        }
      } else {
        return error(`Invalid line: '${str}'`);
      }
    }

  };
  content = `if development
	color = red
	if debug > 2
		mood = somber
if not development
	color = blue
	if debug >= 3
		mood = happy`;
  oInput = new NewInput(content);
  tree = oInput.getTree();
  return simple.equal(147, tree, taml(`---
-
	node: if_truthy
	lineNum: 1
	body:
		-
			node: assign
			lineNum: 2
		-
			node: compare_number
			lineNum: 3
			body:
				-
					node: assign
					lineNum: 4
-
	node: if_falsy
	lineNum: 5
	body:
		-
			node: assign
			lineNum: 6
		-
			node: compare_number
			lineNum: 7
			body:
				-
					node: assign
					lineNum: 8`));
})();

// ---------------------------------------------------------------------------
// --- test HEREDOC handling
(function() {
  var contents, oInput, tree;
  contents = `development = <<<
	yes

if development
	color <<<
		=
		red

	if usemoods
		<<<
			mood
			=
			somber

if not development
	color = blue
	if usemoods
		mood = happy`;
  oInput = new PLLParser(contents);
  tree = oInput.getTree();
  return simple.equal(211, tree, taml(`---
-
	lineNum: 1
	node: development = yes
-
	lineNum: 4
	node: if development
	body:
		-
			lineNum: 5
			node: color = red
		-
			lineNum: 9
			node: if usemoods
			body:
				-
					lineNum: 10
					node: mood = somber
-
	lineNum: 15
	node: if not development
	body:
		-
			lineNum: 16
			node: color = blue
		-
			lineNum: 17
			node: if usemoods
			body:
				-
					lineNum: 18
					node: mood = happy`));
})();

// ---------------------------------------------------------------------------
// Test empty lines in HEREDOC using '.'
(function() {
  var contents, oInput, tree;
  contents = `development = <<<
	yes
	.
	no`;
  oInput = new PLLParser(contents);
  tree = oInput.getTree();
  return simple.equal(211, tree, taml(`---
-
	lineNum: 1
	node: development = yes  no`));
})();

// ---------------------------------------------------------------------------
(function() {
  var JSParser, content, oInput, tree;
  JSParser = class JSParser extends PLLParser {
    heredocStr(str) {
      if (isTAML(str)) {
        return taml(str);
      } else {
        return JSON.stringify(str);
      }
    }

  };
  content = `x = 23
str = <<<
	this is a
	long string
	of text

console.log str`;
  oInput = new JSParser(content);
  tree = oInput.getTree();
  return simple.equal(271, tree, [
    {
      lineNum: 1,
      node: 'x = 23'
    },
    {
      lineNum: 2,
      node: "str = \"this is a\\nlong string\\nof text\""
    },
    {
      lineNum: 7,
      node: 'console.log str'
    }
  ]);
})();

// ---------------------------------------------------------------------------
// --- Test comment
(function() {
  var GatherTester, tester;
  GatherTester = class GatherTester extends AvaTester {
    transformValue(oInput) {
      var lLines, lParts;
      if (!(oInput instanceof StringInput)) {
        throw new Error("oInput should be a StringInput object");
      }
      lLines = (function() {
        var i, len, ref, results;
        ref = oInput.getAll();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          lParts = ref[i];
          results.push(lParts[2]);
        }
        return results;
      })();
      return lLines;
    }

  };
  tester = new GatherTester();
  return tester.equal(294, new PLLParser(`abc

# --- this is a comment

def`), ['abc', 'def']);
})();

// ---------------------------------------------------------------------------
// --- Test getTree
(function() {
  var pll, tree;
  pll = new PLLParser(`development = yes
if development
	color = red
	if usemoods
		mood = somber
if not development
	color = blue
	if usemoods
		mood = happy`);
  tree = pll.getTree();
  return simple.equal(363, tree, taml(`---
-
	node: development = yes
	lineNum: 1
-
	node: if development
	lineNum: 2
	body:
		-
			node: color = red
			lineNum: 3
		-
			node: if usemoods
			lineNum: 4
			body:
				-
					node: mood = somber
					lineNum: 5
-
	node: if not development
	lineNum: 6
	body:
		-
			node: color = blue
			lineNum: 7
		-
			node: if usemoods
			lineNum: 8
			body:
				-
					node: mood = happy
					lineNum: 9`));
})();

// Generated by CoffeeScript 2.6.1
// WordTranslator.coffee
var combine;

import {
  undef
} from '@jdeighan/coffee-utils';

import {
  LOG
} from '@jdeighan/coffee-utils/log';

import {
  debug
} from '@jdeighan/coffee-utils/debug';

import {
  slurpTAML
} from '@jdeighan/mapper/taml';

// ---------------------------------------------------------------------------
export var WordTranslator = class WordTranslator {
  constructor(dictPath = undef) {
    debug("enter WordTranslator()");
    this.hDict = {};
    if (dictPath) {
      this.load(dictPath);
    }
    debug("return from WordTranslator()");
  }

  // ..........................................................
  translate(word) {
    return this.hDict[word];
  }

  // ..........................................................
  findWords(sent) {
    var func, lFound, newString;
    // --- returns {
    //        lFound: [ [<word>, <trans>, <startPos>, <endPos>], .. ]
    //        newString: <string>
    //        }
    lFound = [];
    func = function(match, offset) {
      var trans;
      if (trans = this.hDict[match.toLowerCase()]) {
        lFound.push([match, trans, offset, offset + match.length]);
        return trans;
      } else {
        return match;
      }
    };
    newString = sent.replace(/\w+/g, func);
    return {lFound, newString};
  }

  // ..........................................................
  load(dictPath) {
    var epos, ext, key, nKeys, pos, ref, trans, word;
    debug(`enter load('${dictPath}')`);
    ref = slurpTAML(dictPath);
    for (key in ref) {
      trans = ref[key];
      pos = key.indexOf('(');
      if (pos === -1) {
        this.hDict[key] = trans;
      } else {
        word = key.substring(0, pos);
        this.hDict[word] = trans;
        epos = key.indexOf(')', pos);
        ext = key.substring(pos + 1, epos);
        this.hDict[combine(word, ext)] = trans;
        pos = key.indexOf('(', epos);
        while (pos !== -1) {
          epos = key.indexOf(')', pos);
          ext = key.substring(pos + 1, epos);
          this.hDict[combine(word, ext)] = trans;
          pos = key.indexOf('(', epos);
        }
      }
    }
    nKeys = Object.keys(this.hDict).length;
    debug(`${nKeys} words loaded`);
    debug("return from load()");
  }

};

// ---------------------------------------------------------------------------
combine = function(word, ext) {
  var len;
  if (ext.indexOf('--') === 0) {
    len = word.length;
    return word.substring(0, len - 2) + ext.substring(2);
  } else if (ext.indexOf('-') === 0) {
    len = word.length;
    return word.substring(0, len - 1) + ext.substring(1);
  }
  return word + ext;
};

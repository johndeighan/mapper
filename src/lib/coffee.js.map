{
  "version": 3,
  "file": "coffee.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\coffee.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# coffee.coffee\r\n\r\nimport CoffeeScript from 'coffeescript'\r\n\r\nimport {\r\n\tCWS, undef, defined, OL, getOptions,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {LOG, LOGVALUE, sep_dash} from '@jdeighan/base-utils/log'\r\nimport {\r\n\tdbg, dbgEnter, dbgReturn,\r\n\t} from '@jdeighan/base-utils/debug'\r\nimport {mkpath, slurp, barf} from '@jdeighan/base-utils/fs'\r\nimport {\r\n\tindentLevel, isUndented, indented,\r\n\t} from '@jdeighan/base-utils/indent'\r\n\r\nimport {Mapper, map} from '@jdeighan/mapper'\r\nimport {TreeMapper} from '@jdeighan/mapper/tree'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport brew = (code) ->\r\n\r\n\thCoffeeOptions = {\r\n\t\tbare: true\r\n\t\theader: false\r\n\t\t}\r\n\tmapped = map(code, CoffeePreProcessor)\r\n\tresult = CoffeeScript.compile(mapped, hCoffeeOptions)\r\n\r\n\t# --- Result is JS code\r\n\treturn result.trim()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport coffeeCodeToJS = (coffeeCode) ->\r\n\r\n\tassert isUndented(coffeeCode), \"has indentation\"\r\n\tdbgEnter \"coffeeCodeToJS\", coffeeCode\r\n\r\n\ttry\r\n\t\tjsCode = brew(coffeeCode)\r\n\r\n\t\t# --- cleanJS() does:\r\n\t\t#        1. remove blank lines\r\n\t\t#        2. remove trailing newline\r\n\t\tjsCode = cleanJS(jsCode)\r\n\tcatch err\r\n\t\tcroak err, \"Original Code\", coffeeCode\r\n\r\n\tdbgReturn \"coffeeCodeToJS\", jsCode\r\n\treturn jsCode\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport coffeeExprToJS = (coffeeExpr) ->\r\n\r\n\tassert isUndented(coffeeExpr), \"has indentation\"\r\n\tdbgEnter \"coffeeExprToJS\"\r\n\r\n\ttry\r\n\t\tjsExpr = brew(coffeeExpr)\r\n\r\n\t\t# --- Remove any trailing semicolon\r\n\t\tpos = jsExpr.length - 1\r\n\t\tif jsExpr.substr(pos, 1) == ';'\r\n\t\t\tjsExpr = jsExpr.substr(0, pos)\r\n\r\n\tcatch err\r\n\t\tcroak err, \"coffeeExprToJS\", coffeeExpr\r\n\r\n\tdbgReturn \"coffeeExprToJS\", jsExpr\r\n\treturn jsExpr\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport coffeeFileToJS = (srcPath, destPath=undef, hOptions={}) ->\r\n\t# --- coffee => js\r\n\t#     Valid Options:\r\n\t#        saveAST\r\n\t#        force\r\n\t#        premapper\r\n\t#        postmapper\r\n\r\n\tif notdefined(destPath)\r\n\t\tdestPath = withExt(srcPath, '.js')\r\n\t{force, saveAST} = getOptions(hOptions)\r\n\tif force || ! newerDestFileExists(srcPath, destPath)\r\n\t\tcoffeeCode = slurp(srcPath)\r\n\t\tif saveAST\r\n\t\t\tdumpfile = withExt(srcPath, '.ast')\r\n\t\t\tlNeeded = getNeededSymbols(coffeeCode, {dumpfile})\r\n\t\t\tif (lNeeded == undef) || (lNeeded.length == 0)\r\n\t\t\t\tdbg \"NO NEEDED SYMBOLS in #{shortenPath(destPath)}:\"\r\n\t\t\telse\r\n\t\t\t\tn = lNeeded.length\r\n\t\t\t\tword = if (n==1) then'SYMBOL' else 'SYMBOLS'\r\n\t\t\t\tdbg \"#{n} NEEDED #{word} in #{shortenPath(destPath)}:\"\r\n\t\t\t\tfor sym in lNeeded\r\n\t\t\t\t\tdbg \"   - #{sym}\"\r\n\t\tjsCode = coffeeCodeToJS(coffeeCode)\r\n\t\tbarf jsCode, destPath\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport coffeeCodeToAST = (coffeeCode) ->\r\n\r\n\tassert isUndented(coffeeCode), \"has indentation\"\r\n\tdbgEnter \"coffeeCodeToAST\", coffeeCode\r\n\r\n\ttry\r\n\t\tmapped = map(coffeeCode, CoffeePreProcessor)\r\n\t\tassert defined(mapped), \"mapped is undef\"\r\n\tcatch err\r\n\t\tcroak \"ERROR in CoffeePreProcessor: #{err.message}\"\r\n\r\n\ttry\r\n\t\tast = CoffeeScript.compile(mapped, {ast: true})\r\n\t\tassert defined(ast), \"ast is empty\"\r\n\tcatch err\r\n\t\tLOG \"ERROR in CoffeeScript: #{err.message}\"\r\n\t\tLOG sep_dash\r\n\t\tLOG \"#{OL(coffeeCode)}\"\r\n\t\tLOG sep_dash\r\n\t\tcroak \"ERROR in CoffeeScript: #{err.message}\"\r\n\r\n\tdbgReturn \"coffeeCodeToAST\", ast\r\n\treturn ast\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport cleanJS = (jsCode) ->\r\n\r\n\tjsCode = jsCode.replace(/\\n\\n+/gs, \"\\n\") # multiple NL to single NL\r\n\tjsCode = jsCode.replace(/\\n$/s, '')      # strip trailing whitespace\r\n\treturn jsCode\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport minifyJS = (jsCode, lParms) ->\r\n\r\n\tjsCode = CWS(jsCode)\r\n\tjsCode = jsCode.replace(/,\\s+/, ',')\r\n\treturn jsCode\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexpand = (qstr) ->\r\n\r\n\tlMatches = qstr.match(/^\\\"(.*)\\\"$/)\r\n\tassert defined(lMatches), \"Bad arg: #{OL(qstr)}\"\r\n\tassert (lMatches[1].indexOf('\"') == -1), \"Bad arg: #{OL(qstr)}\"\r\n\tresult = qstr.replace(///\r\n\t\t\t\\$\r\n\t\t\t([A-Za-z_][A-Za-z0-9_]*)\r\n\t\t\t///g,\r\n\t\t(_, ident) -> \"\\#{OL(#{ident})}\"\r\n\t\t)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class CoffeePreProcessor extends TreeMapper\r\n\r\n\tmapComment: (hNode) ->\r\n\r\n\t\t# --- Retain comments\r\n\t\tdbgEnter \"CoffeePreProcessor.mapComment\"\r\n\t\t{str, level} = hNode\r\n\t\tresult = indented(str, level, @oneIndent)\r\n\t\tdbgReturn \"CoffeePreProcessor.mapComment\", result\r\n\t\treturn result\r\n\r\n\t# ..........................................................\r\n\r\n\tgetUserObj: (hNode) ->\r\n\t\t# --- only non-special nodes\r\n\r\n\t\tdbgEnter \"CoffeePreProcessor.getUserObj\", hNode\r\n\t\t{str, level} = hNode\r\n\t\tresult = str.replace(///\r\n\t\t\t\t\\\"\r\n\t\t\t\t[^\"]*     # sequence of non-quote characters\r\n\t\t\t\t\\\"\r\n\t\t\t\t///g,\r\n\t\t\t(qstr) -> expand(qstr)\r\n\t\t\t)\r\n\t\tresult = indented(result, level, @oneIndent)\r\n\t\tdbgReturn \"CoffeePreProcessor.getUserObj\", result\r\n\t\treturn result\r\n"
  ]
}
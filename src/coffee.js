// Generated by CoffeeScript 2.6.1
// coffee.coffee
var convert;

import {
  strict as assert
} from 'assert';

import CoffeeScript from 'coffeescript';

import {
  croak,
  OL,
  escapeStr,
  isArray,
  isEmpty,
  nonEmpty,
  words,
  undef,
  deepCopy
} from '@jdeighan/coffee-utils';

import {
  log,
  tamlStringify
} from '@jdeighan/coffee-utils/log';

import {
  joinBlocks
} from '@jdeighan/coffee-utils/block';

import {
  debug
} from '@jdeighan/coffee-utils/debug';

import {
  mydir,
  pathTo,
  slurp,
  barf
} from '@jdeighan/coffee-utils/fs';

import {
  indentLevel,
  indented
} from '@jdeighan/coffee-utils/indent';

import {
  StringInput,
  SmartInput
} from '@jdeighan/string-input';

import {
  ASTWalker
} from '@jdeighan/string-input/tree';

convert = true;

// ---------------------------------------------------------------------------
export var convertCoffee = function(flag) {
  convert = flag;
};

// ---------------------------------------------------------------------------
export var brewExpr = function(expr, force = false) {
  var err, newexpr, pos;
  assert(indentLevel(expr) === 0, "brewExpr(): has indentation");
  if (!convert && !force) {
    return expr;
  }
  try {
    newexpr = CoffeeScript.compile(expr, {
      bare: true
    }).trim();
    // --- Remove any trailing semicolon
    pos = newexpr.length - 1;
    if (newexpr.substr(pos, 1) === ';') {
      newexpr = newexpr.substr(0, pos);
    }
  } catch (error) {
    err = error;
    croak(err, "brewExpr", expr);
  }
  return newexpr;
};

// ---------------------------------------------------------------------------
export var preBrewCoffee = function(...lBlocks) {
  var blk, err, i, j, k, lNeededSymbols, lNewBlocks, len, len1, newblk, ref, script, symbol;
  debug("enter preBrewCoffee()");
  lNeededSymbols = [];
  lNewBlocks = [];
  for (i = j = 0, len = lBlocks.length; j < len; i = ++j) {
    blk = lBlocks[i];
    debug(`BLOCK ${i}`, blk);
    newblk = preProcessCoffee(blk);
    debug("NEW BLOCK", newblk);
    ref = getNeededSymbols(newblk);
    for (k = 0, len1 = ref.length; k < len1; k++) {
      symbol = ref[k];
      if (!lNeededSymbols.includes(symbol)) {
        lNeededSymbols.push(symbol);
      }
    }
    if (convert) {
      try {
        script = CoffeeScript.compile(newblk, {
          bare: true
        });
        debug("BREWED SCRIPT", script);
        lNewBlocks.push(postProcessCoffee(script));
      } catch (error) {
        err = error;
        log("Mapped Text:", newblk);
        croak(err, "Original Text", blk);
      }
    } else {
      lNewBlocks.push(newblk);
    }
  }
  // --- return converted blocks, PLUS the list of import statements
  return [...lNewBlocks, buildImportList(lNeededSymbols)];
};

// ---------------------------------------------------------------------------
export var brewCoffee = function(code) {
  var lImportStmts, newcode;
  [newcode, lImportStmts] = preBrewCoffee(code);
  return joinBlocks(...lImportStmts, newcode);
};

// ---------------------------------------------------------------------------
/*

- converts
		<varname> <== <expr>

	to:
		`$:`
		<varname> = <expr>

	then to to:
		var <varname>;
		$:;
		<varname> = <js expr>;

	then to:
		var <varname>;
		$:
		<varname> = <js expr>;

- converts
		<==
			<code>

	to:
		`$:{`
		<code>
		`}`

	then to:
		$:{;
		<js code>
		};

	then to:
		$:{
		<js code>
		}

*/
// ===========================================================================
export var StarbucksPreMapper = class StarbucksPreMapper extends SmartInput {
  mapString(line, level) {
    var _, code, expr, lMatches, result, varname;
    debug(`enter mapString(${OL(line)})`);
    if (line === '<==') {
      // --- Generate a reactive block
      code = this.fetchBlock(level + 1); // might be empty
      if (isEmpty(code)) {
        debug("return undef from mapString() - empty code block");
        return undef;
      } else {
        result = `\`$:{\`
${code}
\`}\``;
      }
    } else if (lMatches = line.match(/^([A-Za-z][A-Za-z0-9_]*)\s*\<\=\=\s*(.*)$/)) { // variable name
      [_, varname, expr] = lMatches;
      code = this.fetchBlock(level + 1); // must be empty
      assert(isEmpty(code), `mapString(): indented code not allowed after '${line}'`);
      assert(!isEmpty(expr), `mapString(): empty expression in '${line}'`);
      result = `\`$:\`
${varname} = ${expr}`;
    } else {
      debug("return from mapString() - no match");
      return line;
    }
    debug("return from mapString()", result);
    return result;
  }

};

// ---------------------------------------------------------------------------
export var preProcessCoffee = function(code) {
  var newcode, oInput;
  // --- Removes blank lines and comments
  //     inteprets <== as svelte reactive statement or block
  assert(indentLevel(code) === 0, "preProcessCoffee(): has indentation");
  oInput = new StarbucksPreMapper(code);
  newcode = oInput.getAllText();
  debug('newcode', newcode);
  return newcode;
};

// ---------------------------------------------------------------------------
export var StarbucksPostMapper = class StarbucksPostMapper extends StringInput {
  // --- variable declaration immediately following one of:
  //        $:{;
  //        $:;
  //     should be moved above this line
  mapLine(line, level) {
    var _, brace, lMatches, rest, result;
    // --- new properties, initially undef:
    //        @savedLevel
    //        @savedLine
    if (this.savedLine) {
      if (line.match(/^\s*var\s/)) {
        result = `${line}\n${this.savedLine}`;
      } else {
        result = `${this.savedLine}\n${line}`;
      }
      this.savedLine = undef;
      return result;
    }
    if ((lMatches = line.match(/^\$\:(\{)?\;(.*)$/))) { // optional {
      // any remaining text
      [_, brace, rest] = lMatches;
      assert(!rest, "StarbucksPostMapper: extra text after $:");
      this.savedLevel = level;
      if (brace) {
        this.savedLine = "$:{";
      } else {
        this.savedLine = "$:";
      }
      return undef;
    } else if ((lMatches = line.match(/^\}\;(.*)$/))) {
      [_, rest] = lMatches;
      assert(!rest, "StarbucksPostMapper: extra text after $:");
      return indented("\}", level);
    } else {
      return indented(line, level);
    }
  }

};

// ---------------------------------------------------------------------------
export var postProcessCoffee = function(code) {
  var oInput;
  // --- variable declaration immediately following one of:
  //        $:{
  //        $:
  //     should be moved above this line
  oInput = new StarbucksPostMapper(code);
  return oInput.getAllText();
};

// ---------------------------------------------------------------------------
export var buildImportList = function(lNeededSymbols) {
  var hAvailSymbols, hLibs, j, k, lImports, len, len1, lib, ref, strSymbols, symbol;
  hLibs = {}; // { <lib>: [<symbol>, ... ], ... }
  hAvailSymbols = getAvailSymbols(); // { <sym>: <lib>, ... }
  for (j = 0, len = lNeededSymbols.length; j < len; j++) {
    symbol = lNeededSymbols[j];
    lib = hAvailSymbols[symbol];
    if (lib != null) {
      // --- symbol is available in lib
      if (hLibs[lib] != null) {
        assert(isArray(hLibs[lib]), "buildImportList(): not an array");
        hLibs[lib].push(symbol);
      } else {
        hLibs[lib] = [symbol];
      }
    }
  }
  lImports = [];
  ref = Object.keys(hLibs).sort();
  for (k = 0, len1 = ref.length; k < len1; k++) {
    lib = ref[k];
    strSymbols = hLibs[lib].join(',');
    lImports.push(`import {${strSymbols}} from '${lib}'`);
  }
  return lImports;
};

// ---------------------------------------------------------------------------
export var getNeededSymbols = function(code, hOptions = {}) {
  var ast, err, hSymbolInfo, walker;
  // --- Valid options:
  //        dumpfile: <filepath>   - where to dump ast
  debug("enter getNeededSymbols()");
  try {
    debug("COMPILE CODE", code);
    ast = CoffeeScript.compile(code, {
      ast: true
    });
    assert(ast != null, "getNeededSymbols(): ast is empty");
  } catch (error) {
    err = error;
    croak(err, 'CODE (in getNeededSymbols)', code);
  }
  walker = new ASTWalker(ast);
  hSymbolInfo = walker.getSymbols();
  if (hOptions.dumpfile) {
    barf(hOptions.dumpfile, "AST:\n" + tamlStringify(ast));
  }
  debug("return from getNeededSymbols()");
  return hSymbolInfo.lNeeded;
};

// ---------------------------------------------------------------------------
// export to allow unit testing
export var getAvailSymbols = function() {
  var SymbolParser, contents, filepath, hSymbols, parser, searchFromDir;
  // --- returns { <symbol> -> <lib>, ... }
  debug("enter getAvailSymbols()");
  searchFromDir = process.env.DIR_SYMBOLS || mydir(import.meta.url);
  debug(`search for .symbols from '${searchFromDir}'`);
  filepath = pathTo('.symbols', searchFromDir, 'up');
  if (filepath == null) {
    debug("return from getAvailSymbols() - no .symbols file found");
    return {};
  }
  debug(`.symbols file found at '${filepath}'`);
  SymbolParser = class SymbolParser extends SmartInput {
    // --- We want to allow blank lines and comments
    //     We want to allow continuation lines
    constructor(content) {
      super(content);
      this.curLib = undef;
      this.hSymbols = {};
    }

    mapString(line, level) {
      var j, len, ref, symbol;
      if (level === 0) {
        this.curLib = line;
      } else if (level === 1) {
        assert(this.curLib != null, "mapString(): curLib not defined");
        ref = words(line);
        for (j = 0, len = ref.length; j < len; j++) {
          symbol = ref[j];
          assert(this.hSymbols[symbol] == null, `mapString(): duplicate symbol ${symbol}`);
          this.hSymbols[symbol] = this.curLib;
        }
      } else {
        croak(`Bad .symbols file - level = ${level}`);
      }
      return undef; // doesn't matter what we return
    }

    getSymbols() {
      this.getAll();
      return this.hSymbols;
    }

  };
  contents = slurp(filepath);
  debug('Contents of .symbols', contents);
  parser = new SymbolParser(contents);
  hSymbols = parser.getSymbols();
  debug("hSymbols", hSymbols);
  debug("return from getAvailSymbols()");
  return hSymbols;
};

// Generated by CoffeeScript 2.7.0
  // RunTimeStack.coffee
import {
  undef,
  defined,
  notdefined,
  OL,
  isHash,
  toBlock
} from '@jdeighan/base-utils';

import {
  assert,
  croak
} from '@jdeighan/base-utils/exceptions';

import {
  LOG,
  LOGVALUE
} from '@jdeighan/base-utils/log';

import {
  Node
} from '@jdeighan/mapper/node';

// ---------------------------------------------------------------------------
export var RunTimeStack = class RunTimeStack {
  constructor() {
    this.lStack = []; // contains Node objects
  }

  
    // ..........................................................
  size() {
    return this.lStack.length;
  }

  // ..........................................................
  replaceTOS(hNode) {
    this.checkNode(hNode);
    this.lStack[this.lStack.length - 1] = hNode;
  }

  // ..........................................................
  push(hNode) {
    this.checkNode(hNode);
    this.lStack.push(hNode);
  }

  // ..........................................................
  pop() {
    var hNode;
    assert(this.lStack.length > 0, "pop() on empty stack");
    hNode = this.lStack.pop();
    this.checkNode(hNode);
    return hNode;
  }

  // ..........................................................
  isEmpty() {
    return this.lStack.length === 0;
  }

  // ..........................................................
  nonEmpty() {
    return this.lStack.length > 0;
  }

  // ..........................................................
  TOS() {
    var hNode;
    if (this.lStack.length === 0) {
      return undef;
    }
    hNode = this.lStack[this.lStack.length - 1];
    this.checkNode(hNode);
    return hNode;
  }

  // ..........................................................
  desc() {
    var hNode, i, item, lLines, len, ref;
    lLines = [`--- STACK (${this.lStack.length} items) ---`];
    ref = this.lStack;
    for (i = 0, len = ref.length; i < len; i++) {
      hNode = ref[i];
      item = JSON.stringify(hNode, undef, 3);
      lLines.push(item);
    }
    lLines.push("-----------------------");
    return toBlock(lLines);
  }

  // ..........................................................
  checkNode(hNode) {
    // --- Each node should have a key named hUser - a hash
    //     hUser should have a key named _parent - a hash
    assert(hNode instanceof Node, "not a Node");
    assert(isHash(hNode.hEnv), `missing hEnv key in ${OL(hNode)}`);
  }

};

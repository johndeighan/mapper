{
  "version": 3,
  "file": "MathML.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\MathML.test.coffee"
  ],
  "names": [],
  "mappings": ";AAAoB;AAAA,IAAA,UAAA,EAAA;;AAEpB,OAAA;EACC,KADD;EACQ,IADR;EACc,OADd;EACuB,OADvB;EACgC,QADhC;EAC0C,EAD1C;CAAA,MAAA;;AAGA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA;;AACA,OAAA;EAAQ,GAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,YAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,UAAR;CAAA,MAAA;;AAEA,OAAA;EAAQ,OAAR;CAAA,MAAA,0BAVoB;;;AAcd,aAAN,MAAA,WAAA,QAAyB,WAAzB;EAEC,cAAgB,CAAC,GAAD,CAAA;IACf,MAAA,CAAO,QAAA,CAAS,GAAT,CAAP,EAAsB,CAAA,cAAA,CAAA,CAAiB,EAAA,CAAG,GAAH,CAAjB,CAAA,CAAtB;AACA,WAAO,OAAA,CAAQ,GAAR;EAFQ;;AAFjB;;AAMA,UAAA,GAAa,IAAI,UAAJ,CAAA,EApBO;;;AAwBpB,UAAU,CAAC,KAAX,CAAiB,YAAjB,EAA+B;EAC9B,GAAA,EAAK,MADyB;EAE9B,MAAA,EAAQ;IACP;MACC,IAAA,EAAM,OADP;MAEC,KAAA,EAAO;IAFR,CADO;IAKP;MACC,IAAA,EAAM,IADP;MAEC,KAAA,EAAO;IAFR,CALO;IASP;MACC,IAAA,EAAM,QADP;MAEC,KAAA,EAAO;IAFR,CATO;;AAFsB,CAA/B;;AAkBA,UAAU,CAAC,KAAX,CAAiB,KAAjB,EAAwB;EACtB,GAAA,EAAK;AADiB,CAAxB;;AAIA,UAAU,CAAC,KAAX,CAAiB,KAAjB,EAAwB;EACtB,GAAA,EAAK;AADiB,CAAxB;;AAIA,UAAU,CAAC,KAAX,CAAiB,MAAjB,EAAyB;EACvB,GAAA,EAAK;AADkB,CAAzB;;AAIA,UAAU,CAAC,KAAX,CAAiB,OAAjB,EAA0B;EACxB,GAAA,EAAK,OADmB;EAExB,MAAA,EAAQ;IACP;MACC,IAAA,EAAM,IADP;MAEC,KAAA,EAAO;IAFR,CADO;;AAFgB,CAA1B;;AAUA,UAAU,CAAC,KAAX,CAAiB,OAAjB,EAA0B;EACxB,GAAA,EAAK,OADmB;EAExB,MAAA,EAAQ;IACP;MAAC,IAAA,EAAM,IAAP;MAAa,KAAA,EAAO;IAApB,CADO;IAEP;MAAC,IAAA,EAAM,IAAP;MAAa,KAAA,EAAO;IAApB,CAFO;;AAFgB,CAA1B;;AAQA,UAAU,CAAC,KAAX,CAAiB,SAAjB,EAA4B;EAC1B,GAAA,EAAK,OADqB;EAE1B,MAAA,EAAQ;IACP;MAAC,IAAA,EAAM,IAAP;MAAa,KAAA,EAAO;IAApB,CADO;IAEP;MAAC,IAAA,EAAM,IAAP;MAAa,KAAA,EAAO;IAApB,CAFO;;AAFkB,CAA5B;;AAQA,UAAU,CAAC,KAAX,CAAiB,WAAjB,EAA8B;EAC5B,GAAA,EAAK,OADuB;EAE5B,MAAA,EAAQ;IACP;MAAC,IAAA,EAAM,IAAP;MAAa,KAAA,EAAO;IAApB,CADO;IAEP;MAAC,IAAA,EAAM,IAAP;MAAa,KAAA,EAAO;IAApB,CAFO;;AAFoB,CAA9B",
  "sourcesContent": [
    "# MathML.test.coffee\r\n\r\nimport {\r\n\tundef, pass, isEmpty, isArray, isString, OL,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {LOG} from '@jdeighan/base-utils/log'\r\nimport {setDebugging} from '@jdeighan/base-utils/debug'\r\nimport {UnitTester} from '@jdeighan/base-utils/utest'\r\n\r\nimport {mapMath} from '@jdeighan/mapper/mathml'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nclass MathTester extends UnitTester\r\n\r\n\ttransformValue: (str) ->\r\n\t\tassert isString(str), \"not a string: #{OL(str)}\"\r\n\t\treturn mapMath(str)\r\n\r\nmathTester = new MathTester()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nmathTester.equal 'expr X + 2', {\r\n\tcmd: 'expr'\r\n\tlAtoms: [\r\n\t\t{\r\n\t\t\ttype: 'ident'\r\n\t\t\tvalue: 'X'\r\n\t\t\t}\r\n\t\t{\r\n\t\t\ttype: 'op'\r\n\t\t\tvalue: '+'\r\n\t\t\t}\r\n\t\t{\r\n\t\t\ttype: 'number'\r\n\t\t\tvalue: '2'\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n\r\nmathTester.equal 'sub', {\r\n\t\tcmd: 'sub'\r\n\t\t}\r\n\r\nmathTester.equal 'sup', {\r\n\t\tcmd: 'sup'\r\n\t\t}\r\n\r\nmathTester.equal 'frac', {\r\n\t\tcmd: 'frac'\r\n\t\t}\r\n\r\nmathTester.equal 'SIGMA', {\r\n\t\tcmd: 'SIGMA'\r\n\t\tlAtoms: [\r\n\t\t\t{\r\n\t\t\t\ttype: 'op',\r\n\t\t\t\tvalue: '&#x03A3;',\r\n\t\t\t\t},\r\n\t\t\t]\r\n\t\t}\r\n\r\nmathTester.equal 'group', {\r\n\t\tcmd: 'group'\r\n\t\tlAtoms: [\r\n\t\t\t{type: 'op', value: '('}\r\n\t\t\t{type: 'op', value: ')'}\r\n\t\t\t]\r\n\t\t}\r\n\r\nmathTester.equal 'group {', {\r\n\t\tcmd: 'group'\r\n\t\tlAtoms: [\r\n\t\t\t{type: 'op', value: '{'}\r\n\t\t\t{type: 'op', value: '}'}\r\n\t\t\t]\r\n\t\t}\r\n\r\nmathTester.equal 'group { ]', {\r\n\t\tcmd: 'group'\r\n\t\tlAtoms: [\r\n\t\t\t{type: 'op', value: '{'}\r\n\t\t\t{type: 'op', value: ']'}\r\n\t\t\t]\r\n\t\t}\r\n"
  ]
}
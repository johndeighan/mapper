// Generated by CoffeeScript 2.7.0
  // TreeMapper.coffee
var hstr, threeSpaces,
  hasProp = {}.hasOwnProperty;

import {
  LOG,
  LOGVALUE,
  assert,
  croak,
  toTAML
} from '@jdeighan/base-utils';

import {
  setLogger,
  clearMyLogs,
  getMyLog
} from '@jdeighan/base-utils/log';

import {
  dbg,
  dbgEnter,
  dbgReturn
} from '@jdeighan/base-utils/debug';

import {
  unescapeStr,
  getOptions
} from '@jdeighan/base-utils/utils';

import {
  undef,
  pass,
  defined,
  notdefined,
  OL,
  rtrim,
  words,
  isString,
  isNumber,
  isFunction,
  isArray,
  isHash,
  isInteger,
  isEmpty,
  nonEmpty,
  isArrayOfStrings
} from '@jdeighan/coffee-utils';

import {
  toBlock
} from '@jdeighan/coffee-utils/block';

import {
  splitLine,
  indentLevel,
  indented,
  undented
} from '@jdeighan/coffee-utils/indent';

import {
  Mapper
} from '@jdeighan/mapper';

import {
  lineToParts,
  mapHereDoc
} from '@jdeighan/mapper/heredoc';

import {
  RunTimeStack
} from '@jdeighan/mapper/stack';

threeSpaces = "   ";

// ===========================================================================
//   class TreeMapper
//      - mapNonSpecial() returns mapped item (i.e. uobj) or undef
//   to use, override:
//      mapNode(hNode) - returns user object, def: returns hNode.str
//      mapCmd(hNode)
//      beginLevel(hUser, level)
//      visit(hNode, hUser, hParent, stack)
//      endVisit(hNode, hUser, hParent, stack)
//      endLevel(hUser, level) -
export var TreeMapper = class TreeMapper extends Mapper {
  constructor(hInput, hOptions = {}) {
    super(hInput, hOptions);
    this.hSpecialVisitTypes = {};
    this.registerVisitType('empty', this.visitEmptyLine, this.endVisitEmptyLine);
    this.registerVisitType('comment', this.visitComment, this.endVisitComment);
    this.registerVisitType('cmd', this.visitCmd, this.endVisitCmd);
    this.lMinuses = []; // used to adjust level in #ifdef and #ifndef
  }

  
    // ..........................................................
  registerVisitType(type, visiter, endVisiter) {
    this.hSpecialVisitTypes[type] = {visiter, endVisiter};
  }

  // ..........................................................
  // --- Will only receive non-special lines
  //        - adjust level if #ifdef or #ifndef was encountered
  //        - replace HEREDOCs
  //        - call mapNode() - returns str by default
  mapNonSpecial(hNode) {
    var level, newStr, srcLevel, str, uobj;
    dbgEnter("TreeMapper.mapNode", hNode);
    assert(notdefined(hNode.type), `hNode is ${OL(hNode)}`);
    ({str, level, srcLevel} = hNode);
    assert(nonEmpty(str), `empty str in ${OL(hNode)}`);
    assert(isInteger(srcLevel, {
      min: 0
    }), `Bad srcLevel in ${OL(hNode)}`);
    assert(isInteger(level, {
      min: 0
    }), `Bad level in ${OL(hNode)}`);
    assert(level === srcLevel, `levels not equal in ${OL(hNode)}`);
    if (this.adjustLevel(hNode)) {
      dbg(`hNode.level adjusted ${level} => ${hNode.level}`);
    } else {
      dbg("no level adjustment");
    }
    dbg("check for HEREDOC");
    if (str.indexOf('<<<') >= 0) {
      newStr = this.handleHereDocsInLine(str, srcLevel);
      dbg(`=> ${OL(newStr)}`);
      hNode.str = newStr;
    } else {
      dbg("no HEREDOCs");
    }
    // --- NOTE: mapNode() may return undef, meaning to ignore
    //     We must pass srcLevel since mapNode() may use fetch()
    uobj = this.mapNode(hNode);
    dbgReturn("TreeMapper.mapNode", uobj);
    return uobj;
  }

  // ..........................................................
  mapNode(hNode) {
    // --- returns str by default
    //     designed to override
    return hNode.str;
  }

  // ..........................................................
  handleHereDocsInLine(line, srcLevel) {
    var block, j, lNewParts, lParts, len, part, result, stopperFunc, str, uobj;
    // --- Indentation has been removed from line
    // --- Find each '<<<' and replace with result of mapHereDoc()
    dbgEnter("handleHereDocsInLine", line);
    assert(isString(line), "not a string");
    lParts = lineToParts(line);
    dbg('lParts', lParts);
    lNewParts = []; // to be joined to form new line
    for (j = 0, len = lParts.length; j < len; j++) {
      part = lParts[j];
      if (part === '<<<') {
        dbg("get HEREDOC lines until blank line");
        // --- block will be undented, blank line will be discarded
        stopperFunc = function(hNode) {
          return isEmpty(hNode.str);
        };
        // --- block will use TABs for indentation
        block = undented(this.getBlock(stopperFunc));
        this.fetch(); // skip the terminating line
        dbg('block', block);
        uobj = mapHereDoc(block);
        assert(defined(uobj), "mapHereDoc returned undef");
        dbg('mapped block', uobj);
        str = this.handleHereDoc(uobj, block);
        assert(isString(str), `str is ${OL(str)}`);
        lNewParts.push(str);
      } else {
        lNewParts.push(part); // keep as is
      }
    }
    result = lNewParts.join('');
    dbgReturn("handleHereDocsInLine", result);
    return result;
  }

  // ..........................................................
  handleHereDoc(uobj, block) {
    return uobj;
  }

  // ..........................................................
  isEmptyHereDocLine(str) {
    return str === '.';
  }

  // ..........................................................
  // --- We define commands 'ifdef' and 'ifndef'
  mapCmd(hNode) {
    var argstr, cmd, isEnv, keep, lSkipLines, name, ok, prefix, srcLevel, type, uobj, value;
    dbgEnter("TreeMapper.mapCmd", hNode);
    ({type, uobj, prefix, srcLevel} = hNode);
    assert(type === 'cmd', 'not a command');
    ({cmd, argstr} = uobj);
    dbg(`srcLevel = ${srcLevel}`);
    // --- Handle our commands, returning if found
    switch (cmd) {
      case 'ifdef':
      case 'ifndef':
        [name, value, isEnv] = this.splitDef(argstr);
        assert(defined(name), `Invalid ${cmd}, argstr=${OL(argstr)}`);
        ok = this.isDefined(name, value, isEnv);
        dbg(`ok = ${OL(ok)}`);
        keep = cmd === 'ifdef' ? ok : !ok;
        dbg(`keep = ${OL(keep)}`);
        if (keep) {
          dbg(`add ${srcLevel} to lMinuses`);
          this.lMinuses.push(srcLevel);
        } else {
          lSkipLines = this.skipLinesAtLevel(srcLevel);
          dbg(`Skip ${lSkipLines.length} lines`);
        }
        dbgReturn("TreeMapper.mapCmd", undef);
        return undef;
    }
    dbg("call super");
    uobj = super.mapCmd(hNode);
    dbgReturn("TreeMapper.mapCmd", uobj);
    return uobj;
  }

  // ..........................................................
  skipLinesAtLevel(srcLevel) {
    var block, stopperFunc;
    // --- srcLevel is the level of #ifdef or #ifndef
    //     don't discard the end line
    dbgEnter("TreeMapper.skipLinesAtLevel", srcLevel);
    stopperFunc = (hNode) => {
      return hNode.srcLevel <= srcLevel;
    };
    block = this.getBlock(stopperFunc);
    dbgReturn("TreeMapper.skipLinesAtLevel", block);
    return block;
  }

  // ..........................................................
  fetchBlockAtLevel(srcLevel) {
    var block, stopperFunc;
    // --- srcLevel is the level of enclosing cmd/tag
    //     don't discard the end line
    dbgEnter("TreeMapper.fetchBlockAtLevel", srcLevel);
    stopperFunc = (hNode) => {
      return (hNode.srcLevel <= srcLevel) && nonEmpty(hNode.str);
    };
    block = undented(this.getBlock(stopperFunc));
    dbgReturn("TreeMapper.fetchBlockAtLevel", block);
    return block;
  }

  // ..........................................................
  adjustLevel(hNode) {
    var adjust, i, j, lNewMinuses, len, newLevel, ref, srcLevel;
    dbgEnter("adjustLevel", hNode);
    srcLevel = hNode.srcLevel;
    dbg("srcLevel", srcLevel);
    assert(isInteger(srcLevel, {
      min: 0
    }), `level is ${OL(srcLevel)}`);
    // --- Calculate the needed adjustment and new level
    dbg("lMinuses", this.lMinuses);
    lNewMinuses = [];
    adjust = 0;
    ref = this.lMinuses;
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (srcLevel > i) {
        adjust += 1;
        lNewMinuses.push(i);
      }
    }
    this.lMinuses = lNewMinuses;
    dbg('new lMinuses', this.lMinuses);
    if (adjust === 0) {
      dbgReturn("adjustLevel", false);
      return false;
    }
    assert(srcLevel >= adjust, `srcLevel=${srcLevel}, adjust=${adjust}`);
    newLevel = srcLevel - adjust;
    // --- Make adjustments to hNode
    hNode.level = newLevel;
    dbg(`level adjusted ${srcLevel} => ${newLevel}`);
    dbgReturn("adjustLevel", true);
    return true;
  }

  // ..........................................................
  splitDef(argstr) {
    var _, env, isEnv, lMatches, name, value;
    lMatches = argstr.match(/^(env\.)?([A-Za-z_][A-Za-z0-9_]*)\s*(.*)$/);
    if (lMatches) {
      [_, env, name, value] = lMatches;
      isEnv = nonEmpty(env) ? true : false;
      if (isEmpty(value)) {
        value = undef;
      }
      return [name, value, isEnv];
    } else {
      return [undef, undef, undef];
    }
  }

  // ..........................................................
  // ..........................................................
  isDefined(name, value, isEnv) {
    if (isEnv) {
      if (defined(value)) {
        return process.env[name] === value;
      } else {
        return defined(process.env[name]);
      }
    } else {
      if (defined(value)) {
        return this.getConst(name) === value;
      } else {
        return defined(this.getConst(name));
      }
    }
    return true;
  }

  // ..........................................................
  whichCmd(uobj) {
    if (isHash(uobj) && uobj.hasOwnProperty('cmd')) {
      return uobj.cmd;
    }
    return undef;
  }

  // ..........................................................
  walk(hOptions = {}) {
    var add, addItem, diff, doBeginLevel, doBeginWalk, doEndLevel, doEndVisit, doEndWalk, doVisit, hGlobalUser, hNode, hPrevNode, hUser, i, includeUserHash, lLines, level, log, logNodes, ref, stack, str;
    // --- Valid options:
    //        logNodes
    //        includeUserHash - include user hash in the logged nodes
    //     returns an array, normally strings
    dbgEnter("TreeMapper.walk", hOptions);
    // --- These are needed by local functions
    ({logNodes, includeUserHash} = getOptions(hOptions));
    lLines = []; // --- resulting output
    
    // .......................................................
    //     Local Functions
    // .......................................................
    log = (level, text, hUser) => {
      if (!logNodes) {
        return;
      }
      dbgEnter("log", level, text, hUser);
      LOG(toBlock(indented([text], level, threeSpaces)));
      if (includeUserHash && defined(hUser)) {
        if (isEmpty(hUser)) {
          LOG("hUser = {}");
        } else {
          LOGVALUE('hUser', hUser);
          LOG("");
        }
      }
      dbgReturn("log");
    };
    // .......................................................
    add = (item) => {
      var j, len, subitem;
      // --- item can be any type of object
      dbgEnter("add", item);
      assert(defined(item), "item is undef");
      if (isArray(item)) {
        dbg("item is an array");
        for (j = 0, len = item.length; j < len; j++) {
          subitem = item[j];
          if (defined(subitem)) {
            lLines.push(subitem);
          }
        }
      } else {
        dbg(`add item ${OL(item)}`);
        lLines.push(item);
      }
      dbgReturn("add");
    };
    // .......................................................
    addItem = (item, level) => {
      assert(!isArray(item), "item is an array");
      if (isString(item)) {
        return lLines.push(indented(item, level));
      } else {
        return lLines.push(item);
      }
    };
    // .......................................................
    doBeginWalk = (hUser) => {
      var text;
      dbgEnter("doBeginWalk");
      log(0, "BEGIN WALK", hGlobalUser);
      text = this.beginWalk(hUser);
      if (defined(text)) {
        add(text);
      }
      dbgReturn("doBeginWalk");
    };
    // .......................................................
    doEndWalk = (hUser) => {
      var text;
      dbgEnter("doEndWalk");
      log(0, "END WALK", hGlobalUser);
      text = this.endWalk(hUser);
      if (defined(text)) {
        add(text);
      }
      dbgReturn("doEndWalk");
    };
    // .......................................................
    doBeginLevel = (hUser, level) => {
      var text;
      dbgEnter("doBeginLevel");
      log(level, `BEGIN LEVEL ${level}`, hUser);
      text = this.beginLevel(hUser, level);
      if (defined(text)) {
        add(text);
      }
      dbgReturn("doBeginLevel");
    };
    // .......................................................
    doEndLevel = (hUser, level) => {
      var text;
      dbgEnter("doEndLevel");
      log(level, `END LEVEL ${level}`, hUser);
      text = this.endLevel(hUser, level);
      if (defined(text)) {
        add(text);
      }
      dbgReturn("doEndLevel");
    };
    // .......................................................
    doVisit = (hNode) => {
      var hUser, level, str, text, type, uobj;
      // --- visit the node
      ({type, hUser, level, str, uobj} = hNode);
      log(level, `VISIT ${level} ${OL(str)}`, hUser);
      if (defined(type)) {
        dbg(`type = ${type}`);
        text = this.visitSpecial(type, hNode, hUser, stack);
      } else {
        dbg("no type");
        text = this.visit(hNode, hUser, hUser._parent, stack);
      }
      if (defined(text)) {
        add(text);
      }
    };
    // .......................................................
    doEndVisit = (hNode) => {
      var hUser, level, str, text, type, uobj;
      // --- end visit the node
      ({type, hUser, level, str, uobj} = hNode);
      log(level, `END VISIT ${level} ${OL(str)}`, hUser);
      if (defined(type)) {
        dbg(`type = ${type}`);
        text = this.endVisitSpecial(type, hNode, hUser, stack);
      } else {
        dbg("no type");
        text = this.endVisit(hNode, hUser, hUser._parent, stack);
      }
      if (defined(text)) {
        add(text);
      }
    };
    // .......................................................
    //     main body of walk()
    // .......................................................

    // --- Initialize local state
    stack = new RunTimeStack(); // --- a stack of Node objects
    hGlobalUser = {}; // --- hParent for level 0 nodes
    doBeginWalk(hGlobalUser);
    // --- Iterate over all input lines
    dbg("getting lines");
    i = 0;
    ref = this.all();
    for (hNode of ref) {
      // --- Log input lines for debugging
      dbg(`hNode[${i}]`, hNode);
      ({level, str} = hNode); // unpack node
      if (i === 0) {
        // --- The first node is a special case because
        //        - it must be at level 0
        //        - its parent is the global user hash
        //     handle it, then continue to the 2nd node (if any)
        assert(level === 0, `first node at level ${level}, not 0`);
        hNode.hUser = {
          _parent: hGlobalUser
        };
        doBeginLevel(hGlobalUser, 0);
        doVisit(hNode);
        stack.push(hNode);
        dbg('stack', stack);
        i = 1;
        continue; // restart the loop
      }
      
      // --- add user hash
      hUser = hNode.hUser = {
        _parent: stack.TOS().hUser
      };
      // --- At this point, the previous node is on top of stack
      // --- End any levels > level
      while (stack.TOS().level > level) {
        hPrevNode = stack.pop();
        dbg("pop node", hPrevNode);
        doEndVisit(hPrevNode);
        doEndLevel(hPrevNode.hUser, hPrevNode.level);
      }
      diff = level - stack.TOS().level;
      // --- This is a consequence of the while loop condition
      assert(diff >= 0, "Can't happen");
      // --- This shouldn't happen because it would be an extension line
      assert(diff < 2, "Shouldn't happen");
      if (diff === 0) {
        hPrevNode = stack.TOS();
        doEndVisit(hPrevNode);
        doVisit(hNode);
        stack.replaceTOS(hNode);
      } else if (diff === 1) {
        doBeginLevel(hUser, level);
        doVisit(hNode);
        stack.push(hNode);
      }
      i += 1;
    }
    while (stack.size() > 0) {
      hPrevNode = stack.pop();
      dbg("pop node", hPrevNode);
      doEndVisit(hPrevNode);
      doEndLevel(hUser, hPrevNode.level);
    }
    doEndWalk(hGlobalUser);
    dbgReturn("TreeMapper.walk", lLines);
    return lLines;
  }

  // ..........................................................
  // These are designed to override
  // ..........................................................
  beginWalk(hUser) {
    return undef;
  }

  // ..........................................................
  beginLevel(hUser, level) {
    return undef;
  }

  // ..........................................................
  startLevel(hUser, level) {
    return croak("There is no startLevel() method - use beginLevel()");
  }

  // ..........................................................
  endLevel(hUser, level) {
    return undef;
  }

  // ..........................................................
  endWalk(hUser) {
    return undef;
  }

  // ..........................................................
  visit(hNode, hUser, hParent, stack) {
    var level, uobj;
    dbgEnter("visit", hNode, hUser);
    ({uobj, level} = hNode);
    if (isString(uobj) && (level > 0)) {
      uobj = indented(uobj, level, this.oneIndent);
    }
    dbgReturn("visit", uobj);
    return uobj;
  }

  // ..........................................................
  endVisit(hNode, hUser, hParent, stack) {
    dbgEnter("endVisit", hNode, hUser);
    dbgReturn("endVisit", undef);
    return undef;
  }

  // ..........................................................
  visitEmptyLine(hNode, hUser, hParent, stack) {
    dbg("in TreeMapper.visitEmptyLine()");
    return '';
  }

  // ..........................................................
  endVisitEmptyLine(hNode, hUser, hParent) {
    dbg("in TreeMapper.endVisitEmptyLine()");
    return undef;
  }

  // ..........................................................
  visitComment(hNode, hUser, hParent) {
    var level, result, uobj;
    dbgEnter("visitComment", hNode, hUser, hParent);
    ({uobj, level} = hNode);
    assert(isString(uobj), "uobj not a string");
    result = indented(uobj, level, this.oneIndent);
    dbgReturn("visitComment", result);
    return result;
  }

  // ..........................................................
  endVisitComment(hNode, hUser, hParent) {
    dbg("in TreeMapper.endVisitComment()");
    return undef;
  }

  // ..........................................................
  visitCmd(hNode, hUser, hParent) {
    var argstr, cmd, level;
    dbg("in TreeMapper.visitCmd() - ERROR");
    ({cmd, argstr, level} = hNode.uobj);
    // --- NOTE: built in commands, e.g. #ifdef
    //           are handled during the mapping phase
    return croak(`Unknown cmd: '${cmd} ${argstr}'`);
  }

  // ..........................................................
  endVisitCmd(hNode, hUser, hParent) {
    dbg("in TreeMapper.endVisitCmd()");
    return undef;
  }

  // ..........................................................
  visitSpecial(type, hNode, hUser, stack) {
    var func, result, visiter;
    dbgEnter("TreeMapper.visitSpecial", type, hNode, hUser);
    visiter = this.hSpecialVisitTypes[type].visiter;
    assert(defined(visiter), `No such type: ${OL(type)}`);
    func = visiter.bind(this);
    assert(isFunction(func), "not a function");
    result = func(hNode, hUser, hUser._parent, stack);
    dbgReturn("TreeMapper.visitSpecial", result);
    return result;
  }

  // ..........................................................
  endVisitSpecial(type, hNode, hUser, stack) {
    var func;
    func = this.hSpecialVisitTypes[type].endVisiter.bind(this);
    return func(hNode, hUser, hUser._parent, stack);
  }

  // ..........................................................
  getBlock(hOptions = {}) {
    var block, lLines, result;
    // --- Valid options:
    //        logNodes
    //        includeUserHash
    dbgEnter("getBlock");
    lLines = this.walk(hOptions);
    if (isArrayOfStrings(lLines)) {
      block = toBlock(lLines);
    } else {
      block = lLines;
    }
    dbg('block', block);
    result = this.finalizeBlock(block);
    dbgReturn("getBlock", result);
    return result;
  }

};

// ---------------------------------------------------------------------------
// UTILITIES
// ---------------------------------------------------------------------------
export var trace = function(hInput) {
  var mapper, result;
  dbgEnter("trace", hInput);
  mapper = new TreeMapper(hInput);
  clearMyLogs();
  mapper.walk({
    logNodes: true
  });
  result = getMyLog();
  dbgReturn("trace", result);
  return result;
};

// ---------------------------------------------------------------------------
hstr = function(h) {
  var hNew, key, value;
  // --- Don't include the _parent pointer
  //     if an object has a toDebugStr() method, use that
  hNew = {};
  for (key in h) {
    if (!hasProp.call(h, key)) continue;
    value = h[key];
    if (key !== '_parent') {
      hNew[key] = value;
    }
  }
  if (isEmpty(hNew)) {
    return '';
  } else {
    return OL(hNew);
  }
};

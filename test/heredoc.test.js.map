{
  "version": 3,
  "file": "heredoc.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\heredoc.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# heredoc.test.coffee\n\nimport {\n\tundef, isString, OL, defined, notdefined, toArray,\n\tCWS, extractMatches,\n\t} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {LOG} from '@jdeighan/base-utils/log'\nimport {\n\tdbg, dbgEnter, dbgReturn, setDebugging,\n\t} from '@jdeighan/base-utils/debug'\nimport {UnitTester, equal} from '@jdeighan/base-utils/utest'\nimport {undented} from '@jdeighan/base-utils/indent'\nimport {\n\tfirstLine, remainingLines,\n\t} from '@jdeighan/coffee-utils/block'\n\nimport {\n\tlineToParts, mapHereDoc, addHereDocType, BaseHereDoc,\n\t} from '@jdeighan/mapper/heredoc'\n\n# ---------------------------------------------------------------------------\n\nequal lineToParts('this is not a heredoc'), [\n\t'this is not a heredoc'\n\t]\n\nequal lineToParts('this <<< is <<< heredoc'), [\n\t'this '\n\t'<<<'\n\t' is '\n\t'<<<'\n\t' heredoc'\n\t]\n\nequal lineToParts('<<< is <<< heredoc'), [\n\t''\n\t'<<<'\n\t' is '\n\t'<<<'\n\t' heredoc'\n\t]\n\nequal lineToParts('this <<< is <<<'), [\n\t'this '\n\t'<<<'\n\t' is '\n\t'<<<'\n\t''\n\t]\n\nequal lineToParts('<<< is <<<'), [\n\t''\n\t'<<<'\n\t' is '\n\t'<<<'\n\t''\n\t]\n\nequal lineToParts('<<<'), [\n\t''\n\t'<<<'\n\t''\n\t]\n\nequal lineToParts('<<<<<<'), [\n\t''\n\t'<<<'\n\t''\n\t'<<<'\n\t''\n\t]\n\n# ---------------------------------------------------------------------------\n\nclass HereDocTester extends UnitTester\n\n\ttransformValue: (block) ->\n\n\t\treturn mapHereDoc(block)\n\ntester = new HereDocTester()\n\n# ---------------------------------------------------------------------------\n\nequal mapHereDoc(\"\"\"\n\t\tabc\n\t\tdef\n\t\t\"\"\"),\n\t\t'\"abc\\\\ndef\"'\n\n# ---------------------------------------------------------------------------\n\nequal mapHereDoc(\"\"\"\n\t\t===\n\t\tabc\n\t\tdef\n\t\t\"\"\"),\n\t\t'\"abc\\\\ndef\"'\n\n# ---------------------------------------------------------------------------\n\nequal mapHereDoc(\"\"\"\n\t\t...\n\t\tabc\n\t\tdef\n\t\t\"\"\"),\n\t\t'\"abc def\"'\n\n# ---------------------------------------------------------------------------\n\nequal mapHereDoc(\"\"\"\n\t\t---\n\t\ta: 1\n\t\tb: 2\n\t\t\"\"\"),\n\t\t'{\"a\":1,\"b\":2}'\n\n# ---------------------------------------------------------------------------\n\nequal mapHereDoc(\"\"\"\n\t\t---\n\t\t- a\n\t\t- b\n\t\t\"\"\"),\n\t\t'[\"a\",\"b\"]'\n\n# ------------------------------------------------------------------------\n# Default heredoc type is a block\n\ntester.equal \"\"\"\n\t\tthis is a\n\t\tblock of text\n\t\t\"\"\",\n\t\t'\"this is a\\\\nblock of text\"'\n\n# ------------------------------------------------------------------------\n# Make explicit that the heredoc type is a block\n\ntester.equal \"\"\"\n\t\t===\n\t\tthis is a\n\t\tblock of text\n\t\t\"\"\",\n\t\t'\"this is a\\\\nblock of text\"'\n\n# ------------------------------------------------------------------------\n# One Line block\n\ntester.equal \"\"\"\n\t\t...this is a\n\t\tline of text\n\t\t\"\"\",\n\t\t'\"this is a line of text\"'\n\n# ------------------------------------------------------------------------\n# One Line block\n\ntester.equal \"\"\"\n\t\t...\n\t\tthis is a\n\t\tline of text\n\t\t\"\"\",\n\t\t'\"this is a line of text\"'\n\n# ---------------------------------------------------------------------------\n# Test creating new heredoc types\n\nclass MatrixHereDoc extends BaseHereDoc\n\n\tmapToCielo: (block) ->\n\t\t# --- if block starts with a digit\n\t\tdbgEnter \"MatrixHereDoc.mapToCielo\", block\n\t\tif notdefined(block.match(/^\\s*\\d/s))\n\t\t\tdbgReturn \"MatrixHereDoc.mapToCielo\", undef\n\t\t\treturn undef\n\t\tlArray = []\n\t\tfor line in toArray(block)\n\t\t\tlArray.push extractMatches(line, /\\d+/g, parseInt)\n\t\tresult = JSON.stringify(lArray)\n\t\tdbgReturn \"MatrixHereDoc.mapToCielo\", result\n\t\treturn result\n\naddHereDocType 'matrix', new MatrixHereDoc()\n\ntester.equal \"\"\"\n\t\t1 2 3\n\t\t2 4 6\n\t\t\"\"\",\n\t\t'[[1,2,3],[2,4,6]]'\n\n# ------------------------------------------------------------------------\n# Test creating a new heredoc type by overriding mapToString\n\nclass UCHereDoc extends BaseHereDoc\n\n\tmapToCielo: (block) ->\n\n\t\tdbgEnter \"UCHereDoc.mapToCielo\", block\n\t\tif (block.indexOf('^^^') != 0)\n\t\t\tdbgReturn \"UCHereDoc.mapToCielo\", undef\n\t\t\treturn undef\n\n\t\tblock = block.substring(4).toUpperCase()\n\t\tdbg 'block', block\n\t\tresult = JSON.stringify(block)\n\t\tdbgReturn \"UCHereDoc.mapToCielo\", result\n\t\treturn result\n\naddHereDocType 'upper case', new UCHereDoc()\n\ntester.equal \"\"\"\n\t\t^^^\n\t\tThis is a\n\t\tblock of text\n\t\t\"\"\",\n\t\t'\"THIS IS A\\\\nBLOCK OF TEXT\"'\n\n# ---------------------------------------------------------------------------\n# --- test creating a custom HEREDOC section\n#\n#     e.g. with header line ***,\n#     we'll create an upper-cased single line string\n\nclass UCHereDoc2 extends BaseHereDoc\n\n\tmapToCielo: (block) ->\n\n\t\tdbgEnter \"UCHereDoc2.mapToCielo\", block\n\t\tif (firstLine(block) != '***')\n\t\t\tdbgReturn \"UCHereDoc2.mapToCielo\", undef\n\t\t\treturn undef\n\n\t\tblock = CWS(remainingLines(block).toUpperCase())\n\t\tdbg 'block', block\n\t\tresult = JSON.stringify(block)\n\t\tdbgReturn \"UCHereDoc2.mapToCielo\", result\n\t\treturn result\n\naddHereDocType 'upper case 2', new UCHereDoc2()\n\n# ---------------------------------------------------------------------------\n\ntester.equal \"\"\"\n\t\t***\n\t\tselect ID,Name\n\t\tfrom Users\n\t\t\"\"\",\n\t\t'\"SELECT ID,NAME FROM USERS\"'\n\n# ---------------------------------------------------------------------------\n# TAML block\n\ntester.equal \"\"\"\n\t\t---\n\t\t- abc\n\t\t- def\n\t\t\"\"\",\n\t\t'[\"abc\",\"def\"]'\n\n# ---------------------------------------------------------------------------\n# TAML-like block, but actually a block\n\ntester.equal \"\"\"\n\t\t===\n\t\t---\n\t\t- abc\n\t\t- def\n\t\t\"\"\",\n\t\t'\"---\\\\n- abc\\\\n- def\"'\n\n# ---------------------------------------------------------------------------\n# TAML block 2\n\ntester.equal \"\"\"\n\t\t---\n\t\t-\n\t\t\tlabel: Help\n\t\t\turl: /help\n\t\t-\n\t\t\tlabel: Books\n\t\t\turl: /books\n\t\t\"\"\",\n\t\t'[{\"label\":\"Help\",\"url\":\"/help\"},{\"label\":\"Books\",\"url\":\"/books\"}]'\n\n# ---------------------------------------------------------------------------\n\nclass HereDocReplacer extends UnitTester\n\n\ttransformValue: (block) ->\n\t\tlNewParts = for part in lineToParts(firstLine(block))\n\t\t\tif part == '<<<'\n\t\t\t\tmapHereDoc(undented(remainingLines(block)))\n\t\t\telse\n\t\t\t\tpart    # keep as is\n\n\t\tresult = lNewParts.join('')\n\t\treturn result\n\nreplacer = new HereDocReplacer()\n\n# ---------------------------------------------------------------------------\n\nreplacer.equal \"\"\"\n\t\tTopMenu lItems={<<<}\n\t\t\t---\n\t\t\t-\n\t\t\t\tlabel: Help\n\t\t\t\turl: /help\n\t\t\t-\n\t\t\t\tlabel: Books\n\t\t\t\turl: /books\n\t\t\"\"\", \"\"\"\n\t\tTopMenu lItems={[{\"label\":\"Help\",\"url\":\"/help\"},{\"label\":\"Books\",\"url\":\"/books\"}]}\n\t\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\nreplacer.equal \"\"\"\n\t\t<TopMenu lItems={<<<}>\n\t\t\t---\n\t\t\t-\n\t\t\t\tlabel: Help\n\t\t\t\turl: /help\n\t\t\t-\n\t\t\t\tlabel: Books\n\t\t\t\turl: /books\n\t\t\"\"\", \"\"\"\n\t\t<TopMenu lItems={[{\"label\":\"Help\",\"url\":\"/help\"},{\"label\":\"Books\",\"url\":\"/books\"}]}>\n\t\t\"\"\"\n"
  ]
}
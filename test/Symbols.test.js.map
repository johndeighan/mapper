{
  "version": 3,
  "file": "Symbols.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\Symbols.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Symbols.test.coffee\n\nimport {undef, OL, words, isEmpty} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {LOG} from '@jdeighan/base-utils/log'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport {UnitTester, equal} from '@jdeighan/base-utils/utest'\nimport {mydir, mkpath} from '@jdeighan/coffee-utils/fs'\nimport {joinBlocks} from '@jdeighan/coffee-utils/block'\n\nimport {\n\tgetAvailSymbols, getAvailSymbolsFrom,\n\tgetNeededSymbols, buildImportList,\n\t} from '@jdeighan/mapper/symbols'\n\n# ---------------------------------------------------------------------------\n# Contents of .symbols:\n# fs\n# \t*fs exists readFile\n#\n# @jdeighan/base-utils/fs\n# \tmkpath slurp barf\n#\n# @jdeighan/coffee-utils\n# \tsay undef\n#\n# @jdeighan/coffee-utils/fs\n# \tmydir\n#\n# @jdeighan/coffee-utils/log\n# \tlog/logger\n\nhSymbols = {\n\tbarf: {\n\t\tlib: '@jdeighan/base-utils/fs',\n\t\t},\n\texists: {\n\t\tlib: 'fs',\n\t\t},\n\tfs: {\n\t\tisDefault: true,\n\t\tlib: 'fs',\n\t\t},\n\tlogger: {\n\t\tlib: '@jdeighan/coffee-utils/log',\n\t\tsrc: 'log',\n\t\t},\n\tmkpath: {\n\t\tlib: '@jdeighan/base-utils/fs',\n\t\t},\n\tmydir: {\n\t\tlib: '@jdeighan/coffee-utils/fs',\n\t\t},\n\treadFile: {\n\t\tlib: 'fs',\n\t\t},\n\tsay: {\n\t\tlib: '@jdeighan/coffee-utils',\n\t\t},\n\tslurp: {\n\t\tlib: '@jdeighan/base-utils/fs',\n\t\t},\n\tundef: {\n\t\tlib: '@jdeighan/coffee-utils',\n\t\t},\n\t}\n\nequal getAvailSymbolsFrom(\"./test/.symbols\"), hSymbols\nequal getAvailSymbols(import.meta.url), hSymbols\n\n# ---------------------------------------------------------------------------\n\nclass SymbolsTester extends UnitTester\n\n\ttransformValue: (text) ->\n\t\treturn getNeededSymbols(text)\n\nsymTester = new SymbolsTester()\n\n# ---------------------------------------------------------------------------\n\nequal getNeededSymbols(\"\"\"\n\tname = 'John'\n\t\"\"\"), []\n\nequal getNeededSymbols(\"\"\"\n\tx = 23\n\ty = x + 5\n\t\"\"\"), []\n\nequal getNeededSymbols(\"\"\"\n\tx = 23\n\ty = x + 5\n\t\"\"\"), []\n\nequal getNeededSymbols(\"\"\"\n\tx = z\n\ty = x + 5\n\t\"\"\"), ['z']\n\nequal getNeededSymbols(\"\"\"\n\tx = myfunc(4)\n\ty = x + 5\n\t\"\"\"), ['myfunc']\n\nequal getNeededSymbols(\"\"\"\n\timport {z} from 'somewhere'\n\tx = z\n\ty = x + 5\n\t\"\"\"), []\n\nequal getNeededSymbols(\"\"\"\n\timport {myfunc} from 'somewhere'\n\tx = myfunc(4)\n\ty = x + 5\n\t\"\"\"), []\n\n# ---------------------------------------------------------------------------\n#    Test auto-import\n# ---------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# --- make sure it's using the testing .symbols file\n\nhSymbols = getAvailSymbols(import.meta.url)\nequal hSymbols, {\n\t\tfs:      {lib: 'fs', isDefault: true}\n\t\texists:  {lib: 'fs'}\n\t\treadFile:{lib: 'fs'}\n\t\tbarf:    {lib: '@jdeighan/base-utils/fs'}\n\t\tlogger:  {lib: '@jdeighan/coffee-utils/log', src: 'log'}\n\t\tmkpath:  {lib: '@jdeighan/base-utils/fs'}\n\t\tmydir:   {lib: '@jdeighan/coffee-utils/fs'}\n\t\tsay:     {lib: '@jdeighan/coffee-utils'}\n\t\tslurp:   {lib: '@jdeighan/base-utils/fs'}\n\t\tundef:   {lib: '@jdeighan/coffee-utils'}\n\t\t}\n\n# ----------------------------------------------------------------------------\n\n(() ->\n\ttext = \"\"\"\n\t\t\tx = 42\n\t\t\tsay \"Answer is 42\"\n\t\t\t\"\"\"\n\n\tlImports = [\n\t\t\"import {say} from '@jdeighan/coffee-utils'\",\n\t\t\"import {slurp} from '#jdeighan/base-utils/fs'\",\n\t\t]\n\n\tequal joinBlocks(lImports..., text), \"\"\"\n\t\t\timport {say} from '@jdeighan/coffee-utils'\n\t\t\timport {slurp} from '#jdeighan/base-utils/fs'\n\t\t\tx = 42\n\t\t\tsay \"Answer is 42\"\n\t\t\t\"\"\"\n\t)()\n\n# ----------------------------------------------------------------------------\n\n(() ->\n\tequal buildImportList([]), {lNotFound: [], lImportStmts: []}\n\n\tlMissing = words('say undef logger slurp barf fs')\n\tequal buildImportList(lMissing, import.meta.url), {\n\t\tlNotFound: []\n\t\tlImportStmts: [\n\t\t\t\"import fs from 'fs'\"\n\t\t\t\"import {slurp,barf} from '@jdeighan/base-utils/fs'\"\n\t\t\t\"import {say,undef} from '@jdeighan/coffee-utils'\"\n\t\t\t\"import {log as logger} from '@jdeighan/coffee-utils/log'\"\n\t\t\t],\n\t\t}\n\n\t)()\n"
  ]
}
{
  "version": 3,
  "file": "ASTWalker.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\ASTWalker.coffee"
  ],
  "names": [],
  "mappings": ";AAAkB;AAAA,IAAA,YAAA,EAAA,UAAA;EAAA;;AAElB,OAAA;EACC,KADD;EACQ,IADR;EACc,OADd;EACuB,UADvB;EACmC,EADnC;EACuC,KADvC;EAC8C,QAD9C;EAEC,QAFD;EAEW,QAFX;EAEqB,OAFrB;EAE8B,MAF9B;EAEsC,eAFtC;EAGC,OAHD;EAGU,UAHV;CAAA,MAAA;;AAKA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA;;AACA,OAAA;EAAQ,GAAR;EAAa,QAAb;EAAuB,iBAAvB;CAAA,MAAA;;AACA,OAAA;EACC,GADD;EACM,QADN;EACgB,SADhB;CAAA,MAAA;;AAGA,OAAA;EAAQ,IAAR;EAAc,KAAd;CAAA,MAAA;;AACA,OAAA;EAAQ,QAAR;EAAkB,MAAlB;CAAA,MAAA;;AACA,OAAA;EAAQ,QAAR;CAAA,MAAA;;AAEA,OAAA;EAAQ,eAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,OAAR;CAAA,MAAA;;AAEA,iBAAA,CAAkB,KAAlB;;AAEA,YAAA,GAAe,QAAA,CAAS,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAAA,CAAT,EArBG;;;AAgGlB,UAAA,GAAa,CAAC,CAAD,EAAI,KAAJ,CAAA,GAAA;AAEb,MAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA;EAAC,KAAA,uCAAA;;IACC,OAAO,CAAC,CAAC,GAAD;EADT;EAEA,KAAA,QAAA;;;IACC,IAAG,OAAA,CAAQ,KAAR,CAAH;MACC,IAAG,OAAA,CAAQ,KAAR,CAAH;QACC,KAAA,yCAAA;;UACC,IAAG,MAAA,CAAO,IAAP,CAAH;YACC,UAAA,CAAW,IAAX,EAAiB,KAAjB,EADD;;QADD,CADD;OAAA,MAIK,IAAI,OAAO,KAAP,KAAgB,QAApB;QACJ,UAAA,CAAW,KAAX,EAAkB,KAAlB,EADI;OALN;;EADD;AAJY,EAhGK;;;;AAiHlB,OAAA,IAAa,YAAN,MAAA,UAAA;EAEN,WAAa,CAAC,IAAD,CAAA,EAAA;;IAGZ,QAAA,CAAS,WAAT,EAAsB,IAAtB;IAEA,IAAG,QAAA,CAAS,IAAT,CAAH;MACC,IAAC,CAAA,GAAD,GAAO,eAAA,CAAgB,IAAhB,EADR;KAAA,MAAA;MAGC,IAAC,CAAA,GAAD,GAAO,KAHR;KAJF;;IAUE,IAAG,MAAA,CAAO,IAAC,CAAA,GAAR,CAAH;MACC,GAAA,CAAI,2CAAJ;MACA,IAAC,CAAA,GAAD,GAAO,CAAC,IAAC,CAAA,GAAF,EAFR;;IAGA,MAAA,CAAO,eAAA,CAAgB,IAAC,CAAA,GAAjB,CAAP,EAA8B,CAAA,qBAAA,CAAA,CAAwB,EAAA,CAAG,IAAC,CAAA,GAAJ,CAAxB,CAAA,CAA9B,EAbF;;IAgBE,IAAC,CAAA,gBAAD,GAAoB;IACpB,IAAC,CAAA,gBAAD,GAAoB;IACpB,IAAC,CAAA,YAAD,GAAoB;IACpB,IAAC,CAAA,eAAD,GAAoB;IAEpB,IAAC,CAAA,OAAD,GAAW,IAAI,OAAJ,CAAA;IACX,SAAA,CAAU,WAAV;EAvBY,CAAd;;;EA2BC,SAAW,CAAC,IAAD,EAAO,GAAP,CAAA;IAEV,QAAA,CAAS,WAAT,EAAsB,IAAtB,EAA4B,GAA5B;IACA,IAAC,CAAA,KAAD,CAAO,IAAP;IACA,IAAG,IAAC,CAAA,gBAAgB,CAAC,QAAlB,CAA2B,IAA3B,CAAH;MACC,GAAA,CAAI,CAAA,kBAAA,CAAA,CAAqB,IAArB,CAAA,CAAJ,EADD;KAAA,MAAA;MAGC,IAAC,CAAA,gBAAgB,CAAC,IAAlB,CAAuB,IAAvB,EAHD;;IAIA,IAAC,CAAA,OAAO,CAAC,SAAT,CAAmB,IAAnB;IACA,SAAA,CAAU,WAAV;EATU,CA3BZ;;;EAyCC,SAAW,CAAC,IAAD,EAAO,GAAP,CAAA;IAEV,QAAA,CAAS,WAAT,EAAsB,IAAtB;IACA,IAAC,CAAA,KAAD,CAAO,IAAP;IACA,IAAG,IAAC,CAAA,gBAAgB,CAAC,QAAlB,CAA2B,IAA3B,CAAH;MACC,GAAA,CAAI,CAAA,kBAAA,CAAA,CAAqB,IAArB,CAAA,CAAJ,EADD;KAAA,MAAA;MAGC,IAAC,CAAA,gBAAgB,CAAC,IAAlB,CAAuB,IAAvB,EAHD;;IAIA,SAAA,CAAU,WAAV;EARU,CAzCZ;;;EAsDC,UAAY,CAAC,IAAD,EAAO,QAAM,CAAA,CAAb,CAAA;IAEX,QAAA,CAAS,YAAT,EAAuB,IAAvB;IACA,IAAC,CAAA,KAAD,CAAO,IAAP;IACA,IAAG,IAAC,CAAA,OAAO,CAAC,aAAT,CAAA,CAAH;MACC,IAAC,CAAA,OAAO,CAAC,SAAT,CAAmB,IAAnB,EADD;KAAA,MAAA;MAGC,IAAC,CAAA,OAAO,CAAC,GAAT,CAAa,IAAb,EAHD;;IAIA,SAAA,CAAU,YAAV;EARW,CAtDb;;;EAmEC,OAAS,CAAC,IAAD,EAAO,QAAM,CAAA,CAAb,CAAA;IAER,QAAA,CAAS,SAAT,EAAoB,IAApB;IACA,IAAC,CAAA,KAAD,CAAO,IAAP;IACA,IAAG,CAAE,IAAC,CAAA,YAAY,CAAC,QAAd,CAAuB,IAAvB,CAAL;MACC,IAAC,CAAA,YAAY,CAAC,IAAd,CAAmB,IAAnB,EADD;;IAEA,IAAG,CAAE,IAAC,CAAA,OAAO,CAAC,GAAT,CAAa,IAAb,CAAF,IACE,CAAE,IAAC,CAAA,eAAe,CAAC,QAAjB,CAA0B,IAA1B,CADP;MAEC,IAAC,CAAA,eAAe,CAAC,IAAjB,CAAsB,IAAtB,EAFD;;IAGA,SAAA,CAAU,SAAV;EATQ,CAnEV;;;EAiFC,IAAM,CAAC,UAAQ,KAAT,CAAA;AACP,QAAA,MAAA,EAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,MAAA,EAAA,UAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA;;;IAGE,QAAA,CAAS,MAAT;AACA;IAAA,KAAA,qCAAA;;MACC,IAAC,CAAA,KAAD,CAAO,IAAP,EAAa,CAAb;IADD,CAJF;;;;;;;IAaE,UAAA,GAAa;AACb;IAAA,KAAA,wCAAA;;MACC,IAAG,CAAE,IAAC,CAAA,YAAY,CAAC,QAAd,CAAuB,IAAvB,CAAF,IACE,CAAE,IAAC,CAAA,gBAAgB,CAAC,QAAlB,CAA2B,IAA3B,CADP;QAEC,UAAU,CAAC,IAAX,CAAgB,IAAhB,EAFD;;IADD;IAKA,KAAA,GAAQ;MACP,SAAA,EAAW,IAAC,CAAA,gBADL;MAEP,SAAA,EAAW,IAAC,CAAA,gBAFL;MAGP,KAAA,EAAW,IAAC,CAAA,YAHL;MAIP,QAAA,EAAW,IAAC,CAAA,eAJL;MAKP;IALO;IAOR,CAAA,CAAC,MAAD,CAAA,GAAW,UAAA,CAAW,OAAX,CAAX;IACA,IAAG,MAAH;MACC,MAAA,GAAS;AACT;MAAA,KAAA,wCAAA;;QACC,IAAG,QAAA,CAAS,KAAK,CAAC,KAAD,CAAd,CAAH;UACC,MAAM,CAAC,IAAP,CAAY,CAAA,CAAA,CAAG,KAAH,CAAA,EAAA,CAAA,CAAa,KAAK,CAAC,KAAD,CAAO,CAAC,IAAb,CAAkB,GAAlB,CAAb,CAAA,CAAZ,EADD;;MADD;MAGA,MAAA,GAAS,OAAA,CAAQ,MAAR,EALV;KAAA,MAAA;MAOC,MAAA,GAAS,MAPV;;IASA,SAAA,CAAU,MAAV,EAAkB,MAAlB;AACA,WAAO;EAtCF,CAjFP;;;EA2HC,QAAU,CAAC,IAAD,EAAO,QAAM,CAAb,CAAA;AAEX,QAAA,CAAA,EAAA,GAAA,EAAA;IAAE,QAAA,CAAS,UAAT;IACA,IAAG,OAAA,CAAQ,IAAR,CAAH;MACC,KAAA,sCAAA;;QACC,IAAC,CAAA,QAAD,CAAU,IAAV,EAAgB,KAAhB;MADD,CADD;KAAA,MAAA;MAIC,MAAA,CAAO,MAAA,CAAO,IAAP,EAAa,CAAC,MAAD,CAAb,CAAP,EAA+B,CAAA,UAAA,CAAA,CAAa,EAAA,CAAG,IAAH,CAAb,CAAA,CAA/B;MACA,IAAC,CAAA,KAAD,CAAO,IAAP,EAAa,KAAb,EALD;;IAMA,SAAA,CAAU,UAAV;EATS,CA3HX;;;;EA0IC,MAAQ,CAAC,IAAD,EAAO,KAAP,CAAA;AAET,QAAA,SAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,QAAA,EAAA,KAAA,EAAA,UAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA;IAAE,QAAA,CAAS,QAAT;IACA,CAAA,CAAC,IAAD,CAAA,GAAS,IAAT;IACA,GAAA,CAAI,CAAA,QAAA,CAAA,CAAW,EAAA,CAAG,IAAH,CAAX,CAAA,CAAJ;IACA,SAAA,GAAY,YAAY,CAAC,IAAD;IACxB,IAAG,UAAA,CAAW,SAAX,CAAH;MACC,SAAA,CAAU,QAAV,EAAoB,KAApB;AACA,aAAO,MAFR;;IAIA,CAAA,CAAC,UAAD,EAAa,QAAb,EAAuB,KAAvB,CAAA,GAAgC,SAAhC;IACA,IAAG,OAAA,CAAQ,QAAR,CAAH;MACC,GAAA,CAAI,cAAJ;MACA,KAAA,0CAAA;;QACC,OAAA,GAAU,IAAI,CAAC,GAAD;QACd,IAAG,OAAO,CAAC,IAAR,KAAgB,YAAnB;UACC,IAAC,CAAA,UAAD,CAAY,OAAO,CAAC,IAApB,EADD;SAAA,MAAA;UAGC,IAAC,CAAA,QAAD,CAAU,OAAV,EAAmB,KAAA,GAAM,CAAzB,EAHD;;MAFD,CAFD;;IASA,IAAG,OAAA,CAAQ,KAAR,CAAH;MACC,GAAA,CAAI,WAAJ;MACA,KAAA,yCAAA;;QACC,OAAA,GAAU,IAAI,CAAC,GAAD;QACd,IAAG,OAAO,CAAC,IAAR,KAAgB,YAAnB;UACC,IAAC,CAAA,OAAD,CAAS,OAAO,CAAC,IAAjB,EADD;SAAA,MAAA;UAGC,IAAC,CAAA,QAAD,CAAU,OAAV,EAAmB,KAAA,GAAM,CAAzB,EAHD;;MAFD,CAFD;;IASA,IAAG,OAAA,CAAQ,UAAR,CAAH;MACC,GAAA,CAAI,gBAAJ;MACA,KAAA,8CAAA;;QACC,OAAA,GAAU,IAAI,CAAC,GAAD;QACd,IAAG,OAAA,CAAQ,OAAR,CAAH;UACC,KAAA,2CAAA;;YACC,IAAC,CAAA,QAAD,CAAU,IAAV,EAAgB,KAAA,GAAM,CAAtB;UADD,CADD;SAAA,MAGK,IAAG,OAAA,CAAQ,OAAR,CAAH;UACJ,IAAC,CAAA,QAAD,CAAU,OAAV,EAAmB,KAAA,GAAM,CAAzB,EADI;;MALN,CAFD;;IAUA,SAAA,CAAU,QAAV,EAAoB,IAApB;AACA,WAAO;EAxCA,CA1IT;;;EAsLC,KAAO,CAAC,IAAD,EAAO,KAAP,CAAA;AAER,QAAA,GAAA,EAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA,WAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,EAAA,UAAA,EAAA,QAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAAA,UAAA,EAAA;IAAE,QAAA,CAAS,iBAAT,EAA4B,IAA5B,EAAkC,KAAlC;IACA,MAAA,CAAO,OAAA,CAAQ,IAAR,CAAP,EAAsB,eAAtB;IAEA,IAAG,IAAC,CAAA,MAAD,CAAQ,IAAR,EAAc,KAAd,CAAH;MACC,SAAA,CAAU,iBAAV;AACA,aAFD;;AAIA,YAAO,IAAI,CAAC,IAAZ;AAAA,WAEM,gBAFN;QAGE,CAAA,CAAC,MAAD,CAAA,GAAW,IAAX;QACA,IAAI,MAAM,CAAC,IAAP,KAAe,YAAnB;UACC,IAAC,CAAA,OAAD,CAAS,MAAM,CAAC,IAAhB,EADD;SAAA,MAAA;UAGC,IAAC,CAAA,QAAD,CAAU,MAAV,EAAkB,KAAA,GAAM,CAAxB,EAHD;;AAIA;QAAA,KAAA,qCAAA;;UACC,IAAI,GAAG,CAAC,IAAJ,KAAY,YAAhB;YACC,IAAC,CAAA,OAAD,CAAS,GAAG,CAAC,IAAb,EADD;WAAA,MAAA;YAGC,IAAC,CAAA,QAAD,CAAU,GAAV,EAAe,KAAA,GAAM,CAArB,EAHD;;QADD;AANI;AAFN,WAcM,aAdN;QAeE,KAAA,GAAQ,IAAI,CAAC;QACb,IAAG,OAAA,CAAQ,KAAR,CAAA,IAAkB,CAAC,KAAK,CAAC,IAAN,KAAY,YAAb,CAArB;UACC,IAAC,CAAA,UAAD,CAAY,KAAK,CAAC,IAAlB,EADD;;QAEA,IAAC,CAAA,QAAD,CAAU,IAAI,CAAC,IAAf,EAAqB,KAAA,GAAM,CAA3B;AAJI;AAdN,WAoBM,wBApBN;;QAsBE,CAAA,CAAC,UAAD,EAAa,WAAb,CAAA,GAA4B,IAA5B;QACA,IAAG,OAAA,CAAQ,WAAR,CAAH;UACC,CAAA,CAAC,IAAD,EAAO,EAAP,EAAW,IAAX,EAAiB,IAAjB,CAAA,GAAyB,WAAzB;AACA,kBAAO,IAAP;AAAA,iBACM,kBADN;cAEE,IAAG,OAAA,CAAQ,EAAR,CAAH;gBACC,IAAC,CAAA,SAAD,CAAW,EAAE,CAAC,IAAd,EADD;eAAA,MAEK,IAAG,OAAA,CAAQ,IAAR,CAAH;gBACJ,IAAC,CAAA,QAAD,CAAU,IAAI,CAAC,IAAf,EAAqB,KAAA,GAAM,CAA3B,EADI;;AAHD;AADN,iBAMM,sBANN;cAOE,IAAI,IAAI,CAAC,IAAL,KAAa,YAAjB;gBACC,IAAC,CAAA,SAAD,CAAW,IAAI,CAAC,IAAhB,EADD;;AAPF;UASA,IAAC,CAAA,QAAD,CAAU,WAAV,EAAuB,KAAA,GAAM,CAA7B,EAXD;;QAaA,IAAG,OAAA,CAAQ,UAAR,CAAH;UACC,KAAA,8CAAA;;YACC,IAAA,GAAO,IAAI,CAAC,QAAQ,CAAC;YACrB,IAAC,CAAA,SAAD,CAAW,IAAX;UAFD,CADD;;AAhBI;AApBN,WAyCM,KAzCN;QA0CE,IAAG,OAAA,CAAQ,IAAI,CAAC,IAAb,CAAA,IAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAV,KAAgB,YAAjB,CAAzB;UACC,IAAC,CAAA,UAAD,CAAY,IAAI,CAAC,IAAI,CAAC,IAAtB,EADD;;QAGA,IAAG,OAAA,CAAQ,IAAI,CAAC,KAAb,CAAA,IAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAV,KAAgB,YAAjB,CAA1B;UACC,IAAC,CAAA,UAAD,CAAY,IAAI,CAAC,KAAK,CAAC,IAAvB,EADD;;QAEA,IAAC,CAAA,QAAD,CAAU,IAAI,CAAC,MAAf,EAAuB,KAAA,GAAM,CAA7B;QACA,IAAC,CAAA,QAAD,CAAU,IAAI,CAAC,IAAf,EAAqB,KAAA,GAAM,CAA3B;AAPI;AAzCN,WAkDM,oBAlDN;AAAA,WAkD2B,yBAlD3B;QAmDE,UAAA,GAAa;QACb,IAAG,OAAA,CAAQ,IAAI,CAAC,MAAb,CAAH;AACC;UAAA,KAAA,wCAAA;;AACC,oBAAO,IAAI,CAAC,IAAZ;AAAA,mBACM,YADN;gBAEE,UAAU,CAAC,IAAX,CAAgB,IAAI,CAAC,IAArB;AADI;AADN,mBAGM,mBAHN;gBAIE,CAAA,CAAC,IAAD,EAAO,KAAP,CAAA,GAAgB,IAAhB;gBACA,IAAG,IAAI,CAAC,IAAL,KAAa,YAAhB;kBACC,UAAU,CAAC,IAAX,CAAgB,IAAI,CAAC,IAArB,EADD;;gBAEA,IAAG,KAAK,CAAC,IAAN,KAAc,YAAjB;kBACC,IAAC,CAAA,OAAD,CAAS,KAAK,CAAC,IAAf,EADD;iBAAA,MAAA;kBAGC,IAAC,CAAA,QAAD,CAAU,KAAV,EAAiB,KAAA,GAAM,CAAvB,EAHD;;AAPF;UADD,CADD;;QAaA,IAAC,CAAA,OAAO,CAAC,UAAT,CAAoB,WAApB,EAAiC,UAAjC;QACA,IAAC,CAAA,QAAD,CAAU,IAAI,CAAC,MAAf,EAAuB,KAAA,GAAM,CAA7B;QACA,IAAC,CAAA,QAAD,CAAU,IAAI,CAAC,IAAf,EAAqB,KAAA,GAAM,CAA3B;QACA,IAAC,CAAA,OAAO,CAAC,QAAT,CAAA;AAlByB;AAlD3B,WAsEM,mBAtEN;QAuEE,CAAA,CAAC,UAAD,EAAa,MAAb,EAAqB,UAArB,CAAA,GAAmC,IAAnC;QACA,IAAG,CAAC,UAAA,KAAc,OAAf,CAAA,IAA2B,CAAC,MAAM,CAAC,IAAP,KAAe,eAAhB,CAA9B;UACC,GAAA,GAAM,MAAM,CAAC,MAAlB;UAEK,KAAA,8CAAA;;YACC,CAAA,CAAC,IAAD,EAAO,QAAP,EAAiB,KAAjB,EAAwB,UAAxB,CAAA,GAAsC,KAAtC;YACA,IAAG,CAAC,IAAA,KAAQ,iBAAT,CAAA,IACE,OAAA,CAAQ,QAAR,CADF,IAEE,CAAC,QAAQ,CAAC,IAAT,KAAiB,YAAlB,CAFL;cAGC,IAAC,CAAA,SAAD,CAAW,QAAQ,CAAC,IAApB,EAA0B,GAA1B,EAHD;;UAFD,CAHD;;AAFI;AAtEN,WAkFM,eAlFN;QAmFE,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,KAAoB,YAAvB;UACC,IAAC,CAAA,OAAD,CAAS,IAAI,CAAC,MAAM,CAAC,IAArB,EADD;;AAEA;QAAA,KAAA,wCAAA;;UACC,IAAG,GAAG,CAAC,IAAJ,KAAY,YAAf;YACC,IAAC,CAAA,OAAD,CAAS,GAAG,CAAC,IAAb,EADD;WAAA,MAAA;YAGC,IAAC,CAAA,WAAD,CAAa,GAAb,EAHD;;QADD;AAHI;AAlFN,WA2FM,kBA3FN;QA4FE,CAAA,CAAC,MAAD,CAAA,GAAW,IAAX;QACA,IAAG,MAAM,CAAC,IAAP,KAAe,YAAlB;UACC,IAAC,CAAA,OAAD,CAAS,MAAM,CAAC,IAAhB,EADD;;QAEA,IAAC,CAAA,QAAD,CAAU,MAAV;AAJI;AA3FN,WAiGM,iBAjGN;QAkGE,CAAA,CAAC,QAAD,CAAA,GAAa,IAAb;QACA,IAAG,OAAA,CAAQ,QAAR,CAAH;UACC,IAAI,QAAQ,CAAC,IAAT,KAAiB,YAArB;YACC,IAAC,CAAA,OAAD,CAAS,QAAQ,CAAC,IAAlB,EADD;WAAA,MAAA;YAGC,IAAC,CAAA,QAAD,CAAU,QAAV,EAHD;WADD;;AAnGF;IAyGA,SAAA,CAAU,iBAAV;EAlHM,CAtLR;;;EA6SC,KAAO,CAAC,IAAD,CAAA;IAEN,MAAA,CAAO,QAAA,CAAS,IAAT,CAAP,EAAuB,YAAvB;EAFM,CA7SR;;;EAoTC,OAAS,CAAC,QAAD,EAAW,WAAS,CAAA,CAApB,CAAA;AAEV,QAAA,OAAA,EAAA,IAAA,EAAA;IAAE,CAAA,CAAC,IAAD,CAAA,GAAS,UAAA,CAAW,QAAX,CAAT;IACA,OAAA,GAAU,KAAA,CAAM,6BAAN;IACV,IAAG,IAAH;aACC,IAAA,CAAK,MAAA,CAAO,IAAC,CAAA,GAAR,EAAa;QAAC,QAAA,EAAU;MAAX,CAAb,CAAL,EAAwC,QAAxC,EADD;KAAA,MAAA;MAGC,OAAA,GAAU,QAAA,CAAS,IAAC,CAAA,GAAV;MACV,UAAA,CAAW,OAAX,EAAoB,KAAA,CACnB,wDADmB,EAEnB,6DAFmB,CAApB;aAIA,IAAA,CAAK,MAAA,CAAO,OAAP,EAAgB;QAAC,QAAA,EAAU;MAAX,CAAhB,CAAL,EAA2C,QAA3C,EARD;;EAJQ;;AAtTH",
  "sourcesContent": [
    "# ASTWalker.coffee\r\n\r\nimport {\r\n\tundef, pass, defined, notdefined, OL, words, deepCopy,\r\n\tisString, nonEmpty, isArray, isHash, isArrayOfHashes,\r\n\ttoBlock, getOptions,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {LOG, LOGVALUE, echoLogsByDefault} from '@jdeighan/base-utils/log'\r\nimport {\r\n\tdbg, dbgEnter, dbgReturn,\r\n\t} from '@jdeighan/base-utils/debug'\r\nimport {barf, isDir} from '@jdeighan/base-utils/fs'\r\nimport {fromTAML, toTAML} from '@jdeighan/base-utils/taml'\r\nimport {indented} from '@jdeighan/base-utils/indent'\r\n\r\nimport {coffeeCodeToAST} from '@jdeighan/mapper/coffee'\r\nimport {Context} from '@jdeighan/mapper/context'\r\n\r\nechoLogsByDefault false\r\n\r\nhAllHandlers = fromTAML('''\r\n\t---\r\n\tFile:\r\n\t\tlWalkTrees:\r\n\t\t\t- program\r\n\tProgram:\r\n\t\tlWalkTrees:\r\n\t\t\t- body\r\n\tArrayExpression:\r\n\t\tlWalkTrees:\r\n\t\t\t- elements\r\n\tAssignmentExpression:\r\n\t\tlDefined:\r\n\t\t\t- left\r\n\t\tlUsed:\r\n\t\t\t- right\r\n\tAssignmentPattern:\r\n\t\tlDefined:\r\n\t\t\t- left\r\n\t\tlWalkTrees:\r\n\t\t\t- right\r\n\tBinaryExpression:\r\n\t\tlUsed:\r\n\t\t\t- left\r\n\t\t\t- right\r\n\tBlockStatement:\r\n\t\tlWalkTrees:\r\n\t\t\t- body\r\n\tClassBody:\r\n\t\tlWalkTrees:\r\n\t\t\t- body\r\n\tClassDeclaration:\r\n\t\tlWalkTrees:\r\n\t\t\t- body\r\n\tClassMethod:\r\n\t\tlWalkTrees:\r\n\t\t\t- body\r\n\tExpressionStatement:\r\n\t\tlWalkTrees:\r\n\t\t\t- expression\r\n\tIfStatement:\r\n\t\tlWalkTrees:\r\n\t\t\t- test\r\n\t\t\t- consequent\r\n\t\t\t- alternate\r\n\tLogicalExpression:\r\n\t\tlWalkTrees:\r\n\t\t\t- left\r\n\t\t\t- right\r\n\tSpreadElement:\r\n\t\tlWalkTrees:\r\n\t\t\t- argument\r\n\tSwitchStatement:\r\n\t\tlWalkTrees:\r\n\t\t\t- cases\r\n\tSwitchCase:\r\n\t\tlWalkTrees:\r\n\t\t\t- test\r\n\t\t\t- consequent\r\n\tTemplateLiteral:\r\n\t\tlWalkTrees:\r\n\t\t\t- expressions\r\n\tTryStatement:\r\n\t\tlWalkTrees:\r\n\t\t\t- block\r\n\t\t\t- handler\r\n\t\t\t- finalizer\r\n\tWhileStatement:\r\n\t\tlWalkTrees:\r\n\t\t\t- test\r\n\t\t\t- body\r\n\t''')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nremoveKeys = (h, lKeys) =>\r\n\r\n\tfor key in lKeys\r\n\t\tdelete h[key]\r\n\tfor own key,value of h\r\n\t\tif defined(value)\r\n\t\t\tif isArray(value)\r\n\t\t\t\tfor item in value\r\n\t\t\t\t\tif isHash(item)\r\n\t\t\t\t\t\tremoveKeys(item, lKeys)\r\n\t\t\telse if (typeof value == 'object')\r\n\t\t\t\tremoveKeys value, lKeys\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class ASTWalker\r\n\r\n\tconstructor: (from) ->\r\n\t\t# --- from can be an AST or CoffeeScript code\r\n\r\n\t\tdbgEnter \"ASTWalker\", from\r\n\r\n\t\tif isString(from)\r\n\t\t\t@ast = coffeeCodeToAST(from)\r\n\t\telse\r\n\t\t\t@ast = from\r\n\r\n\t\t# --- @ast can be a hash or array of hashes\r\n\t\tif isHash(@ast)\r\n\t\t\tdbg \"tree was hash - constructing list from it\"\r\n\t\t\t@ast = [@ast]\r\n\t\tassert isArrayOfHashes(@ast), \"not array of hashes: #{OL(@ast)}\"\r\n\r\n\t\t# --- Info to accumulate\r\n\t\t@lImportedSymbols = []\r\n\t\t@lExportedSymbols = []\r\n\t\t@lUsedSymbols     = []\r\n\t\t@lMissingSymbols  = []\r\n\r\n\t\t@context = new Context()\r\n\t\tdbgReturn \"ASTWalker\"\r\n\r\n\t# ..........................................................\r\n\r\n\taddImport: (name, lib) ->\r\n\r\n\t\tdbgEnter \"addImport\", name, lib\r\n\t\t@check name\r\n\t\tif @lImportedSymbols.includes(name)\r\n\t\t\tLOG \"Duplicate import: #{name}\"\r\n\t\telse\r\n\t\t\t@lImportedSymbols.push(name)\r\n\t\t@context.addGlobal(name)\r\n\t\tdbgReturn \"addImport\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddExport: (name, lib) ->\r\n\r\n\t\tdbgEnter \"addExport\", name\r\n\t\t@check name\r\n\t\tif @lExportedSymbols.includes(name)\r\n\t\t\tLOG \"Duplicate export: #{name}\"\r\n\t\telse\r\n\t\t\t@lExportedSymbols.push(name)\r\n\t\tdbgReturn \"addExport\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddDefined: (name, value={}) ->\r\n\r\n\t\tdbgEnter \"addDefined\", name\r\n\t\t@check name\r\n\t\tif @context.atGlobalLevel()\r\n\t\t\t@context.addGlobal name\r\n\t\telse\r\n\t\t\t@context.add name\r\n\t\tdbgReturn \"addDefined\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddUsed: (name, value={}) ->\r\n\r\n\t\tdbgEnter \"addUsed\", name\r\n\t\t@check name\r\n\t\tif ! @lUsedSymbols.includes(name)\r\n\t\t\t@lUsedSymbols.push(name)\r\n\t\tif ! @context.has(name) \\\r\n\t\t\t\t&& ! @lMissingSymbols.includes(name)\r\n\t\t\t@lMissingSymbols.push name\r\n\t\tdbgReturn \"addUsed\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\twalk: (options=undef) ->\r\n\t\t# --- Valid options:\r\n\t\t#        asText\r\n\r\n\t\tdbgEnter \"walk\"\r\n\t\tfor node in @ast\r\n\t\t\t@visit node, 0\r\n\r\n\t\t# --- get symbols to return\r\n\r\n\t\t# --- not needed if:\r\n\t\t#        1. in lImported\r\n\t\t#        2. not in lUsedSymbols\r\n\t\t#        3. not in lExportedSymbols\r\n\t\tlNotNeeded = []\r\n\t\tfor name in @lImportedSymbols\r\n\t\t\tif ! @lUsedSymbols.includes(name) \\\r\n\t\t\t\t\t&& ! @lExportedSymbols.includes(name)\r\n\t\t\t\tlNotNeeded.push name\r\n\r\n\t\thInfo = {\r\n\t\t\tlImported: @lImportedSymbols,\r\n\t\t\tlExported: @lExportedSymbols,\r\n\t\t\tlUsed:     @lUsedSymbols,\r\n\t\t\tlMissing:  @lMissingSymbols,\r\n\t\t\tlNotNeeded\r\n\t\t\t}\r\n\t\t{asText} = getOptions(options)\r\n\t\tif asText\r\n\t\t\tlLines = []\r\n\t\t\tfor label in words('lImported lExported lMissing')\r\n\t\t\t\tif nonEmpty(hInfo[label])\r\n\t\t\t\t\tlLines.push \"#{label}: #{hInfo[label].join(' ')}\"\r\n\t\t\tresult = toBlock(lLines)\r\n\t\telse\r\n\t\t\tresult = hInfo\r\n\r\n\t\tdbgReturn \"walk\", result\r\n\t\treturn result\r\n\r\n\t# ..........................................................\r\n\r\n\twalkTree: (tree, level=0) ->\r\n\r\n\t\tdbgEnter \"walkTree\"\r\n\t\tif isArray(tree)\r\n\t\t\tfor node in tree\r\n\t\t\t\t@walkTree node, level\r\n\t\telse\r\n\t\t\tassert isHash(tree, ['type']), \"bad tree: #{OL(tree)}\"\r\n\t\t\t@visit tree, level\r\n\t\tdbgReturn \"walkTree\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- return true if handled, false if not\r\n\r\n\thandle: (node, level) ->\r\n\r\n\t\tdbgEnter \"handle\"\r\n\t\t{type} = node\r\n\t\tdbg \"type is #{OL(type)}\"\r\n\t\thHandlers = hAllHandlers[type]\r\n\t\tif notdefined(hHandlers)\r\n\t\t\tdbgReturn \"handle\", false\r\n\t\t\treturn false\r\n\r\n\t\t{lWalkTrees, lDefined, lUsed} = hHandlers\r\n\t\tif defined(lDefined)\r\n\t\t\tdbg \"has lDefined\"\r\n\t\t\tfor key in lDefined\r\n\t\t\t\tsubnode = node[key]\r\n\t\t\t\tif subnode.type == 'Identifier'\r\n\t\t\t\t\t@addDefined subnode.name\r\n\t\t\t\telse\r\n\t\t\t\t\t@walkTree subnode, level+1\r\n\r\n\t\tif defined(lUsed)\r\n\t\t\tdbg \"has lUsed\"\r\n\t\t\tfor key in lUsed\r\n\t\t\t\tsubnode = node[key]\r\n\t\t\t\tif subnode.type == 'Identifier'\r\n\t\t\t\t\t@addUsed subnode.name\r\n\t\t\t\telse\r\n\t\t\t\t\t@walkTree subnode, level+1\r\n\r\n\t\tif defined(lWalkTrees)\r\n\t\t\tdbg \"has lWalkTrees\"\r\n\t\t\tfor key in lWalkTrees\r\n\t\t\t\tsubnode = node[key]\r\n\t\t\t\tif isArray(subnode)\r\n\t\t\t\t\tfor tree in subnode\r\n\t\t\t\t\t\t@walkTree tree, level+1\r\n\t\t\t\telse if defined(subnode)\r\n\t\t\t\t\t@walkTree subnode, level+1\r\n\r\n\t\tdbgReturn \"handle\", true\r\n\t\treturn true\r\n\r\n\t# ..........................................................\r\n\r\n\tvisit: (node, level) ->\r\n\r\n\t\tdbgEnter \"ASTWalker.visit\", node, level\r\n\t\tassert defined(node), \"node is undef\"\r\n\r\n\t\tif @handle(node, level)\r\n\t\t\tdbgReturn \"ASTWalker.visit\"\r\n\t\t\treturn\r\n\r\n\t\tswitch node.type\r\n\r\n\t\t\twhen 'CallExpression'\r\n\t\t\t\t{callee} = node\r\n\t\t\t\tif (callee.type == 'Identifier')\r\n\t\t\t\t\t@addUsed callee.name\r\n\t\t\t\telse\r\n\t\t\t\t\t@walkTree callee, level+1\r\n\t\t\t\tfor arg in node.arguments\r\n\t\t\t\t\tif (arg.type == 'Identifier')\r\n\t\t\t\t\t\t@addUsed arg.name\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t@walkTree arg, level+1\r\n\r\n\t\t\twhen 'CatchClause'\r\n\t\t\t\tparam = node.param\r\n\t\t\t\tif defined(param) && (param.type=='Identifier')\r\n\t\t\t\t\t@addDefined param.name\r\n\t\t\t\t@walkTree node.body, level+1\r\n\r\n\t\t\twhen 'ExportNamedDeclaration'\r\n#\t\t\t\tconsole.dir node\r\n\t\t\t\t{specifiers, declaration} = node\r\n\t\t\t\tif defined(declaration)\r\n\t\t\t\t\t{type, id, left, body} = declaration\r\n\t\t\t\t\tswitch type\r\n\t\t\t\t\t\twhen 'ClassDeclaration'\r\n\t\t\t\t\t\t\tif defined(id)\r\n\t\t\t\t\t\t\t\t@addExport id.name\r\n\t\t\t\t\t\t\telse if defined(body)\r\n\t\t\t\t\t\t\t\t@walkTree node.body, level+1\r\n\t\t\t\t\t\twhen 'AssignmentExpression'\r\n\t\t\t\t\t\t\tif (left.type == 'Identifier')\r\n\t\t\t\t\t\t\t\t@addExport left.name\r\n\t\t\t\t\t@walkTree declaration, level+1\r\n\r\n\t\t\t\tif defined(specifiers)\r\n\t\t\t\t\tfor spec in specifiers\r\n\t\t\t\t\t\tname = spec.exported.name\r\n\t\t\t\t\t\t@addExport name\r\n\r\n\t\t\twhen 'For'\r\n\t\t\t\tif defined(node.name) && (node.name.type=='Identifier')\r\n\t\t\t\t\t@addDefined node.name.name\r\n\r\n\t\t\t\tif defined(node.index) && (node.name.type=='Identifier')\r\n\t\t\t\t\t@addDefined node.index.name\r\n\t\t\t\t@walkTree node.source, level+1\r\n\t\t\t\t@walkTree node.body, level+1\r\n\r\n\t\t\twhen 'FunctionExpression','ArrowFunctionExpression'\r\n\t\t\t\tlParmNames = []\r\n\t\t\t\tif defined(node.params)\r\n\t\t\t\t\tfor parm in node.params\r\n\t\t\t\t\t\tswitch parm.type\r\n\t\t\t\t\t\t\twhen 'Identifier'\r\n\t\t\t\t\t\t\t\tlParmNames.push parm.name\r\n\t\t\t\t\t\t\twhen 'AssignmentPattern'\r\n\t\t\t\t\t\t\t\t{left, right} = parm\r\n\t\t\t\t\t\t\t\tif left.type == 'Identifier'\r\n\t\t\t\t\t\t\t\t\tlParmNames.push left.name\r\n\t\t\t\t\t\t\t\tif right.type == 'Identifier'\r\n\t\t\t\t\t\t\t\t\t@addUsed right.name\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t@walkTree right, level+1\r\n\t\t\t\t@context.beginScope '<unknown>', lParmNames\r\n\t\t\t\t@walkTree node.params, level+1\r\n\t\t\t\t@walkTree node.body, level+1\r\n\t\t\t\t@context.endScope()\r\n\r\n\t\t\twhen 'ImportDeclaration'\r\n\t\t\t\t{specifiers, source, importKind} = node\r\n\t\t\t\tif (importKind == 'value') && (source.type == 'StringLiteral')\r\n\t\t\t\t\tlib = source.value     # e.g. '@jdeighan/coffee-utils'\r\n\r\n\t\t\t\t\tfor hSpec in specifiers\r\n\t\t\t\t\t\t{type, imported, local, importKind} = hSpec\r\n\t\t\t\t\t\tif (type == 'ImportSpecifier') \\\r\n\t\t\t\t\t\t\t\t&& defined(imported) \\\r\n\t\t\t\t\t\t\t\t&& (imported.type == 'Identifier')\r\n\t\t\t\t\t\t\t@addImport imported.name, lib\r\n\r\n\t\t\twhen 'NewExpression'\r\n\t\t\t\tif node.callee.type == 'Identifier'\r\n\t\t\t\t\t@addUsed node.callee.name\r\n\t\t\t\tfor arg in node.arguments\r\n\t\t\t\t\tif arg.type == 'Identifier'\r\n\t\t\t\t\t\t@addUsed arg.name\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t@walkSubtree arg\r\n\r\n\t\t\twhen 'MemberExpression'\r\n\t\t\t\t{object} = node\r\n\t\t\t\tif object.type == 'Identifier'\r\n\t\t\t\t\t@addUsed object.name\r\n\t\t\t\t@walkTree object\r\n\r\n\t\t\twhen 'ReturnStatement'\r\n\t\t\t\t{argument} = node\r\n\t\t\t\tif defined(argument)\r\n\t\t\t\t\tif (argument.type == 'Identifier')\r\n\t\t\t\t\t\t@addUsed argument.name\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t@walkTree argument\r\n\r\n\t\tdbgReturn \"ASTWalker.visit\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tcheck: (name) ->\r\n\r\n\t\tassert nonEmpty(name), \"empty name\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tbarfAST: (filePath, hOptions={}) ->\r\n\r\n\t\t{full} = getOptions(hOptions)\r\n\t\tlSortBy = words(\"type params body left right\")\r\n\t\tif full\r\n\t\t\tbarf toTAML(@ast, {sortKeys: lSortBy}), filepath\r\n\t\telse\r\n\t\t\tastCopy = deepCopy @ast\r\n\t\t\tremoveKeys astCopy, words(\r\n\t\t\t\t'start end extra declarations loc range tokens comments',\r\n\t\t\t\t'assertions implicit optional async generato hasIndentedBody'\r\n\t\t\t\t)\r\n\t\t\tbarf toTAML(astCopy, {sortKeys: lSortBy}), filepath\r\n"
  ]
}
{
  "version": 3,
  "file": "Context.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\Context.coffee"
  ],
  "names": [],
  "mappings": ";AAAgB;AAAA,IAAA;;AAEhB,OAAA;EAAQ,KAAR;EAAe,QAAf;EAAyB,KAAzB;EAAgC,EAAhC;CAAA,MAAA;;AACA,OAAA;EAAQ,MAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,GAAR;CAAA,MAAA;;AACA,OAAA;EACC,GADD;EACM,QADN;EACgB,SADhB;CAAA,MAAA;;AAIA,OAAA;EAAQ,KAAR;CAAA,MAAA;;AAEA,SAAA,GAAY,KAAA,CAAM,sCAAN,EACM,2CADN,EAEM,WAFN,EAXI;;;AAiBhB,OAAA,IAAa,UAAN,MAAA,QAAA;EAEN,WAAa,CAAA,CAAA;IAEZ,IAAC,CAAA,WAAD,GAAe,IAAI,KAAJ,CAAU,QAAV,EAAoB,SAApB;IACf,IAAC,CAAA,OAAD,GAAW,CAAE,IAAC,CAAA,WAAH;IACX,IAAC,CAAA,YAAD,GAAgB,IAAC,CAAA;EAJL,CAAd;;;EAQC,aAAe,CAAA,CAAA;AAEhB,QAAA;IAAE,MAAA,GAAU,IAAC,CAAA,YAAD,KAAiB,IAAC,CAAA;IAC5B,IAAG,MAAH;MACC,MAAA,CAAQ,IAAC,CAAA,OAAO,CAAC,MAAT,KAAmB,CAA3B,EAA+B,qBAA/B;AACA,aAAO,KAFR;KAAA,MAAA;AAIC,aAAO,MAJR;;EAHc,CARhB;;;EAmBC,GAAK,CAAC,MAAD,CAAA;IAEJ,QAAA,CAAS,aAAT,EAAwB,MAAxB;IACA,IAAC,CAAA,YAAY,CAAC,GAAd,CAAkB,MAAlB;IACA,SAAA,CAAU,aAAV;EAJI,CAnBN;;;EA4BC,SAAW,CAAC,MAAD,CAAA;IAEV,QAAA,CAAS,mBAAT,EAA8B,MAA9B;IACA,IAAC,CAAA,WAAW,CAAC,GAAb,CAAiB,MAAjB;IACA,SAAA,CAAU,mBAAV;EAJU,CA5BZ;;;EAqCC,GAAK,CAAC,MAAD,CAAA;AAEN,QAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAE;IAAA,KAAA,qCAAA;;MACC,IAAG,KAAK,CAAC,GAAN,CAAU,MAAV,CAAH;AACC,eAAO,KADR;;IADD;AAGA,WAAO;EALH,CArCN;;;EA8CC,UAAY,CAAC,OAAK,KAAN,EAAa,WAAS,KAAtB,CAAA;AAEb,QAAA;IAAE,QAAA,CAAS,YAAT,EAAuB,IAAvB,EAA6B,QAA7B;IACA,QAAA,GAAW,IAAI,KAAJ,CAAU,IAAV,EAAgB,QAAhB;IACX,IAAC,CAAA,OAAO,CAAC,OAAT,CAAiB,QAAjB;IACA,IAAC,CAAA,YAAD,GAAgB;IAChB,SAAA,CAAU,YAAV;EANW,CA9Cb;;;EAyDC,QAAU,CAAA,CAAA;IAET,QAAA,CAAS,UAAT;IACA,IAAC,CAAA,OAAO,CAAC,KAAT,CAAA,EADF;IAEE,IAAC,CAAA,YAAD,GAAgB,IAAC,CAAA,OAAO,CAAC,CAAD;IACxB,SAAA,CAAU,UAAV;EALS,CAzDX;;;EAmEC,IAAM,CAAA,CAAA;AAEP,QAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAE;IAAA,KAAA,qCAAA;;MACC,GAAA,CAAI,WAAJ;MACA,KAAK,CAAC,IAAN,CAAA;IAFD;EAFK;;AArEA",
  "sourcesContent": [
    "# Context.coffee\r\n\r\nimport {undef, deepCopy, words, OL} from '@jdeighan/base-utils'\r\nimport {assert} from '@jdeighan/base-utils/exceptions'\r\nimport {LOG} from '@jdeighan/base-utils/log'\r\nimport {\r\n\tdbg, dbgEnter, dbgReturn,\r\n\t} from '@jdeighan/base-utils/debug'\r\n\t\r\nimport {Scope} from '@jdeighan/mapper/scope'\r\n\r\nlBuiltins = words \"parseInt process JSON import console\",\r\n                  \"Function String Number Boolean Object Set\",\r\n                  \"Math Date\"\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class Context\r\n\r\n\tconstructor: () ->\r\n\r\n\t\t@globalScope = new Scope('global', lBuiltins)\r\n\t\t@lScopes = [ @globalScope ]\r\n\t\t@currentScope = @globalScope\r\n\r\n\t# ..........................................................\r\n\r\n\tatGlobalLevel: () ->\r\n\r\n\t\tresult = (@currentScope == @globalScope)\r\n\t\tif result\r\n\t\t\tassert (@lScopes.length == 1), \"more than one scope\"\r\n\t\t\treturn true\r\n\t\telse\r\n\t\t\treturn false\r\n\r\n\t# ..........................................................\r\n\r\n\tadd: (symbol) ->\r\n\r\n\t\tdbgEnter \"Context.add\", symbol\r\n\t\t@currentScope.add(symbol)\r\n\t\tdbgReturn \"Context.add\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddGlobal: (symbol) ->\r\n\r\n\t\tdbgEnter \"Context.addGlobal\", symbol\r\n\t\t@globalScope.add(symbol)\r\n\t\tdbgReturn \"Context.addGlobal\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\thas: (symbol) ->\r\n\r\n\t\tfor scope in @lScopes\r\n\t\t\tif scope.has(symbol)\r\n\t\t\t\treturn true\r\n\t\treturn false\r\n\r\n\t# ..........................................................\r\n\r\n\tbeginScope: (name=undef, lSymbols=undef) ->\r\n\r\n\t\tdbgEnter \"beginScope\", name, lSymbols\r\n\t\tnewScope = new Scope(name, lSymbols)\r\n\t\t@lScopes.unshift newScope\r\n\t\t@currentScope = newScope\r\n\t\tdbgReturn \"beginScope\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tendScope: () ->\r\n\r\n\t\tdbgEnter \"endScope\"\r\n\t\t@lScopes.shift()    # remove ended scope\r\n\t\t@currentScope = @lScopes[0]\r\n\t\tdbgReturn \"endScope\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tdump: () ->\r\n\r\n\t\tfor scope in @lScopes\r\n\t\t\tLOG \"   SCOPE:\"\r\n\t\t\tscope.dump()\r\n\t\treturn\r\n"
  ]
}
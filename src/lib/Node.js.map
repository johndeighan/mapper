{
  "version": 3,
  "file": "Node.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\Node.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Node.coffee\r\n\r\nimport {\r\n\tundef, pass, defined, notdefined, OL, isEmpty, nonEmpty,\r\n\tisString, isBoolean, isInteger, getOptions,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\r\nimport {\r\n\tdbg, dbgEnter, dbgReturn,\r\n\t} from '@jdeighan/base-utils/debug'\r\nimport {\r\n\tindented, indentLevel, splitPrefix,\r\n\t} from '@jdeighan/coffee-utils/indent'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class Node\r\n\r\n\tconstructor: (hNodeDesc) ->\r\n\t\t# --- Keys 'str' and 'level' are required\r\n\t\t#     Keys 'source' and 'lineNum' are optional\r\n\r\n\t\tObject.assign(this, hNodeDesc)\r\n\r\n\t\tassert isString(@str), \"str #{OL(@str)} not a string\"\r\n\t\tassert isInteger(@level, {min: 0}),\r\n\t\t\t\"level #{OL(@level)} not an integer\"\r\n\t\tif defined(@source)\r\n\t\t\tassert isString(@source), \"source not a string\"\r\n\r\n\t\t# --- level may later be adjusted, but srcLevel should be const\r\n\t\t@srcLevel = @level\r\n\r\n\t# ..........................................................\r\n\r\n\tdesc: () ->\r\n\r\n\t\tstr = \"[#{@level}] #{OL(@str)}\"\r\n\t\tif defined(@uobj) && (@uobj != @str)\r\n\t\t\tstr += \" #{OL(@uobj)}\"\r\n\t\treturn str\r\n\r\n\t# ..........................................................\r\n\r\n\tisEmptyLine: () ->\r\n\r\n\t\tstr = @uobj || @str\r\n\t\tif !isString(str) || nonEmpty(str)\r\n\t\t\treturn false\r\n\t\tassert (str == ''), \"empty node is not empty string\"\r\n\t\tassert (@level == 0), \"empty node not at level 0\"\r\n\t\treturn true\r\n\r\n\t# ..........................................................\r\n\t# --- used when '#include <file>' has indentation\r\n\r\n\tincLevel: (n=1) ->\r\n\r\n\t\t@level += n\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- getLine() should only be called when text is desired,\r\n\t#        e.g. in getBlock()\r\n\r\n\tgetLine: (hOptions={}) ->\r\n\r\n\t\tdbgEnter 'Node.getLine', hOptions\r\n\r\n\t\t# --- empty lines never get undented\r\n\t\tif @isEmptyLine()\r\n\t\t\tdbgReturn 'Node.getLine', ''\r\n\t\t\treturn ''\r\n\r\n\t\t{oneIndent, undent} = getOptions(hOptions, {\r\n\t\t\toneIndent: \"\\t\"\r\n\t\t\tundent: 0\r\n\t\t\t})\r\n\t\tif (oneIndent != \"\\t\")\r\n\t\t\tdbg \"oneIndent = #{OL(oneIndent)}\"\r\n\r\n\t\tif (undent == true)\r\n\t\t\tcroak \"undent set to true\"\r\n\t\telse if (undent == false)\r\n\t\t\tundent = 0\r\n\r\n\t\tassert isInteger(undent), \"undent not an integer\"\r\n\t\tif (undent > 0)\r\n\t\t\tdbg \"undent #{OL(undent)} levels\"\r\n\r\n\t\t# --- If Node has key 'uobj', use that to build the line\r\n\t\t#     else use key 'str'\r\n\t\tstr = @uobj || @str\r\n\t\tassert isString(str), \"not a string: #{OL(str)}\"\r\n\t\tassert (@level >= undent), \"undent = #{undent}, level = #{@level}\"\r\n\t\tresult = indented(str, @level - undent, oneIndent)\r\n\t\tdbgReturn 'Node.getLine', result\r\n\t\treturn result\r\n"
  ]
}
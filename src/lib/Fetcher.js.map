{
  "version": 3,
  "file": "Fetcher.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\Fetcher.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Fetcher.coffee\r\n\r\nimport {assert} from '@jdeighan/base-utils/exceptions'\r\nimport {\r\n\tisString, isNonEmptyString, isInteger, isHash, isIterable, isFunction,\r\n\tisEmpty, nonEmpty, getOptions, toArray, toBlock,\r\n\tundef, defined, notdefined, rtrim, OL,\r\n\t} from '@jdeighan/base-utils'\r\nimport {\r\n\tdbg, dbgEnter, dbgReturn, dbgYield, dbgResume,\r\n\t} from '@jdeighan/base-utils/debug'\r\nimport {slurp} from '@jdeighan/base-utils/fs'\r\nimport {\r\n\tindentLevel, splitLine, splitPrefix,\r\n\tgetOneIndent, undented, isUndented,\r\n\t} from '@jdeighan/coffee-utils/indent'\r\nimport {parseSource} from '@jdeighan/coffee-utils/fs'\r\n\r\nimport {Node} from '@jdeighan/mapper/node'\r\n\r\n# ---------------------------------------------------------------------------\r\n# 1. implement fetch() and peek()\r\n# 2. handle extension lines\r\n# 3. implement fetchLinesAtLevel(level)\r\n# 4. define extSep(str, nextStr) - to override\r\n# 5. implement generator allNodes()\r\n# 6. define procNode() - to override\r\n# 7. implement getBlock(oneIndent)\r\n# 8. define finalizeBlock() - to override\r\n\r\nexport class Fetcher\r\n\r\n\tconstructor: (hInput, options={}) ->\r\n\t\t# --- Valid options:\r\n\t\t#        addLevel - num of levels to add to each line\r\n\t\t#                   unless the line is empty\r\n\t\t#        noLevels - any line with indentation is continuation line\r\n\r\n\t\tdbgEnter \"Fetcher\", hInput, options\r\n\r\n\t\t# --- hInput can be:\r\n\t\t#        1. a plain string\r\n\t\t#        2. a hash with keys 'source' and/or 'content',\r\n\t\t#        3. an iterator\r\n\r\n\t\t# --- We need to set:\r\n\t\t#        @hSourceInfo - information about the source of input\r\n\t\t#        @iterator    - must be an iterator\r\n\r\n\t\t# --- Handle options\r\n\t\t{addLevel, noLevels} = getOptions(options)\r\n\t\t@addLevel = addLevel || 0\r\n\t\t@noLevels = !!noLevels\r\n\t\tif (@addLevel > 0)\r\n\t\t\tdbg \"add #{@addLevel} levels\"\r\n\r\n\t\tif isString(hInput)\r\n\t\t\tdbg \"string passed as hInput\"\r\n\t\t\t@hSourceInfo = { filename: '<unknown>' }\r\n\t\t\tcontent = toArray(hInput)\r\n\t\t\t@iterator = content[Symbol.iterator]()\r\n\t\t\tdbg \"iterator is an array with #{content.length} items\"\r\n\t\telse if isHash(hInput)\r\n\t\t\tdbg \"hash passed as hInput\"\r\n\t\t\t{source, content} = hInput\r\n\t\t\tassert defined(source) || defined(content),\r\n\t\t\t\t\t\"No source or content\"\r\n\t\t\tif defined(source)\r\n\t\t\t\t@hSourceInfo = parseSource(source)\r\n\t\t\telse\r\n\t\t\t\tdbg \"No source, so filename is <unknown>\"\r\n\t\t\t\t@hSourceInfo = {filename: '<unknown>'}\r\n\r\n\t\t\tif defined(content)\r\n\t\t\t\tif isString(content)\r\n\t\t\t\t\tcontent = toArray(content)\r\n\t\t\t\t\tdbg \"iterator is an array with #{content.length} items\"\r\n\t\t\t\tassert isIterable(content), \"content not iterable\"\r\n\t\t\t\t@iterator = content[Symbol.iterator]()\r\n\t\t\telse\r\n\t\t\t\tdbg \"No content - check for fullpath\"\r\n\t\t\t\tfullpath = @hSourceInfo.fullpath\r\n\t\t\t\tassert nonEmpty(fullpath), \"No content and no fullpath\"\r\n\r\n\t\t\t\t# --- ultimately, we want to create an iterator here\r\n\t\t\t\t#     rather than blindly reading the entire file\r\n\r\n\t\t\t\tdbg \"slurping #{fullpath}\"\r\n\t\t\t\tcontent = toArray(slurp(fullpath))\r\n\t\t\t\t@iterator = content[Symbol.iterator]()\r\n\t\telse\r\n\t\t\tdbg \"iterable passed as hInput\"\r\n\t\t\t@hSourceInfo = { filename: '<unknown>' }\r\n\t\t\tassert isIterable(hInput), \"hInput not iterable\"\r\n\t\t\t@iterator = hInput[Symbol.iterator]()\r\n\r\n\t\t# --- @hSourceInfo must exist and have a filename key\r\n\t\tdbg 'hSourceInfo', @hSourceInfo\r\n\t\tassert nonEmpty(@hSourceInfo.filename),\r\n\t\t\t\"parseSource returned no filename\"\r\n\r\n\t\t@lineNum = 0\r\n\t\t@oneIndent = undef   # set from 1st line with indentation\r\n\r\n\t\t@refill()    # sets @nextLevel and @nextStr\r\n\t\t@nextNode = @fetchNextNode()\r\n\t\tdbgReturn \"Fetcher\"\r\n\r\n\t# ..........................................................\r\n\r\n\trefill: () ->\r\n\r\n\t\t# --- invoke iterator to fill in @nextLevel & @nextStr\r\n\t\t{value, done} = @iterator.next()\r\n\t\tif done\r\n\t\t\t@nextStr = undef\r\n\t\telse if isString(value)\r\n\t\t\tif (value == '__END__')\r\n\t\t\t\t@nextStr = undef\r\n\t\t\telse if @noLevels\r\n\t\t\t\t[prefix, @nextStr] = splitPrefix(value)\r\n\t\t\t\tif (prefix.length > 0)\r\n\t\t\t\t\t@nextLevel = 2  # continuation line\r\n\t\t\t\telse\r\n\t\t\t\t\t@nextLevel = 0\r\n\t\t\telse\r\n\t\t\t\t[@nextLevel, @nextStr] = splitLine(value, @oneIndent)\r\n\r\n\t\t\t\t# --- Try to set @oneIndent\r\n\t\t\t\tif notdefined(@oneIndent) && (@nextLevel > 0)\r\n\t\t\t\t\t# --- will return undef if no indentation\r\n\t\t\t\t\t@oneIndent = getOneIndent(value)\r\n\t\telse\r\n\t\t\t@nextLevel = 0\r\n\t\t\t@nextStr = value\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- returns hNode with keys:\r\n\t#        source\r\n\t#        str\r\n\t#        srcLevel - level in source code\r\n\t#        level    - includes added levels when #include'ing\r\n\t# --- OR undef at EOF\r\n\r\n\tfetch: () ->\r\n\r\n\t\tdbgEnter \"Fetcher.fetch\"\r\n\r\n\t\tif defined(@nextNode)\r\n\t\t\tsave = @nextNode\r\n\t\t\t@nextNode = @fetchNextNode()\r\n\t\t\tdbg \"return look ahead node\"\r\n\t\t\tdbgReturn 'Fetcher.fetch', save\r\n\t\t\treturn save\r\n\r\n\t\tdbgReturn \"Fetcher.fetch\", undef\r\n\t\treturn undef\r\n\r\n\t# ..........................................................\r\n\r\n\tpeek: () ->\r\n\r\n\t\tdbgEnter \"Fetcher.peek\"\r\n\r\n\t\tif defined(@nextNode)\r\n\t\t\tdbgReturn 'Fetcher.peek', @nextNode\r\n\t\t\treturn @nextNode\r\n\t\tdbgReturn 'Fetcher.peek', undef\r\n\t\treturn undef\r\n\r\n\t# ..........................................................\r\n\r\n\tfetchLinesAtLevel: (level) ->\r\n\r\n\t\tdbgEnter \"TreeMapper.fetchLinesAtLevel\", level\r\n\t\tlLines = []\r\n\t\twhile defined(hNode = @peek()) \\\r\n\t\t\t\t&& (hNode.isEmptyLine() || (hNode.level >= level))\r\n\t\t\t@fetch()\r\n\t\t\tlLines.push hNode.str\r\n\t\tdbgReturn \"TreeMapper.fetchLinesAtLevel\", lLines\r\n\t\treturn lLines\r\n\r\n\t# ..........................................................\r\n\r\n\tfetchBlockAtLevel: (level) ->\r\n\r\n\t\tdbgEnter \"TreeMapper.fetchBlockAtLevel\", level\r\n\t\tblock = toBlock(undented(@fetchLinesAtLevel(level)))\r\n\t\tdbgReturn \"TreeMapper.fetchBlockAtLevel\", block\r\n\t\treturn block\r\n\r\n\t# ..........................................................\r\n\t# --- Returns the next available Node\r\n\t#        - hNode.str includes any extension lines\r\n\r\n\tfetchNextNode: () ->\r\n\r\n\t\tdbgEnter 'Fetcher.fetchNextNode'\r\n\r\n\t\tif notdefined(@nextStr)\r\n\t\t\t# --- indicates EOF\r\n\t\t\tdbg 'at EOF'\r\n\t\t\tdbgReturn 'Fetcher.fetchNextNode', undef\r\n\t\t\treturn undef\r\n\r\n\t\t# --- Save current values, then refill\r\n\t\tlevel = @nextLevel\r\n\t\tstr = @nextStr\r\n\t\t@refill()\r\n\t\t@lineNum += 1\r\n\t\tdbg \"INC lineNum to #{@lineNum}\"\r\n\r\n\t\t# --- save current line number in case there are extension lines\r\n\t\torgLineNum = @lineNum\r\n\t\tdbg 'orgLineNum', orgLineNum\r\n\r\n\t\tif isNonEmptyString(str)\r\n\t\t\t# --- Check for extension lines\r\n\t\t\twhile @isExtLine(level, str, @nextLevel, @nextStr)\r\n\t\t\t\tstr += @extSep(str, @nextStr) + @nextStr\r\n\t\t\t\t@refill()\r\n\t\t\t\t@lineNum += 1\r\n\t\t\t\tdbg \"INC lineNum to #{@lineNum}\"\r\n\r\n\t\t\tif (@addLevel > 0)\r\n\t\t\t\tdbg \"add additional level #{@addLevel}\"\r\n\t\t\t\tlevel += @addLevel\r\n\r\n\t\tdbg \"create Node object\"\r\n\r\n\t\tassert isUndented(str), \"fetchNextNode: str not undented\"\r\n\t\thNode = new Node({\r\n\t\t\tstr\r\n\t\t\tlevel\r\n\t\t\tsource: @sourceInfoStr(orgLineNum),\r\n\t\t\t})\r\n\r\n\t\tdbgReturn \"Fetcher.fetchNextNode\", hNode\r\n\t\treturn hNode\r\n\r\n\t# ..........................................................\r\n\r\n\tisExtLine: (curLevel, curStr, nextLevel, nextStr) ->\r\n\r\n\t\treturn isNonEmptyString(nextStr) && (nextLevel >= curLevel+2)\r\n\r\n\t# ..........................................................\r\n\r\n\textSep: (str, nextStr) ->\r\n\t\t# --- can be overridden\r\n\r\n\t\treturn ' '\r\n\r\n\t# ..........................................................\r\n\r\n\tsourceInfoStr: (lineNum=undef) ->\r\n\t\t# --- override in FetcherInc\r\n\r\n\t\tdbgEnter 'Fetcher.sourceInfoStr', lineNum\r\n\t\tif defined(lineNum)\r\n\t\t\tassert isInteger(lineNum), \"Bad lineNum: #{OL(lineNum)}\"\r\n\t\t\tresult = \"#{@hSourceInfo.filename}/#{lineNum}\"\r\n\t\telse\r\n\t\t\tresult = \"#{@hSourceInfo.filename}\"\r\n\t\tdbgReturn 'Fetcher.sourceInfoStr', result\r\n\t\treturn result\r\n\r\n\t# ..........................................................\r\n\t# --- GENERATOR\r\n\r\n\tallNodes: () ->\r\n\r\n\t\tdbgEnter \"Fetcher.allNodes\"\r\n\r\n\t\twhile defined(hNode = @fetch())\r\n\t\t\tdbg 'hNode', hNode\r\n\t\t\tif @procNode(hNode)\r\n\t\t\t\tdbgYield \"Fetcher.allNodes\", hNode\r\n\t\t\t\tyield hNode\r\n\t\t\t\tdbgResume \"Fetcher.allNodes\"\r\n\r\n\t\tdbgReturn \"Fetcher.allNodes\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tprocNode: (hNode) ->\r\n\t\t# --- does nothing, but can be overridden to\r\n\t\t#     add additional node processing\r\n\t\t# --- return value is true to keep the node, false to discard\r\n\r\n\t\tassert defined(hNode), \"hNode not defined\"\r\n\t\treturn true\r\n\r\n\t# ..........................................................\r\n\r\n\tgetBlock: (oneIndent=\"\\t\") ->\r\n\r\n\t\tdbgEnter \"Fetcher.getBlock\", oneIndent\r\n\t\tlLines = []\r\n\t\tfor hNode from @allNodes()\r\n\t\t\tdbg 'GOT hNode', hNode\r\n\t\t\tline = hNode.getLine({oneIndent})\r\n\t\t\tdbg \"line = #{OL(line)}\"\r\n\t\t\tlLines.push line\r\n\t\tresult = @finalizeBlock undented(toBlock(lLines))\r\n\t\tdbgReturn \"Fetcher.getBlock\", result\r\n\t\treturn result\r\n\r\n\t# ..........................................................\r\n\r\n\tgetLines: (oneIndent=\"\\t\") ->\r\n\r\n\t\tdbgEnter \"Fetcher.getLines\", oneIndent\r\n\t\tlLines = []\r\n\t\tfor hNode from @allNodes()\r\n\t\t\tdbg 'GOT hNode', hNode\r\n\t\t\tline = hNode.getLine({oneIndent})\r\n\t\t\tdbg \"line = #{OL(line)}\"\r\n\t\t\tlLines.push line\r\n\t\tresult = @finalizeBlock undented(toArray(lLines))\r\n\t\tdbgReturn \"Fetcher.getLines\", result\r\n\t\treturn result\r\n\r\n\t# ..........................................................\r\n\r\n\tfinalizeBlock: (block) ->\r\n\t\t# --- block may, in fact, be either a string or an array of strings\r\n\t\t#     override should check\r\n\r\n\t\treturn block\r\n"
  ]
}
{
  "version": 3,
  "file": "FuncHereDoc.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\FuncHereDoc.test.coffee"
  ],
  "names": [],
  "mappings": ";AAAyB;AAEzB,OAAA;EAAQ,KAAR;EAAe,QAAf;EAAyB,EAAzB;CAAA,MAAA;;AACA,OAAA;EAAQ,MAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,UAAR;EAAoB,KAApB;CAAA,MAAA;;AACA,OAAA;EAAQ,GAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,OAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,UAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,UAAR;EAAoB,eAApB;CAAA,MAAA;;AACA,OAAA,+BATyB;;;AAazB,CAAC,QAAA,CAAA,CAAA;AACD,MAAA,aAAA,EAAA;EAAO,gBAAN,MAAA,cAAA,QAA4B,WAA5B;IAEC,cAAgB,CAAC,KAAD,CAAA;MAEf,MAAA,CAAO,QAAA,CAAS,KAAT,CAAP,EAAwB,CAAA,cAAA,CAAA,CAAiB,EAAA,CAAG,KAAH,CAAjB,CAAA,CAAxB;AACA,aAAO,UAAA,CAAW,KAAX;IAHQ;;EAFjB;EAOA,MAAA,GAAS,IAAI,aAAJ,CAAA,EAPV;;EAWC,MAAM,CAAC,KAAP,CAAa,CAAA;WAAA,CAAb,EAIE,gBAJF,EAXD;;;EAoBC,MAAM,CAAC,KAAP,CAAa,CAAA;YAAA,CAAb,EAIE,UAJF,EApBD;;;EA6BC,MAAM,CAAC,KAAP,CAAa,CAAA;qBAAA,CAAb,EAIE,0BAJF,EA7BD;;;EAsCC,MAAM,CAAC,KAAP,CAAa,CAAA;aAAA,CAAb,EAIE,kBAJF,EAtCD;;SA8CC,MAAM,CAAC,KAAP,CAAa,CAAA;YAAA,CAAb,EAIE,mBAJF;AA/CA,CAAD,CAAA,CAAA,EAbyB;;;;AAuEzB,CAAC,QAAA,CAAA,CAAA;AACD,MAAA;EAAC,OAAA,GAAU,IAAI,OAAJ,CAAY,CAAA;;;;AAAA,CAAZ;SAQV,KAAA,CAAM,eAAA,CAAgB,gBAAhB,EAAkC,OAAlC,CAAN,EACE,uDADF;AATA,CAAD,CAAA,CAAA,EAvEyB;;;AAuFzB,CAAC,QAAA,CAAA,CAAA;AAED,MAAA,WAAA,EAAA;EAAO,cAAN,MAAA,YAAA,QAA0B,WAA1B;IAEC,cAAgB,CAAC,OAAD,CAAA;AAElB,UAAA;MAAG,MAAA,CAAO,QAAA,CAAS,OAAT,CAAP,EAA0B,CAAA,cAAA,CAAA,CAAiB,EAAA,CAAG,OAAH,CAAjB,CAAA,CAA1B;MACA,OAAA,GAAU;QAAC,OAAD;QAAU,MAAA,EAAQ;MAAlB;AACV,aAAO,GAAA,CAAI,OAAJ,EAAa,UAAb;IAJQ;;EAFjB;EAQA,WAAA,GAAc,IAAI,WAAJ,CAAA,EARf;;EAYC,WAAW,CAAC,KAAZ,CAAkB,CAAA;;WAAA,CAAlB,EAIO,CAAA,sBAAA,CAJP;SAQA,WAAW,CAAC,KAAZ,CAAkB,CAAA;;WAAA,CAAlB,EAIO,CAAA,yBAAA,CAJP;AAtBA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# FuncHereDoc.test.coffee\n\nimport {undef, isString, OL} from '@jdeighan/base-utils'\nimport {assert} from '@jdeighan/base-utils/exceptions'\nimport {UnitTester, equal} from '@jdeighan/base-utils/utest'\nimport {map} from '@jdeighan/mapper'\nimport {Fetcher} from '@jdeighan/mapper/fetcher'\nimport {TreeMapper} from '@jdeighan/mapper/tree'\nimport {mapHereDoc, replaceHereDocs} from '@jdeighan/mapper/heredoc'\nimport '@jdeighan/mapper/funcheredoc'\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tclass HereDocTester extends UnitTester\n\n\t\ttransformValue: (block) ->\n\n\t\t\tassert isString(block), \"not a string: #{OL(block)}\"\n\t\t\treturn mapHereDoc(block)\n\n\ttester = new HereDocTester()\n\n\t# ------------------------------------------------------------------------\n\n\ttester.equal \"\"\"\n\t\t\t() =>\n\t\t\t\tcount += 1\n\t\t\t\"\"\",\n\t\t\t\"`()=>count+=1`\"\n\n\t# ------------------------------------------------------------------------\n\t# Function block, with no name or parameters\n\n\ttester.equal \"\"\"\n\t\t\t() =>\n\t\t\t\treturn true\n\t\t\t\"\"\",\n\t\t\t\"`()=>!0`\"\n\n\t# ------------------------------------------------------------------------\n\t# Function block, with no name but one parameter\n\n\ttester.equal \"\"\"\n\t\t\t(evt) =>\n\t\t\t\tconsole.log evt.name\n\t\t\t\"\"\",\n\t\t\t\"`o=>console.log(o.name)`\"\n\n\t# ------------------------------------------------------------------------\n\t# Function block, with no name but one parameter\n\n\ttester.equal \"\"\"\n\t\t\t(  evt  )     =>\n\t\t\t\tLOG evt.name\n\t\t\t\"\"\",\n\t\t\t\"`a=>LOG(a.name)`\"\n\n\t# ---------------------------------------------------------------------------\n\n\ttester.equal \"\"\"\n\t\t\t(evt) =>\n\t\t\t\tLOG 'click'\n\t\t\t\"\"\",\n\t\t\t'`c=>LOG(\"click\")`'\n\n\t)()\n\n# ------------------------------------------------------------------------\n# --- HEREDOC handling - function\n\n(() ->\n\tfetcher = new Fetcher(\"\"\"\n\t\t\t(event) =>\n\t\t\t\tevent.preventDefault()\n\t\t\t\talert 'clicked'\n\t\t\t\treturn\n\n\t\t\t\"\"\")\n\n\tequal replaceHereDocs(\"on:click={<<<}\", fetcher),\n\t\t\t'on:click={`e=>{e.preventDefault(),alert(\"clicked\")}`}'\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\n\tclass CieloTester extends UnitTester\n\n\t\ttransformValue: (content) ->\n\n\t\t\tassert isString(content), \"not a string: #{OL(content)}\"\n\t\t\thSource = {content, source: 'cielo.test.js'}\n\t\t\treturn map(hSource, TreeMapper)\n\n\tcieloTester = new CieloTester()\n\n\t# ..........................................................\n\n\tcieloTester.equal \"\"\"\n\t\t\thandler = {<<<}\n\t\t\t\t() =>\n\t\t\t\t\treturn 42\n\t\t\t\"\"\", \"\"\"\n\t\t\thandler = {`()=>42`}\n\t\t\t\"\"\"\n\n\tcieloTester.equal \"\"\"\n\t\t\thandler = {<<<}\n\t\t\t\t(x, y) =>\n\t\t\t\t\treturn 42\n\t\t\t\"\"\", \"\"\"\n\t\t\thandler = {`(a,b)=>42`}\n\t\t\t\"\"\"\n\t)()\n"
  ]
}
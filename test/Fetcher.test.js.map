{
  "version": 3,
  "file": "Fetcher.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\Fetcher.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Fetcher.test.coffee\n\nimport {\n\tundef, defined, spaces, toArray, toBlock,\n\t} from '@jdeighan/base-utils'\nimport {setDebugging} from '@jdeighan/base-utils/debug'\nimport {utest, UnitTester} from '@jdeighan/unit-tester'\n\nimport {Fetcher} from '@jdeighan/mapper/fetcher'\n\n# ---------------------------------------------------------------------------\n# --- Fetcher should:\n#        ✓ handle any iterable\n#        ✓ remove trailing whitespace\n#        ✓ handle extension lines\n#        ✓ stop at __END__\n#        ✓ implement @sourceInfoStr()\n#        ✓ handle either spaces or TABs as indentation\n#        ✓ implement generator allNodes()\n#        ✓ implement getBlock()\n#        ✓ allow override of extSep()\n#        ✓ allow override of finalizeBlock()\n# ---------------------------------------------------------------------------\n\n(() ->\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (hInput) ->\n\n\t\t\tfetcher = new Fetcher(hInput)\n\n\t\t\tlLines = []\n\t\t\twhile defined(hNode = fetcher.fetch())\n\t\t\t\tlLines.push \"#{hNode.level} #{hNode.str}\"\n\t\t\treturn toBlock(lLines)\n\n\ttester = new MyTester()\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 41, \"\"\"\n\t\tabc\n\t\tdef\n\t\t\"\"\", \"\"\"\n\t\t0 abc\n\t\t0 def\n\t\t\"\"\"\n\n\t# ----------------------------------------------------------\n\n\tgen = () ->\n\t\tyield 'abc'\n\t\tyield 'def'\n\t\treturn\n\n\ttester.equal 56, gen(), \"\"\"\n\t\t0 abc\n\t\t0 def\n\t\t\"\"\"\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 63, ['abc  ', 'def\\t\\t'], \"0 abc\\n0 def\"\n\n\t# ----------------------------------------------------------\n\t# NOTE: Our output does not take level into account\n\n\ttester.equal 68, \"\"\"\n\t\tabc\n\t\t\tdef\n\t\tghi\n\t\t\"\"\", \"\"\"\n\t\t0 abc\n\t\t1 def\n\t\t0 ghi\n\t\t\"\"\"\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 80, \"\"\"\n\t\tabc\n\t\t\t\tdef\n\t\tghi\n\t\t\"\"\", \"\"\"\n\t\t0 abc def\n\t\t0 ghi\n\t\t\"\"\"\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 91, \"\"\"\n\t\tabc\n\t\tdef\n\t\t__END__\n\t\tghi\n\t\t\"\"\", \"\"\"\n\t\t0 abc\n\t\t0 def\n\t\t\"\"\"\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 103, [\"abc\", \"def\"], \"\"\"\n\t\t0 abc\n\t\t0 def\n\t\t\"\"\"\n\n\t# ----------------------------------------------------------\n\t# --- test TABs\n\n\ttester.equal 111, [\"abc\", \"\\tdef\", \"\\t\\tghi\"], \"\"\"\n\t\t0 abc\n\t\t1 def\n\t\t2 ghi\n\t\t\"\"\"\n\n\t# ----------------------------------------------------------\n\t# --- test spaces\n\n\ttester.equal 120, [\"abc\", spaces(3)+\"def\", spaces(6)+\"ghi\"], \"\"\"\n\t\t0 abc\n\t\t1 def\n\t\t2 ghi\n\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tfetcher = new Fetcher(\"\"\"\n\t\tabc\n\t\t\t\tdef\n\t\t\t\tghi\n\t\tjkl\n\t\t\"\"\")\n\n\tnode1 = fetcher.fetch()\n\tutest.like 139, node1, {\n\t\tstr: 'abc def ghi'\n\t\tsource: \"<unknown>/1\"\n\t\t}\n\n\tnode2 = fetcher.fetch()\n\tutest.like 145, node2, {\n\t\tstr: 'jkl'\n\t\tsource: \"<unknown>/4\"\n\t\t}\n\n\tnode3 = fetcher.fetch()\n\tutest.equal 151, node3, undef\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tfetcher = new Fetcher({\n\t\tsource: 'test.coffee',\n\t\tcontent: \"\"\"\n\t\t\tabc\n\t\t\t\t\tdef\n\t\t\t\t\tghi\n\t\t\tjkl\n\t\t\t\"\"\"})\n\n\tnode1 = fetcher.fetch()\n\tutest.like 168, node1, {\n\t\tstr: 'abc def ghi'\n\t\tsource: \"test.coffee/1\"\n\t\t}\n\n\tnode2 = fetcher.fetch()\n\tutest.like 174, node2, {\n\t\tstr: 'jkl'\n\t\tsource: \"test.coffee/4\"\n\t\t}\n\n\tnode3 = fetcher.fetch()\n\tutest.equal 180, node3, undef\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tfetcher = new Fetcher({\n\t\tsource: 'file.coffee'\n\t\tcontent: \"\"\"\n\t\t\tabc\n\t\t\t\t\tdef\n\t\t\t\t\tghi\n\t\t\tjkl\n\t\t\t\"\"\"\n\t\t})\n\n\tnode1 = fetcher.fetch()\n\tutest.like 198, node1, {\n\t\tstr: 'abc def ghi'\n\t\tsource: \"file.coffee/1\"\n\t\t}\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test allNodes()\n\n(() ->\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (hInput) ->\n\n\t\t\tfetcher = new Fetcher(hInput)\n\t\t\treturn Array.from(fetcher.allNodes())\n\n\ttester = new MyTester()\n\n\t# ----------------------------------------------------------\n\n\ttester.like 219, \"\"\"\n\t\tabc\n\t\tdef\n\t\t\"\"\", [\n\t\t\t{str: 'abc', level: 0}\n\t\t\t{str: 'def', level: 0}\n\t\t\t]\n\n\t# ----------------------------------------------------------\n\n\ttester.like 229, \"\"\"\n\t\tabc\n\t\t\tdef\n\t\tghi\n\t\t\"\"\", [\n\t\t\t{str: 'abc', level: 0}\n\t\t\t{str: 'def', level: 1}\n\t\t\t{str: 'ghi', level: 0}\n\t\t\t]\n\n\t# ----------------------------------------------------------\n\n\ttester.like 241, \"\"\"\n\t\tabc\n\t\t\t\tdef\n\t\tghi\n\t\t\"\"\", [\n\t\t\t{str: 'abc def', level: 0}\n\t\t\t{str: 'ghi', level: 0}\n\t\t\t]\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test getBlock()\n\n(() ->\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (hInput) ->\n\n\t\t\tfetcher = new Fetcher(hInput)\n\t\t\treturn fetcher.getBlock()\n\n\ttester = new MyTester()\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 267, \"\"\"\n\t\tabc\n\t\tdef\n\t\t\"\"\", \"\"\"\n\t\tabc\n\t\tdef\n\t\t\"\"\"\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 277, \"\"\"\n\t\tabc\n\t\t\tdef\n\t\tghi\n\t\t\"\"\", \"\"\"\n\t\tabc\n\t\t\tdef\n\t\tghi\n\t\t\"\"\"\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 289, \"\"\"\n\t\tabc\n\t\t\t\tdef\n\t\tghi\n\t\t\"\"\", \"\"\"\n\t\tabc def\n\t\tghi\n\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test getLines()\n\n(() ->\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (hInput) ->\n\n\t\t\tfetcher = new Fetcher(hInput)\n\t\t\treturn fetcher.getLines()\n\n\ttester = new MyTester()\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 315, \"\"\"\n\t\tabc\n\t\tdef\n\t\t\"\"\", [\n\t\t'abc'\n\t\t'def'\n\t\t]\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 325, \"\"\"\n\t\tabc\n\t\t\tdef\n\t\tghi\n\t\t\"\"\", [\n\t\t'abc'\n\t\t'\tdef'\n\t\t'ghi'\n\t\t]\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 337, \"\"\"\n\t\tabc\n\t\t\t\tdef\n\t\tghi\n\t\t\"\"\", [\n\t\t'abc def'\n\t\t'ghi'\n\t\t]\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\t# --- Don't include a space char when adding extension lines\n\n\tclass ZhFetcher extends Fetcher\n\n\t\textSep: (str, nextStr) ->\n\t\t\treturn ''\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (hInput) ->\n\n\t\t\tfetcher = new ZhFetcher(hInput)\n\t\t\treturn fetcher.getBlock()\n\n\ttester = new MyTester()\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 369, \"\"\"\n\t\t你好\n\t\t\t\t约翰\n\t\t我在这里\n\t\t\"\"\", \"\"\"\n\t\t你好约翰\n\t\t我在这里\n\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\t# --- capitalize all text returned by getBlock()\n\n\tclass CapFetcher extends Fetcher\n\n\t\tfinalizeBlock: (block) ->\n\t\t\treturn block.toUpperCase()\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (hInput) ->\n\n\t\t\tfetcher = new CapFetcher(hInput)\n\t\t\treturn fetcher.getBlock()\n\n\ttester = new MyTester()\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 401, \"\"\"\n\t\tabc\n\t\t\t\tdef\n\t\tghi\n\t\t\"\"\", \"\"\"\n\t\tABC DEF\n\t\tGHI\n\t\t\"\"\"\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\t# --- test option 'noLevels'\n\n\tclass MyTester extends UnitTester\n\n\t\ttransformValue: (hInput) ->\n\n\t\t\tfetcher = new Fetcher(hInput, {noLevels: true})\n\t\t\treturn fetcher.getBlock()\n\n\ttester = new MyTester()\n\n\t# ----------------------------------------------------------\n\n\ttester.equal 428, \"\"\"\n\t\tabc\n\t\t\tdef\n\t\tghi\n\t\t\"\"\", \"\"\"\n\t\tabc def\n\t\tghi\n\t\t\"\"\"\n\n\ttester.equal 437, \"\"\"\n\t\tabc\n\t\t   def\n\t\tghi\n\t\t\"\"\", \"\"\"\n\t\tabc def\n\t\tghi\n\t\t\"\"\"\n\n\t)()\n"
  ]
}
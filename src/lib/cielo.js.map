{
  "version": 3,
  "file": "cielo.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\cielo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# cielo.coffee\r\n\r\nimport {\r\n\tundef, defined, OL, className, getOptions,\r\n\tisEmpty, nonEmpty, isString, isHash, isArray, toBlock,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {LOG} from '@jdeighan/base-utils/log'\r\nimport {\r\n\tdbg, dbgEnter, dbgReturn,\r\n\t} from '@jdeighan/base-utils/debug'\r\nimport {slurp, barf} from '@jdeighan/base-utils/fs'\r\nimport {\r\n\tindentLevel, indented, isUndented, splitLine,\r\n\t} from '@jdeighan/coffee-utils/indent'\r\nimport {joinBlocks} from '@jdeighan/coffee-utils/block'\r\nimport {\r\n\twithExt, newerDestFileExists, shortenPath,\r\n\t} from '@jdeighan/coffee-utils/fs'\r\n\r\nimport {TreeMapper} from '@jdeighan/mapper/tree'\r\nimport {coffeeCodeToJS, coffeeExprToJS} from '@jdeighan/mapper/coffee'\r\nimport {\r\n\tgetNeededSymbols, buildImportList,\r\n\t} from '@jdeighan/mapper/symbols'\r\nimport {map, Mapper} from '@jdeighan/mapper'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport cieloToJSCode = (hInput) ->\r\n\r\n\tdbgEnter 'cieloToJSCode', hInput\r\n\tmapper = new CieloToJSCodeMapper(hInput)\r\n\tjsCode = mapper.getBlock()\r\n\tlNeededSymbols = mapper.lNeededSymbols\r\n\tif defined(lNeededSymbols)\r\n\t\t# --- Prepend needed imports\r\n\t\tfullpath = mapper.hSourceInfo.fullpath\r\n\t\t{lImports, lNotFound} = buildImportList(lNeededSymbols, fullpath)\r\n\t\tdbg \"lImports\", lImports\r\n\t\tdbg 'lNotFound', lNotFound\r\n\r\n\t\t# --- append ';' to import statements\r\n\t\tlImports = for stmt in lImports\r\n\t\t\tstmt + ';'\r\n\r\n\t\t# --- joinBlocks() flattens all its arguments to array of strings\r\n\t\tjsCode = joinBlocks(lImports, jsCode)\r\n\r\n\tdbgReturn 'cieloToJSCode', jsCode\r\n\treturn jsCode\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport cieloToJSExpr = (hInput) ->\r\n\r\n\tdbgEnter 'cieloToJSExpr', hInput\r\n\tmapper = new CieloToJSExprMapper(hInput)\r\n\tjsExpr = mapper.getBlock()\r\n\r\n\t# --- mapper possibly has key lNeededSymbols\r\n\tresult = {\r\n\t\tcode: jsExpr\r\n\t\tlNeededSymbols: mapper.lNeededSymbols\r\n\t\t}\r\n\tdbgReturn 'cieloToJSExpr', result\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class CieloMapper extends TreeMapper\r\n\r\n\tmapComment: (hNode) ->\r\n\r\n\t\t# --- Retain comments\r\n\t\treturn hNode.str\r\n\r\n\t# ..........................................................\r\n\r\n\tvisitCmd: (hNode) ->\r\n\r\n\t\tdbgEnter \"CieloMapper.visitCmd\", hNode\r\n\t\t{uobj, srcLevel, level} = hNode\r\n\t\t{cmd, argstr} = uobj\r\n\r\n\t\tswitch cmd\r\n\t\t\twhen 'reactive'\r\n\t\t\t\t# --- This allows either a statement on the same line\r\n\t\t\t\t#     OR following indented text\r\n\t\t\t\t#     but not both\r\n\t\t\t\tcode = @containedText(hNode, argstr)\r\n\t\t\t\tdbg 'code', code\r\n\t\t\t\tif (code == argstr)\r\n\t\t\t\t\tresult = toBlock([\r\n\t\t\t\t\t\tindented('# |||| $:', level)\r\n\t\t\t\t\t\tindented(code, level)\r\n\t\t\t\t\t\t])\r\n\t\t\t\telse\r\n\t\t\t\t\tresult = toBlock([\r\n\t\t\t\t\t\tindented('# |||| $: {', level)\r\n\t\t\t\t\t\tindented(code, level)\r\n\t\t\t\t\t\tindented('# |||| }', level)\r\n\t\t\t\t\t\t])\r\n\t\t\t\tdbgReturn \"CieloMapper.visitCmd\", result\r\n\t\t\t\treturn result\r\n\r\n\t\t\telse\r\n\t\t\t\tsuper(hNode)\r\n\r\n\t\tdbgReturn \"CieloMapper.visitCmd\", undef\r\n\t\treturn undef\r\n\r\n\t# ..........................................................\r\n\r\n\tcontainedText: (hNode, inlineText) ->\r\n\t\t# --- has side effect of fetching all indented text\r\n\r\n\t\tdbgEnter \"CieloMapper.containedText\", hNode, inlineText\r\n\t\t{srcLevel} = hNode\r\n\r\n\t\tblock = @fetchBlockAtLevel(srcLevel+1)\r\n\r\n\t\tdbg \"inline text\", inlineText\r\n\t\tdbg \"indented text\", block\r\n\r\n\t\tif nonEmpty(block)\r\n\t\t\tassert isEmpty(inlineText),\r\n\t\t\t\t\"node #{OL(hNode)} has both inline text and indented text\"\r\n\t\t\tresult = block\r\n\t\telse if isEmpty(inlineText)\r\n\t\t\tresult = ''\r\n\t\telse\r\n\t\t\tresult = inlineText\r\n\t\tdbgReturn \"CieloMapper.containedText\", result\r\n\t\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class CieloToJSCodeMapper extends CieloMapper\r\n\r\n\tfinalizeBlock: (coffeeCode) ->\r\n\r\n\t\tdbgEnter \"CieloToJSCodeMapper.finalizeBlock\", coffeeCode\r\n\t\ttry\r\n\t\t\tfullpath = @hSourceInfo.fullpath\r\n\t\t\tjsCode = coffeeCodeToJS(coffeeCode)\r\n\t\tcatch err\r\n\t\t\tcroak err, \"Original Code\", coffeeCode\r\n\r\n\t\tlNeededSymbols = getNeededSymbols(coffeeCode)\r\n\t\tif nonEmpty(lNeededSymbols)\r\n\t\t\t@lNeededSymbols = lNeededSymbols\r\n\t\tdbgReturn \"CieloToJSCodeMapper.finalizeBlock\", jsCode\r\n\t\treturn jsCode\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class CieloToJSExprMapper extends CieloMapper\r\n\r\n\tfinalizeBlock: (coffeeExpr) ->\r\n\r\n\t\tdbgEnter \"CieloToJSExprMapper.finalizeBlock\", coffeeExpr\r\n\t\ttry\r\n\t\t\tfullpath = @hSourceInfo.fullpath\r\n\t\t\tjsExpr = coffeeExprToJS(coffeeExpr)\r\n\t\tcatch err\r\n\t\t\tcroak err, \"Original Expr\", coffeeExpr\r\n\r\n\t\tlNeededSymbols = getNeededSymbols(coffeeExpr)\r\n\t\tif nonEmpty(lNeededSymbols)\r\n\t\t\t@lNeededSymbols = lNeededSymbols\r\n\r\n\t\tdbgReturn \"CieloToJSExprMapper.finalizeBlock\", jsExpr\r\n\t\treturn jsExpr\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport cieloFileToJS = (srcPath, destPath=undef, hOptions={}) ->\r\n\t# --- cielo => js\r\n\t#     Valid Options:\r\n\t#        saveAST\r\n\t#        force\r\n\t#        premapper\r\n\t#        postmapper\r\n\r\n\tif notdefined(destPath)\r\n\t\tdestPath = withExt(srcPath, '.js')\r\n\t{force, saveAST} = getOptions(hOptions)\r\n\tif force || ! newerDestFileExists(srcPath, destPath)\r\n\t\tcieloCode = slurp(srcPath)\r\n\t\tif saveAST\r\n\t\t\tdumpfile = withExt(srcPath, '.ast')\r\n\t\t\tlNeeded = getNeededSymbols(cieloCode, {dumpfile})\r\n\t\t\tif (lNeeded == undef) || (lNeeded.length == 0)\r\n\t\t\t\tdbg \"NO NEEDED SYMBOLS in #{shortenPath(destPath)}:\"\r\n\t\t\telse\r\n\t\t\t\tn = lNeeded.length\r\n\t\t\t\tword = if (n==1) then'SYMBOL' else 'SYMBOLS'\r\n\t\t\t\tdbg \"#{n} NEEDED #{word} in #{shortenPath(destPath)}:\"\r\n\t\t\t\tfor sym in lNeeded\r\n\t\t\t\t\tdbg \"   - #{sym}\"\r\n\t\tjsCode = cieloToJSCode({content: cieloCode, source: srcPath})\r\n\t\tbarf jsCode, destPath\r\n\treturn\r\n"
  ]
}
{
  "version": 3,
  "file": "RunTimeStack.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\RunTimeStack.coffee"
  ],
  "names": [],
  "mappings": ";AAAqB;AAErB,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,EAD7B;EACiC,MADjC;EACyC,OADzC;CAAA,MAAA;;AAGA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA;;AACA,OAAA;EAAQ,GAAR;EAAa,QAAb;CAAA,MAAA;;AAEA,OAAA;EAAQ,IAAR;CAAA,MAAA,wBARqB;;;AAYrB,OAAA,IAAa,eAAN,MAAA,aAAA;EAEN,WAAa,CAAA,CAAA;IAEZ,IAAC,CAAA,MAAD,GAAU,GAFE;EAAA,CAAd;;;;EAMC,IAAM,CAAA,CAAA;AAEL,WAAO,IAAC,CAAA,MAAM,CAAC;EAFV,CANP;;;EAYC,UAAY,CAAC,KAAD,CAAA;IAEX,IAAC,CAAA,SAAD,CAAW,KAAX;IACA,IAAC,CAAA,MAAM,CAAC,IAAC,CAAA,MAAM,CAAC,MAAR,GAAiB,CAAlB,CAAP,GAA8B;EAHnB,CAZb;;;EAoBC,IAAM,CAAC,KAAD,CAAA;IAEL,IAAC,CAAA,SAAD,CAAW,KAAX;IACA,IAAC,CAAA,MAAM,CAAC,IAAR,CAAa,KAAb;EAHK,CApBP;;;EA4BC,GAAK,CAAA,CAAA;AAEN,QAAA;IAAE,MAAA,CAAQ,IAAC,CAAA,MAAM,CAAC,MAAR,GAAiB,CAAzB,EAA6B,sBAA7B;IACA,KAAA,GAAQ,IAAC,CAAA,MAAM,CAAC,GAAR,CAAA;IACR,IAAC,CAAA,SAAD,CAAW,KAAX;AACA,WAAO;EALH,CA5BN;;;EAqCC,OAAS,CAAA,CAAA;AAER,WAAQ,IAAC,CAAA,MAAM,CAAC,MAAR,KAAkB;EAFlB,CArCV;;;EA2CC,QAAU,CAAA,CAAA;AAET,WAAQ,IAAC,CAAA,MAAM,CAAC,MAAR,GAAiB;EAFhB,CA3CX;;;EAiDC,GAAK,CAAA,CAAA;AAEN,QAAA;IAAE,IAAI,IAAC,CAAA,MAAM,CAAC,MAAR,KAAkB,CAAtB;AACC,aAAO,MADR;;IAEA,KAAA,GAAQ,IAAC,CAAA,MAAM,CAAC,IAAC,CAAA,MAAM,CAAC,MAAR,GAAiB,CAAlB;IACf,IAAC,CAAA,SAAD,CAAW,KAAX;AACA,WAAO;EANH,CAjDN;;;EA2DC,IAAM,CAAA,CAAA;AAEP,QAAA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA;IAAE,MAAA,GAAS,CAAC,CAAA,WAAA,CAAA,CAAc,IAAC,CAAA,MAAM,CAAC,MAAtB,CAAA,WAAA,CAAD;AACT;IAAA,KAAA,qCAAA;;MACC,IAAA,GAAO,IAAI,CAAC,SAAL,CAAe,KAAf,EAAsB,KAAtB,EAA6B,CAA7B;MACP,MAAM,CAAC,IAAP,CAAY,IAAZ;IAFD;IAGA,MAAM,CAAC,IAAP,CAAY,yBAAZ;AACA,WAAO,OAAA,CAAQ,MAAR;EAPF,CA3DP;;;EAsEC,SAAW,CAAC,KAAD,CAAA,EAAA;;;IAIV,MAAA,CAAQ,KAAA,YAAiB,IAAzB,EAAgC,YAAhC;IACA,MAAA,CAAO,MAAA,CAAO,KAAK,CAAC,IAAb,CAAP,EAA2B,CAAA,oBAAA,CAAA,CAAuB,EAAA,CAAG,KAAH,CAAvB,CAAA,CAA3B;EALU;;AAxEL",
  "sourcesContent": [
    "# RunTimeStack.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, OL, isHash, toBlock,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\r\n\r\nimport {Node} from '@jdeighan/mapper/node'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class RunTimeStack\r\n\r\n\tconstructor: () ->\r\n\r\n\t\t@lStack = []     # contains Node objects\r\n\r\n\t# ..........................................................\r\n\r\n\tsize: () ->\r\n\r\n\t\treturn @lStack.length\r\n\r\n\t# ..........................................................\r\n\r\n\treplaceTOS: (hNode) ->\r\n\r\n\t\t@checkNode hNode\r\n\t\t@lStack[@lStack.length - 1] = hNode\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tpush: (hNode) ->\r\n\r\n\t\t@checkNode hNode\r\n\t\t@lStack.push hNode\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tpop: () ->\r\n\r\n\t\tassert (@lStack.length > 0), \"pop() on empty stack\"\r\n\t\thNode = @lStack.pop()\r\n\t\t@checkNode hNode\r\n\t\treturn hNode\r\n\r\n\t# ..........................................................\r\n\r\n\tisEmpty: () ->\r\n\r\n\t\treturn (@lStack.length == 0)\r\n\r\n\t# ..........................................................\r\n\r\n\tnonEmpty: () ->\r\n\r\n\t\treturn (@lStack.length > 0)\r\n\r\n\t# ..........................................................\r\n\r\n\tTOS: () ->\r\n\r\n\t\tif (@lStack.length == 0)\r\n\t\t\treturn undef\r\n\t\thNode = @lStack[@lStack.length - 1]\r\n\t\t@checkNode hNode\r\n\t\treturn hNode\r\n\r\n\t# ..........................................................\r\n\r\n\tdesc: () ->\r\n\r\n\t\tlLines = [\"--- STACK (#{@lStack.length} items) ---\"]\r\n\t\tfor hNode in @lStack\r\n\t\t\titem = JSON.stringify(hNode, undef, 3)\r\n\t\t\tlLines.push item\r\n\t\tlLines.push \"-----------------------\"\r\n\t\treturn toBlock(lLines)\r\n\r\n\t# ..........................................................\r\n\r\n\tcheckNode: (hNode) ->\r\n\t\t# --- Each node should have a key named hUser - a hash\r\n\t\t#     hUser should have a key named _parent - a hash\r\n\r\n\t\tassert (hNode instanceof Node), \"not a Node\"\r\n\t\tassert isHash(hNode.hEnv), \"missing hEnv key in #{OL(hNode)}\"\r\n\t\treturn\r\n"
  ]
}
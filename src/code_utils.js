// Generated by CoffeeScript 2.5.1
  // code_utils.coffee
import {
  strict as assert
} from 'assert';

import CoffeeScript from 'coffeescript';

import {
  say,
  undef,
  pass,
  error,
  isEmpty,
  nonEmpty,
  isComment,
  isString,
  unitTesting,
  escapeStr,
  firstLine
} from '@jdeighan/coffee-utils';

import {
  slurp,
  barf,
  mydir,
  pathTo
} from '@jdeighan/coffee-utils/fs';

import {
  debug,
  debugging,
  startDebugging,
  endDebugging
} from '@jdeighan/coffee-utils/debug';

import {
  tamlStringify
} from '@jdeighan/string-input/convert';

import {
  splitLine
} from '@jdeighan/coffee-utils/indent';

import {
  CodeWalker
} from './CodeWalker.js';

import {
  PLLParser
} from '@jdeighan/string-input/pll';

// ---------------------------------------------------------------------------
export var getMissingSymbols = function(code, hOptions = {}) {
  var hMissingSymbols, walker;
  // --- Valid options:
  //        dumpfile: <filepath>   - where to dump ast
  //        debug: <bool>          - turn on debugging
  if (hOptions.debug) {
    startDebugging;
  }
  walker = new CodeWalker(code);
  hMissingSymbols = walker.getMissingSymbols();
  if (hOptions.debug) {
    endDebugging;
  }
  if (hOptions.dumpfile) {
    barf(hOptions.dumpfile, "AST:\n" + tamlStringify(walker.ast));
  }
  return hMissingSymbols;
};

// ---------------------------------------------------------------------------
export var getAvailSymbols = function() {
  var SymbolParser, body, contents, filepath, hItem, hSymbols, i, j, k, len, len1, len2, lib, ref, sym, tree;
  filepath = pathTo('.symbols', mydir(import.meta.url), 'up');
  contents = slurp(filepath);
  SymbolParser = class SymbolParser extends PLLParser {
    mapString(line, level) {
      if (level === 0) {
        return line;
      } else if (level === 1) {
        return line.split(/\s+/).filter(function(s) {
          return nonEmpty(s);
        });
      } else {
        return error(`Bad .symbols file - level = ${level}`);
      }
    }

  };
  tree = new SymbolParser(contents).getTree();
  hSymbols = {}; // { <symbol>: <lib>, ... }
  for (i = 0, len = tree.length; i < len; i++) {
    ({
      node: lib,
      body
    } = tree[i]);
    for (j = 0, len1 = body.length; j < len1; j++) {
      hItem = body[j];
      ref = hItem.node;
      for (k = 0, len2 = ref.length; k < len2; k++) {
        sym = ref[k];
        assert(hSymbols[sym] == null, `dup symbol: '${sym}'`);
        hSymbols[sym] = lib;
      }
    }
  }
  return hSymbols;
};

// ---------------------------------------------------------------------------
export var getNeededImports = function(code, hOptions = {}) {
  var hMissing, hNeeded, hSymbols, i, j, lImports, lStillMissing, len, len1, lib, ref, ref1, sym, symbols;
  // --- Valid options:
  //        dumpfile: <filepath>   - where to dump ast
  //        debug: <bool>          - turn on debugging
  // --- returns [lImports, lStillMissing]
  hMissing = getMissingSymbols(code, hOptions);
  hSymbols = getAvailSymbols();
  hNeeded = {}; // { <lib>: [<symbol>, ...], ...}
  lStillMissing = [];
  ref = Object.keys(hMissing);
  for (i = 0, len = ref.length; i < len; i++) {
    sym = ref[i];
    if (lib = hSymbols[sym]) {
      if (hNeeded[lib]) {
        hNeeded[lib].push(sym);
      } else {
        hNeeded[lib] = [sym];
      }
    } else {
      lStillMissing.push(sym);
    }
  }
  lImports = [];
  ref1 = Object.keys(hNeeded);
  for (j = 0, len1 = ref1.length; j < len1; j++) {
    lib = ref1[j];
    symbols = hNeeded[lib].join(',');
    lImports.push(`import {${symbols}} from '${lib}'`);
  }
  return [lImports, lStillMissing];
};

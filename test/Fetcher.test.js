// Generated by CoffeeScript 2.7.0
  // Fetcher.test.coffee
import {
  LOG,
  debug,
  assert,
  croak
} from '@jdeighan/exceptions';

import {
  UnitTester,
  tester
} from '@jdeighan/unit-tester';

import {
  undef,
  pass,
  defined,
  rtrim,
  replaceVars
} from '@jdeighan/coffee-utils';

import {
  arrayToBlock,
  joinBlocks
} from '@jdeighan/coffee-utils/block';

import {
  Fetcher
} from '@jdeighan/mapper/fetcher';

// ---------------------------------------------------------------------------
(function() {
  var fetcher;
  fetcher = new Fetcher("c:/Users/johnd/mapper/package.json");
  return tester.like(21, fetcher.hSourceInfo, {
    filename: 'package.json',
    dir: 'c:/Users/johnd/mapper',
    ext: '.json'
  });
})();

// ---------------------------------------------------------------------------
(function() {
  var fetcher, node1;
  fetcher = new Fetcher(undef, ['line1', 'line2', 'line3']);
  tester.like(34, node1 = fetcher.fetch(), {
    str: 'line1',
    level: 0,
    lineNum: 1
  });
  tester.equal(35, fetcher.lineNum, 1);
  tester.succeeds(36, function() {
    return fetcher.unfetch(node1);
  });
  tester.equal(37, fetcher.lineNum, 0);
  tester.like(38, fetcher.fetch(), {
    str: 'line1',
    lineNum: 1
  });
  tester.like(39, fetcher.fetch(), {
    str: 'line2',
    level: 0,
    lineNum: 2
  });
  tester.equal(40, fetcher.lineNum, 2);
  tester.like(41, fetcher.fetch(), {
    str: 'line3',
    level: 0,
    lineNum: 3
  });
  tester.equal(42, fetcher.lineNum, 3);
  tester.equal(43, fetcher.fetch(), undef);
  tester.equal(44, fetcher.lineNum, 3);
  tester.equal(45, fetcher.fetch(), undef);
  return tester.equal(46, fetcher.lineNum, 3);
})();

// ---------------------------------------------------------------------------
// --- Test TAB indentation
(function() {
  var fetcher, node1;
  fetcher = new Fetcher(import.meta.url, ['line1', '\tline2', '\t\tline3']);
  tester.like(60, node1 = fetcher.fetch(), {
    lineNum: 1,
    str: 'line1',
    level: 0
  });
  tester.equal(65, fetcher.lineNum, 1);
  tester.succeeds(66, function() {
    return fetcher.unfetch(node1);
  });
  tester.equal(67, fetcher.lineNum, 0);
  tester.like(68, fetcher.fetch(), {
    lineNum: 1,
    str: 'line1',
    level: 0
  });
  tester.like(73, fetcher.fetch(), {
    lineNum: 2,
    str: 'line2',
    level: 1
  });
  tester.equal(78, fetcher.lineNum, 2);
  tester.like(79, fetcher.fetch(), {
    lineNum: 3,
    str: 'line3',
    level: 2
  });
  tester.equal(84, fetcher.lineNum, 3);
  tester.equal(85, fetcher.fetch(), undef);
  tester.equal(86, fetcher.lineNum, 3);
  tester.equal(87, fetcher.fetch(), undef);
  return tester.equal(88, fetcher.lineNum, 3);
})();

// ---------------------------------------------------------------------------
// --- Test space indentation
(function() {
  var fetcher, node1;
  fetcher = new Fetcher(import.meta.url, ['line1', '   line2', '      line3']);
  tester.like(102, node1 = fetcher.fetch(), {
    lineNum: 1,
    str: 'line1',
    level: 0
  });
  tester.equal(107, fetcher.lineNum, 1);
  tester.succeeds(108, function() {
    return fetcher.unfetch(node1);
  });
  tester.equal(109, fetcher.lineNum, 0);
  tester.like(110, fetcher.fetch(), {
    lineNum: 1,
    str: 'line1',
    level: 0
  });
  tester.like(115, fetcher.fetch(), {
    lineNum: 2,
    str: 'line2',
    level: 1
  });
  tester.equal(120, fetcher.lineNum, 2);
  tester.like(121, fetcher.fetch(), {
    lineNum: 3,
    str: 'line3',
    level: 2
  });
  tester.equal(126, fetcher.lineNum, 3);
  tester.equal(127, fetcher.fetch(), undef);
  tester.equal(128, fetcher.lineNum, 3);
  tester.equal(129, fetcher.fetch(), undef);
  return tester.equal(130, fetcher.lineNum, 3);
})();

// ---------------------------------------------------------------------------
// Test __END__
(function() {
  var fetcher;
  fetcher = new Fetcher(undef, ['abc', 'def', '__END__', 'ghi']);
  tester.like(139, fetcher.fetch(), {
    str: 'abc',
    lineNum: 1
  });
  tester.like(140, fetcher.fetch(), {
    str: 'def',
    lineNum: 2
  });
  tester.equal(141, fetcher.fetch(), undef);
  return tester.equal(142, fetcher.lineNum, 2);
})();

// ---------------------------------------------------------------------------
// Test removing trailing WS
(function() {
  var fetcher;
  fetcher = new Fetcher(undef, ['abc  ', 'def  ']);
  tester.like(151, fetcher.fetch(), {
    str: 'abc',
    lineNum: 1
  });
  return tester.like(152, fetcher.fetch(), {
    str: 'def',
    lineNum: 2
  });
})();

// ---------------------------------------------------------------------------
// Test all(), allUntil(),
//      fetchAll(), fetchUntil(),
//      fetchBlock(), fetchBlockUntil
(function() {
  var fetcher, func, lItems;
  lItems = ['abc', 'def', 'ghi'];
  func = function(hNode) {
    return hNode.str === 'def';
  };
  fetcher = new Fetcher(import.meta.url, lItems);
  tester.like(170, Array.from(fetcher.all()), [
    {
      str: 'abc',
      lineNum: 1
    },
    {
      str: 'def',
      lineNum: 2
    },
    {
      str: 'ghi',
      lineNum: 3
    }
  ]);
  tester.like(176, fetcher.fetch(), undef);
  // ..........................................................
  fetcher = new Fetcher(import.meta.url, lItems);
  tester.like(181, Array.from(fetcher.allUntil(func, 'discardEndLine')), [
    {
      str: 'abc',
      lineNum: 1
    }
  ]);
  tester.like(185, fetcher.fetch(), {
    str: 'ghi'
  });
  fetcher = new Fetcher(import.meta.url, lItems);
  tester.like(188, Array.from(fetcher.allUntil(func, 'keepEndLine')), [
    {
      str: 'abc',
      lineNum: 1
    }
  ]);
  tester.like(192, fetcher.fetch(), {
    str: 'def'
  });
  // ..........................................................
  fetcher = new Fetcher(import.meta.url, lItems);
  tester.like(197, fetcher.fetchBlock(), `abc
def
ghi`);
  fetcher = new Fetcher(import.meta.url, lItems);
  tester.like(204, fetcher.fetchBlockUntil(func, 'discardEndLine'), `abc`);
  tester.like(208, fetcher.fetch(), {
    str: 'ghi'
  });
  fetcher = new Fetcher(import.meta.url, lItems);
  tester.like(211, fetcher.fetchBlockUntil(func, 'keepEndLine'), `abc`);
  return tester.like(215, fetcher.fetch(), {
    str: 'def'
  });
})();

// ---------------------------------------------------------------------------
//     Same tests, but input is a block
// ---------------------------------------------------------------------------
(function() {
  var block, fetcher, func;
  block = `abc
def
ghi`;
  func = function(hNode) {
    return hNode.str === 'def';
  };
  fetcher = new Fetcher(import.meta.url, block);
  tester.like(233, Array.from(fetcher.all()), [
    {
      str: 'abc',
      lineNum: 1
    },
    {
      str: 'def',
      lineNum: 2
    },
    {
      str: 'ghi',
      lineNum: 3
    }
  ]);
  tester.like(239, fetcher.fetch(), undef);
  // ..........................................................
  fetcher = new Fetcher(import.meta.url, block);
  tester.like(244, Array.from(fetcher.allUntil(func, 'discardEndLine')), [
    {
      str: 'abc',
      lineNum: 1
    }
  ]);
  tester.like(248, fetcher.fetch(), {
    str: 'ghi'
  });
  fetcher = new Fetcher(import.meta.url, block);
  tester.like(251, Array.from(fetcher.allUntil(func, 'keepEndLine')), [
    {
      str: 'abc',
      lineNum: 1
    }
  ]);
  tester.like(255, fetcher.fetch(), {
    str: 'def'
  });
  // ..........................................................
  fetcher = new Fetcher(import.meta.url, block);
  tester.like(260, fetcher.fetchBlock(), `abc
def
ghi`);
  fetcher = new Fetcher(import.meta.url, block);
  tester.like(267, fetcher.fetchBlockUntil(func, 'discardEndLine'), `abc`);
  tester.like(271, fetcher.fetch(), {
    str: 'ghi'
  });
  fetcher = new Fetcher(import.meta.url, block);
  tester.like(274, fetcher.fetchBlockUntil(func, 'keepEndLine'), `abc`);
  return tester.like(278, fetcher.fetch(), {
    str: 'def'
  });
})();

// ---------------------------------------------------------------------------
// --- Test using #include

  // ---------------------------------------------------------------------------
// File title.md contains:
// title
// =====
// ---------------------------------------------------------------------------
(function() {
  var MyTester, myTester, numLines;
  numLines = undef;
  MyTester = class MyTester extends UnitTester {
    transformValue(block) {
      var fetcher;
      fetcher = new Fetcher(import.meta.url, block);
      block = fetcher.fetchBlock();
      numLines = fetcher.lineNum; // set variable numLines
      return block;
    }

  };
  // ..........................................................
  myTester = new MyTester();
  myTester.equal(308, `abc
	#include title.md
def`, `abc
	title
	=====
def`);
  return tester.equal(319, numLines, 3);
})();

// ---------------------------------------------------------------------------
(function() {
  var fetcher;
  fetcher = new Fetcher(import.meta.url, `abc
	#include title.md
def`);
  return tester.equal(332, fetcher.fetchBlock(), `abc
	title
	=====
def`);
})();

// ---------------------------------------------------------------------------
// --- test @hSourceInfo
(function() {
  var fetcher, hLine;
  fetcher = new Fetcher(import.meta.url, `abc
#include title.md
def`);
  while (defined(hLine = fetcher.fetch()) && (hLine.str !== '=====')) {
    pass;
  }
  tester.like(354, hLine, {
    str: '=====',
    lineNum: 2
  });
  tester.equal(355, fetcher.altInput.hSourceInfo.filename, 'title.md');
  return tester.equal(356, fetcher.altInput.lineNum, 2);
})();

// ---------------------------------------------------------------------------
// --- test @hSourceInfo with indentation
(function() {
  var fetcher, hLine;
  fetcher = new Fetcher(import.meta.url, `abc
	#include title.md
def`);
  while (defined(hLine = fetcher.fetch()) && (hLine.str !== '=====')) {
    pass;
  }
  tester.like(373, hLine, {
    str: '=====',
    level: 1,
    lineNum: 2
  });
  tester.equal(378, fetcher.altInput.hSourceInfo.filename, 'title.md');
  return tester.equal(379, fetcher.altInput.lineNum, 2);
})();

// ---------------------------------------------------------------------------
// --- test @sourceInfoStr
(function() {
  var fetcher, hLine;
  fetcher = new Fetcher('test.txt', `abc
#include title.md
def`);
  tester.equal(392, fetcher.sourceInfoStr(), "test.txt/0");
  hLine = fetcher.fetch();
  tester.equal(395, hLine.str, 'abc');
  tester.equal(396, fetcher.sourceInfoStr(), "test.txt/1");
  hLine = fetcher.fetch();
  tester.equal(399, hLine.str, 'title');
  tester.equal(400, fetcher.sourceInfoStr(), "test.txt/2 title.md/1");
  hLine = fetcher.fetch();
  tester.equal(403, hLine.str, '=====');
  tester.equal(404, fetcher.sourceInfoStr(), "test.txt/2 title.md/2");
  hLine = fetcher.fetch();
  tester.equal(407, hLine.str, 'def');
  return tester.equal(408, fetcher.sourceInfoStr(), "test.txt/3");
})();

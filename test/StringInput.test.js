// Generated by CoffeeScript 2.5.1
// StringInput.test.coffee
var GatherTester, tester;

import {
  strict as assert
} from 'assert';

import {
  say,
  undef,
  isEmpty,
  setDebugging
} from '@jdeighan/coffee-utils';

import {
  indentLevel,
  undentedStr
} from '@jdeighan/coffee-utils/indent';

import {
  StringInput
} from '../src/StringInput.js';

import {
  AvaTester
} from '@jdeighan/ava-tester';

// ---------------------------------------------------------------------------
(function() {
  var input, item, tester;
  tester = new AvaTester();
  input = new StringInput(`abc
def
ghi`);
  item = input.peek();
  tester.equal(21, item, 'abc');
  item = input.peek();
  tester.equal(23, item, 'abc');
  item = input.get();
  tester.equal(25, item, 'abc');
  item = input.get();
  tester.equal(27, item, 'def');
  input.unget(item);
  item = input.get();
  tester.equal(30, item, 'def');
  input.skip();
  item = input.get();
  return tester.equal(33, item, undef);
})();

// ---------------------------------------------------------------------------
GatherTester = class GatherTester extends AvaTester {
  transformValue(input) {
    var lLines, line;
    if (!(input instanceof StringInput)) {
      throw new Error("input should be a StringInput object");
    }
    lLines = [];
    line = input.get();
    while (line != null) {
      lLines.push(line);
      line = input.get();
    }
    return lLines;
  }

};

tester = new GatherTester();

// ---------------------------------------------------------------------------
// --- Test basic reading till EOF
tester.equal(56, new StringInput(`abc
def`), ['abc', 'def']);

tester.equal(64, new StringInput(`abc

def`), ['abc', '', 'def']);

tester.equal(74, new StringInput(`abc

def`, {
  mapper: function(line) {
    if (line === '') {
      return undef;
    } else {
      return line;
    }
  }
}), ['abc', 'def']);

// ---------------------------------------------------------------------------
// --- Test basic use of mapping function
(function() {
  var mapper;
  mapper = function(line) {
    if (line === '') {
      return undef;
    } else {
      return 'x';
    }
  };
  return tester.equal(99, new StringInput(`abc

def`, {mapper}), ['x', 'x']);
})();

// ---------------------------------------------------------------------------
// --- Test ability to access 'this' object from a mapper
//     Goal: remove not only blank lines, but also the line following
(function() {
  var mapper;
  mapper = function(line, oInput) {
    if (line === '') {
      oInput.get();
      return undef;
    } else {
      return line;
    }
  };
  return tester.equal(122, new StringInput(`abc

def
ghi`, {mapper}), ['abc', 'ghi']);
})();

// ---------------------------------------------------------------------------

  // --- Test mapping to objects
(function() {
  var cmdRE, mapper;
  cmdRE = /^\s*\#([a-z][a-z_]*)\s*(.*)$/; // skip leading whitespace
  // command name
  // skipwhitespace following command
  // command arguments
  mapper = function(line, oInput) {
    var lMatches;
    lMatches = line.match(cmdRE);
    if (lMatches != null) {
      return {
        cmd: lMatches[1],
        argstr: lMatches[2]
      };
    } else {
      return line;
    }
  };
  return tester.equal(153, new StringInput(`abc
#if x==y
	def
#else
	ghi`, {mapper}), [
    'abc',
    {
      cmd: 'if',
      argstr: 'x==y'
    },
    '\tdef',
    {
      cmd: 'else',
      argstr: ''
    },
    '\tghi'
  ]);
})();

// ---------------------------------------------------------------------------
// --- Test continuation lines
(function() {
  var mapper;
  mapper = function(line, oInput) {
    var n, next;
    if (line === '' || line.match(/^\s*#\s/)) {
      return undef; // skip comments and blank lines
    }
    n = indentLevel(line); // current line indent
    while ((oInput.lBuffer.length > 0) && (indentLevel(oInput.lBuffer[0]) >= n + 2)) {
      next = oInput.lBuffer.shift();
      line += ' ' + undentedStr(next);
    }
    return line;
  };
  return tester.equal(183, new StringInput(`str = compare(
		"abcde",
		expected
		)

call func
		with multiple
		long parameters

# --- DONE ---`, {mapper}), ['str = compare( "abcde", expected )', 'call func with multiple long parameters']);
})();

// ---------------------------------------------------------------------------
// --- Test continuation lines AND HEREDOCs
(function() {
  var mapper;
  mapper = function(line, oInput) {
    var n, next;
    if (line === '' || line.match(/^\s*#\s/)) {
      return undef; // skip comments and blank lines
    }
    n = indentLevel(line); // current line indent
    while ((oInput.lBuffer.length > 0) && (indentLevel(oInput.lBuffer[0]) >= n + 2)) {
      next = oInput.lBuffer.shift();
      line += ' ' + undentedStr(next);
    }
    return line;
  };
  return tester.equal(216, new StringInput(`str = compare(
		"abcde",
		expected
		)

call func
		with multiple
		long parameters

# --- DONE ---`, {mapper}), ['str = compare( "abcde", expected )', 'call func with multiple long parameters']);
})();

// ---------------------------------------------------------------------------
// --- Test overriding the class
(function() {
  var NewInput, NewMapper;
  NewMapper = function(line, oInput) {
    assert(oInput instanceof StringInput);
    if (isEmpty(line)) {
      return undef;
    }
    if (line === 'abc') {
      return '123';
    } else if (line === 'def') {
      return '456';
    } else {
      return line;
    }
  };
  NewInput = class NewInput extends StringInput {
    constructor(content, hOptions = {}) {
      assert(hOptions.mapper == null);
      hOptions.mapper = NewMapper;
      super(content, hOptions);
    }

  };
  return tester.equal(259, new NewInput(`abc

def`), ['123', '456']);
})();

// ---------------------------------------------------------------------------
// --- Test #include
tester.equal(273, new StringInput(`abc
	#include title.md
def`, {
  hIncludePaths: {
    '.md': 'c:\\Users\\johnd\\string-input\\src\\markdown'
  }
}), ['abc', '\ttitle', '\t=====', 'def']);

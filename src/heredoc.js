// Generated by CoffeeScript 2.6.1
// heredoc.coffee
var lAllHereDocNames, lAllHereDocs, qesc;

import {
  undef,
  pass,
  croak,
  escapeStr,
  CWS
} from '@jdeighan/coffee-utils';

import {
  firstLine,
  remainingLines
} from '@jdeighan/coffee-utils/block';

import {
  isTAML,
  taml
} from '@jdeighan/string-input/taml';

lAllHereDocs = [];

lAllHereDocNames = [];

export var DEBUG = false;

// ---------------------------------------------------------------------------
export var mapHereDoc = function(block) {
  var heredoc, i, j, len;
  for (i = j = 0, len = lAllHereDocs.length; j < len; i = ++j) {
    heredoc = lAllHereDocs[i];
    if (heredoc.isMyHereDoc(block)) {
      if (DEBUG) {
        console.log(`Found HEREDOC type ${lAllHereDocNames[i]}`);
        console.log(block);
      }
      return heredoc.map(block);
    }
  }
  return croak("No valid heredoc type found");
};

// ---------------------------------------------------------------------------
export var addHereDocType = function(obj, name = 'Unknown') {
  lAllHereDocs.unshift(obj);
  lAllHereDocNames.unshift(name);
};

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
export var BaseHereDoc = class BaseHereDoc {
  isMyHereDoc(block) {
    return true;
  }

  // --- If the returned string will represent a string, then
  //     you can get away with just returning the represented string
  //     here, which will be surrounded with quote marks and
  //     have internal special characters escaped
  mapToString(block) {
    return block;
  }

  // --- map() MUST return a string
  //     that string will replace '<<<' in your code
  map(block) {
    return '"' + qesc(this.mapToString(block)) + '"';
  }

};

// ---------------------------------------------------------------------------
export var BlockHereDoc = class BlockHereDoc extends BaseHereDoc {
  isMyHereDoc(block) {
    return firstLine(block) === '===';
  }

  mapToString(block) {
    return remainingLines(block);
  }

};

// ---------------------------------------------------------------------------
export var OneLineHereDoc = class OneLineHereDoc extends BaseHereDoc {
  isMyHereDoc(block) {
    return block.indexOf('...') === 0;
  }

  mapToString(block) {
    // --- replace all runs of whitespace with single space char
    block = block.replace(/\s+/gs, ' ');
    return block.substring(3).trim();
  }

};

// ---------------------------------------------------------------------------
export var TAMLHereDoc = class TAMLHereDoc extends BaseHereDoc {
  isMyHereDoc(block) {
    return isTAML(block);
  }

  map(block) {
    return JSON.stringify(taml(block));
  }

};

// ---------------------------------------------------------------------------
export var isFunctionHeader = function(str) {
  return str.match(/^(?:([A-Za-z_][A-Za-z0-9_]*)\s*=\s*)?\(\s*([A-Za-z_][A-Za-z0-9_]*(?:,\s*[A-Za-z_][A-Za-z0-9_]*)*)?\)\s*->\s*$/); // optional function name
// optional parameters
};

export var FuncHereDoc = class FuncHereDoc extends BaseHereDoc {
  isMyHereDoc(block) {
    return isFunctionHeader(firstLine(block));
  }

  map(block, lMatches = undef) {
    var _, funcName, strParms;
    if (!lMatches) {
      lMatches = this.isMyHereDoc(block);
    }
    block = remainingLines(block);
    [_, funcName, strParms] = lMatches;
    if (!strParms) {
      strParms = '';
    }
    if (funcName) {
      return CWS(`${funcName} = (${strParms}) -> ${block}`);
    } else {
      return CWS(`(${strParms}) -> ${block}`);
    }
  }

};

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
qesc = function(block) {
  var hEsc;
  hEsc = {
    "\n": "\\n",
    "\r": "",
    "\t": "\\t",
    "\"": "\\\""
  };
  return escapeStr(block, hEsc);
};

// ---------------------------------------------------------------------------

// --- last one is checked first
addHereDocType(new BaseHereDoc(), 'default block');

addHereDocType(new FuncHereDoc(), 'function'); //  (args) ->

addHereDocType(new OneLineHereDoc(), 'one line'); //  ...

addHereDocType(new TAMLHereDoc(), 'taml'); //  ---

addHereDocType(new BlockHereDoc(), 'explicit block'); //  ===

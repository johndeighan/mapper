// Generated by CoffeeScript 2.5.1
  // StringInput.coffee
import {
  strict as assert
} from 'assert';

import fs from 'fs';

import pathlib from 'path';

import {
  undef,
  deepCopy,
  stringToArray,
  say,
  pass,
  error,
  isString,
  unitTesting
} from '@jdeighan/coffee-utils';

import {
  slurp
} from '@jdeighan/coffee-utils/fs';

import {
  getFileContents
} from '@jdeighan/coffee-utils/convert';

import {
  splitLine,
  indentedStr,
  indentation
} from '@jdeighan/coffee-utils/indent';

import {
  debug
} from '@jdeighan/coffee-utils/debug';

// ---------------------------------------------------------------------------
//   class StringInput - stream in lines from a string or array
export var StringInput = class StringInput {
  constructor(content, hOptions1 = {}) {
    var base, filename;
    this.hOptions = hOptions1;
    // --- Valid options:
    //        filename
    ({filename} = this.hOptions);
    if (isString(content)) {
      this.lBuffer = stringToArray(content);
    } else if (isArray(content)) {
      // -- make a deep copy
      this.lBuffer = deepCopy(content);
    } else {
      error("StringInput(): content must be array or string");
    }
    this.lineNum = 0;
    if (filename) {
      try {
        // --- We only want the bare filename
        ({base} = pathlib.parse(filename));
        this.filename = base;
      } catch (error1) {
        this.filename = filename;
      }
    } else {
      this.filename = 'unit test';
    }
    this.lookahead = undef; // lookahead token, placed by unget
    this.altInput = undef;
    this.altLevel = undef; // controls prefix prepended to lines
  }

  
    // ........................................................................
  // --- designed to override with a mapping method
  mapLine(line) {
    return line;
  }

  // ........................................................................
  unget(item) {
    // --- item has already been mapped
    debug(item, 'enter unget() with:');
    assert(this.lookahead == null);
    this.lookahead = item;
    debug('return from unget()');
  }

  // ........................................................................
  peek() {
    var item;
    debug('enter peek():');
    if (this.lookahead != null) {
      debug("return lookahead token");
      return this.lookahead;
    }
    item = this.get();
    this.unget(item);
    debug(item, 'return with:');
    return item;
  }

  // ........................................................................
  skip() {
    debug('enter skip():');
    if (this.lookahead != null) {
      this.lookahead = undef;
      debug("return: clear lookahead token");
      return;
    }
    this.get();
    debug('return');
  }

  // ........................................................................
  // --- Returns undef if either:
  //        1. there's no alt input
  //        2. get from alt input returns undef (then closes alt input)
  getFromAlt() {
    var result;
    debug("enter getFromAlt()");
    if (!this.altInput) {
      error("getFromAlt(): There is no alt input");
    }
    result = this.altInput.get();
    if (result != null) {
      debug(result, "return with:");
      return indentedStr(result, this.altLevel);
    } else {
      debug("return: alt returned undef, alt input removed");
      this.altInput = undef;
      this.altLevel = undef;
      return undef;
    }
  }

  // ........................................................................
  // --- Returns undef if either:
  //        1. there's no alt input
  //        2. get from alt input returns undef (then closes alt input)
  fetchFromAlt() {
    var result;
    debug("enter fetchFromAlt()");
    if (!this.altInput) {
      error("fetchFromAlt(): There is no alt input");
    }
    result = this.altInput.fetch();
    if (result != null) {
      debug(result, "return with:");
      return indentedStr(result, this.altLevel);
    } else {
      debug("return: alt returned undef, alt input removed");
      this.altInput = undef;
      this.altLevel = undef;
      return undef;
    }
  }

  // ........................................................................
  get() {
    var line, result, saved;
    debug(`enter get() (from ${this.filename}):`);
    if (this.lookahead != null) {
      saved = this.lookahead;
      this.lookahead = undef;
      debug(`return (from ${this.filename}) with lookahead token`);
      return saved;
    }
    if (this.altInput && ((line = this.getFromAlt()) != null)) {
      debug(`return with '${line}' (from alt ${this.filename})`);
      return line;
    }
    line = this.fetch(); // will handle #include
    debug(line, "line =");
    if (line == null) {
      debug(`return with undef (from ${this.filename}) at EOF`);
      return undef;
    }
    result = this.mapLine(line);
    while ((result == null) && (this.lBuffer.length > 0)) {
      line = this.fetch();
      result = this.mapLine(line);
    }
    debug(result, `return (from ${this.filename})`);
    return result;
  }

  // ........................................................................
  // --- This should be used to fetch from @lBuffer
  //     to maintain proper @lineNum for error messages
  //     MUST handle #include
  fetch() {
    var _, altLine, contents, fname, lMatches, level, line, result, str;
    debug("enter fetch()");
    if (this.altInput && ((result = this.fetchFromAlt()) != null)) {
      debug(result, "return with:");
      return result;
    }
    if (this.lBuffer.length === 0) {
      debug("return - empty buffer, return undef");
      return undef;
    }
    this.lineNum += 1;
    line = this.lBuffer.shift();
    [level, str] = splitLine(line);
    if (lMatches = str.match(/^\#include\s+(\S.*)$/)) {
      [_, fname] = lMatches;
      assert(!this.altInput, "fetch(): altInput already set");
      contents = getFileContents(fname, false);
      this.altInput = new StringInput(contents);
      this.altLevel = level;
      debug(`alt input created at level ${level}`);
      // --- We just created an alt input
      //     we need to get its first line
      altLine = this.getFromAlt();
      if (altLine != null) {
        debug(`fetch(): getFromAlt returned '${altLine}'`);
        line = altLine;
      } else {
        debug(`fetch(): alt was undef, retain line '${line}'`);
      }
    }
    debug(line, "return from buffer:");
    return line;
  }

  // ........................................................................
  // --- Put one or more lines back into lBuffer, to be fetched later
  unfetch(str) {
    debug(str, "enter unfetch() with:");
    this.lBuffer.unshift(str);
    this.lineNum -= 1;
    debug('return from unfetch()');
  }

  // ........................................................................
  // --- Fetch a block of text at level or greater than 'level'
  //     as one long string
  // --- Designed to use in mapLine()
  fetchBlock(atLevel) {
    var lLines, level, line, result, retval, str;
    debug(`enter fetchBlock(${atLevel})`);
    lLines = [];
    // --- NOTE: I absolutely hate using a backslash for line continuation
    //           but CoffeeScript doesn't continue while there is an
    //           open parenthesis like Python does :-(
    line = undef;
    while ((line = this.fetch())) {
      [level, str] = splitLine(line);
      debug(`LOOP: level = ${level}, str = '${str}'`);
      if (level < atLevel) {
        this.unfetch(line);
        debug("RESULT: unfetch the line");
        break;
      }
      result = this.mapLine(str);
      if (result != null) {
        result = indentedStr(result, level - atLevel);
        debug(result, "RESULT from mapLine() was:");
        lLines.push(result);
      } else {
        debug("RESULT from mapLine() was undef");
      }
    }
    retval = lLines.join('\n');
    debug(retval, "return with:");
    return retval;
  }

  // ........................................................................
  getAll() {
    var lLines, line;
    lLines = [];
    line = this.get();
    while (line != null) {
      lLines.push(line);
      line = this.get();
    }
    return lLines;
  }

  // ........................................................................
  getAllText() {
    return this.getAll().join('\n');
  }

};

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
//   class FileInput - contents from a file
export var FileInput = class FileInput extends StringInput {
  constructor(filename, hOptions = {}) {
    var base, content, dir, ext, root;
    ({root, dir, base, ext} = pathlib.parse(filename.trim()));
    hOptions.filename = base;
    if (unitTesting) {
      content = `Contents of ${base}`;
    } else {
      if (!fs.existsSync(filename)) {
        error(`FileInput(): file '${filename}' does not exist`);
      }
      content = slurp(filename);
    }
    super(content, hOptions);
  }

};

// ---------------------------------------------------------------------------

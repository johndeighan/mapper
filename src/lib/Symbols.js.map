{
  "version": 3,
  "file": "Symbols.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\Symbols.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Symbols.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, isString, isArray, isEmpty, nonEmpty,\r\n\tuniq, words, escapeStr, OL, getOptions,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\r\nimport {\r\n\tdbg, dbgEnter, dbgReturn,\r\n\t} from '@jdeighan/base-utils/debug'\r\nimport {barf, parsePath} from '@jdeighan/base-utils/fs'\r\nimport {pathTo} from '@jdeighan/coffee-utils/fs'\r\nimport {splitLine, isUndented} from '@jdeighan/base-utils/indent'\r\n\r\nimport {Mapper} from '@jdeighan/mapper'\r\nimport {TreeMapper} from '@jdeighan/mapper/tree'\r\nimport {coffeeCodeToAST} from '@jdeighan/mapper/coffee'\r\nimport {ASTWalker} from '@jdeighan/mapper/ast'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getNeededSymbols = (coffeeCode, hOptions={}) ->\r\n\t# --- Valid options:\r\n\t#        dumpfile: <filepath>   - where to dump ast\r\n\t#     NOTE: items in array returned will always be unique\r\n\r\n\tdbgEnter \"getNeededSymbols\", coffeeCode, hOptions\r\n\t{dumpFile} = getOptions(hOptions)\r\n\tassert isString(coffeeCode), \"code not a string\"\r\n\tassert isUndented(coffeeCode), \"coffeeCode has indent\"\r\n\tast = coffeeCodeToAST(coffeeCode)\r\n\tdbg 'AST', ast\r\n\r\n\twalker = new ASTWalker(ast)\r\n\thSymbolInfo = walker.walk()\r\n\tif dumpFile\r\n\t\tbarf \"AST:\\n#{tamlStringify(ast)}\", dumpFile\r\n\tresult = uniq(hSymbolInfo.lMissing)\r\n\tdbgReturn \"getNeededSymbols\", result\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport buildImportList = (lNeededSymbols, source) ->\r\n\r\n\tdbgEnter \"buildImportList\", lNeededSymbols, source\r\n\r\n\tif isEmpty(lNeededSymbols)\r\n\t\tdbg 'no needed symbols'\r\n\t\tdbgReturn \"buildImportList\", []\r\n\t\treturn {lImportStmts: [], lNotFound: []}\r\n\r\n\thLibs = {}   # { <lib>: [<symbol>, ... ], ... }\r\n\tlImportStmts = []\r\n\tlNotFound = []\r\n\r\n\t# --- { <sym>: {lib: <lib>, src: <name> }}\r\n\thAvailSymbols = getAvailSymbols(source)\r\n\tdbg 'hAvailSymbols', hAvailSymbols\r\n\r\n\tfor symbol in lNeededSymbols\r\n\t\tassert isString(symbol), \"not a string\"\r\n\t\thSymbol = hAvailSymbols[symbol]\r\n\t\tif defined(hSymbol)\r\n\r\n\t\t\t# --- symbol is available in lib\r\n\t\t\t{lib, src, isDefault} = hSymbol\r\n\r\n\t\t\tif isDefault\r\n\t\t\t\tlImportStmts.push \"import #{symbol} from '#{lib}'\"\r\n\t\t\telse\r\n\t\t\t\t# --- build the needed string\r\n\t\t\t\tif defined(src)\r\n\t\t\t\t\tstr = \"#{src} as #{symbol}\"\r\n\t\t\t\telse\r\n\t\t\t\t\tstr = symbol\r\n\r\n\t\t\t\tif hLibs[lib]?\r\n\t\t\t\t\tassert isArray(hLibs[lib]), \"buildImportList(): not an array\"\r\n\t\t\t\t\thLibs[lib].push(str)\r\n\t\t\t\telse\r\n\t\t\t\t\thLibs[lib] = [str]\r\n\t\telse\r\n\t\t\tlNotFound.push symbol\r\n\r\n\tfor lib in Object.keys(hLibs).sort()\r\n\t\tstrSymbols = hLibs[lib].join(',')\r\n\t\tlImportStmts.push \"import {#{strSymbols}} from '#{lib}'\"\r\n\tassert isArray(lImportStmts), \"lImportStmts is not an array!\"\r\n\tresult = {\r\n\t\tlNotFound\r\n\t\tlImportStmts\r\n\t\t}\r\n\tdbgReturn \"buildImportList\", result\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n# export only to allow unit testing\r\n\r\nexport getAvailSymbols = (sourceFile=undef) ->\r\n\t# --- returns { <symbol>: {\r\n\t#                  lib: <lib>,\r\n\t#                  src: <name>,\r\n\t#                  default: true\r\n\t#                  },...\r\n\t#                }\r\n\r\n\tdbgEnter \"getAvailSymbols\", sourceFile\r\n\tif notdefined(sourceFile)\r\n\t\tsearchDir = process.cwd()\r\n\t\tdbg \"searchDir is current dir: #{OL(searchDir)}\"\r\n\telse\r\n\t\thSourceInfo = parsePath(sourceFile)\r\n\t\tsearchDir = hSourceInfo.dir\r\n\t\tassert defined(searchDir), \"No directory info for #{OL(sourceFile)}\"\r\n\t\tdbg \"searchDir is #{OL(searchDir)}\"\r\n\r\n\tfilePath = pathTo('.symbols', searchDir, {direction: 'up'})\r\n\tif defined(filePath)\r\n\t\tdbg \".symbols file is #{OL(filePath)}\"\r\n\t\thSymbols = getAvailSymbolsFrom(filePath)\r\n\telse\r\n\t\tdbg 'no .symbols file found'\r\n\t\thSymbols = {}\r\n\tdbgReturn \"getAvailSymbols\", hSymbols\r\n\treturn hSymbols\r\n\r\n# ---------------------------------------------------------------------------\r\n# export only to allow unit testing\r\n\r\nexport getAvailSymbolsFrom = (filepath) ->\r\n\t# --- returns { <symbol> -> {lib: <lib>, src: <name>}, ... }\r\n\r\n\tdbgEnter \"getAvailSymbolsFrom\", filepath\r\n\r\n\tparser = new SymbolParser({source: filepath})\r\n\thAvailSymbols = parser.getAvailSymbols()\r\n\tdbgReturn \"getAvailSymbolsFrom\", hAvailSymbols\r\n\treturn hAvailSymbols\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nclass SymbolParser extends TreeMapper\r\n\t# --- Parse a .symbols file\r\n\r\n\tconstructor: (hInput, options) ->\r\n\r\n\t\tsuper hInput, options\r\n\t\t@curLib = undef\r\n\t\t@hSymbols = {}\r\n\r\n\t# ..........................................................\r\n\r\n\tgetUserObj: (hLine) ->\r\n\r\n\t\tdbgEnter \"SymbolParser.getUserObj\", hLine\r\n\r\n\t\t{str, level} = hLine\r\n\t\tif level==0\r\n\t\t\t@curLib = str\r\n\t\telse if level==1\r\n\t\t\tassert @curLib?, \"curLib not defined\"\r\n\t\t\tlWords = words(str)\r\n\t\t\tnumWords = lWords.length\r\n\r\n\t\t\tfor word,i in lWords\r\n\t\t\t\tlMatches = word.match(///^\r\n\t\t\t\t\t\t(\\*?)\r\n\t\t\t\t\t\t([A-Za-z_][A-Za-z0-9_]*)\r\n\t\t\t\t\t\t(?:\r\n\t\t\t\t\t\t\t\\/\r\n\t\t\t\t\t\t\t([A-Za-z_][A-Za-z0-9_]*)\r\n\t\t\t\t\t\t\t)?\r\n\t\t\t\t\t\t$///)\r\n\t\t\t\tassert defined(lMatches), \"Bad word: #{OL(word)}\"\r\n\t\t\t\t[_, isDefault, symbol, alt] = lMatches\r\n\t\t\t\tif nonEmpty(alt)\r\n\t\t\t\t\tsrc = symbol\r\n\t\t\t\t\tsymbol = alt\r\n\t\t\t\tassert nonEmpty(symbol), \"Bad word: #{OL(word)}\"\r\n\t\t\t\tassert ! @hSymbols[symbol]?,\r\n\t\t\t\t\t\"duplicate symbol #{symbol}\"\r\n\t\t\t\thDesc = {lib: @curLib}\r\n\t\t\t\tif src?\r\n\t\t\t\t\thDesc.src = src\r\n\t\t\t\tif isDefault\r\n\t\t\t\t\thDesc.isDefault = true\r\n\t\t\t\t@hSymbols[symbol] = hDesc\r\n\t\telse\r\n\t\t\tcroak \"Bad .symbols file - level = #{level}\"\r\n\t\tdbgReturn \"SymbolParser.getUserObj\", undef\r\n\t\treturn undef   # doesn't matter what we return\r\n\r\n\t# ..........................................................\r\n\r\n\tgetAvailSymbols: () ->\r\n\r\n\t\t@getBlock()\r\n\t\treturn @hSymbols\r\n\r\n# ---------------------------------------------------------------------------\r\n"
  ]
}
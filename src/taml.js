// Generated by CoffeeScript 2.6.1
// taml.coffee
var fix;

import yaml from 'js-yaml';

import {
  assert,
  undef,
  oneline,
  isString
} from '@jdeighan/coffee-utils';

import {
  untabify,
  tabify,
  splitLine
} from '@jdeighan/coffee-utils/indent';

import {
  log,
  tamlStringify
} from '@jdeighan/coffee-utils/log';

import {
  slurp,
  forEachLineInFile
} from '@jdeighan/coffee-utils/fs';

import {
  debug
} from '@jdeighan/coffee-utils/debug';

import {
  firstLine,
  blockToArray
} from '@jdeighan/coffee-utils/block';

// ---------------------------------------------------------------------------
//   isTAML - is the string valid TAML?
export var isTAML = function(text) {
  return isString(text) && (firstLine(text).indexOf('---') === 0);
};

// ---------------------------------------------------------------------------
//   taml - convert valid TAML string to a JavaScript value
export var taml = function(text) {
  debug(`enter taml(${oneline(text)})`);
  if (text == null) {
    debug("return undef from taml() - text is not defined");
    return undef;
  }
  assert(isTAML(text), `taml(): string ${oneline(text)} isn't TAML`);
  debug("return from taml()");
  return yaml.load(taml2yaml(text), {
    skipInvalid: true
  });
};

// ---------------------------------------------------------------------------
fix = function(orgline) {
  var _, ident, lMatches, level, line, prefix, str;
  [level, line] = splitLine(orgline);
  prefix = ' '.repeat(level);
  if (lMatches = line.match(/([A-Za-z_][A-Za-z0-9_]*)\:\s*(.+)$/)) { // identifier
    // colon
    // optional whitespace
    // a non-empty string
    [_, ident, str] = lMatches;
    if (str.match(/\d+(?:\.\d*)?$/)) {
      return `${prefix}${ident}: ${str}`;
    } else {
      // --- surround with single quotes, double internal single quotes
      str = "'" + str.replace(/\'/g, "''") + "'";
      return `${prefix}${ident}: ${str}`;
    }
  } else {
    return `${prefix}${line}`;
  }
};

// ---------------------------------------------------------------------------
// --- export to allow unit testing
export var taml2yaml = function(text) {
  var lLines, line;
  lLines = (function() {
    var i, len, ref, results;
    ref = blockToArray(text);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      line = ref[i];
      results.push(fix(line));
    }
    return results;
  })();
  return lLines.join("\n");
};

// ---------------------------------------------------------------------------
//   slurpTAML - read TAML from a file
export var slurpTAML = function(filepath) {
  var contents;
  contents = slurp(filepath);
  return taml(contents);
};

// ---------------------------------------------------------------------------
// --- Install a TAML heredoc plugin
export var TAMLHereDoc = class TAMLHereDoc {
  myName() {
    return 'taml';
  }

  isMyHereDoc(block) {
    return isTAML(block);
  }

  map(block) {
    var obj;
    obj = taml(block);
    return {
      obj,
      str: JSON.stringify(obj)
    };
  }

};

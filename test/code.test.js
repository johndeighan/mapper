// Generated by CoffeeScript 2.5.1
// code.test.coffee
var filepath, simple, testDir;

import {
  strict as assert
} from 'assert';

import {
  undef,
  say,
  isString,
  isHash,
  isEmpty,
  nonEmpty,
  setUnitTesting,
  arrayToString,
  escapeStr
} from '@jdeighan/coffee-utils';

import {
  mydir,
  mkpath
} from '@jdeighan/coffee-utils/fs';

import {
  UnitTester
} from '@jdeighan/coffee-utils/test';

import {
  setDebugging
} from '@jdeighan/coffee-utils/debug';

import {
  forEachLine,
  forEachBlock,
  forEachSetOfBlocks
} from '@jdeighan/coffee-utils/block';

import {
  getMissingSymbols,
  getNeededImports,
  getAvailSymbols
} from '@jdeighan/string-input/code';

testDir = mydir(import.meta.url);

filepath = mkpath(testDir, 'code.test.txt');

simple = new UnitTester();

// ----------------------------------------------------------------------------
(async function() {
  var callback, expImports, expMissing, i, lImports, lMissing, lTests, len, lineNum, results, src;
  lTests = [];
  callback = function(lBlocks, lineNum) {
    var expImports, expMissing, lMatches, src;
    [src, expImports, expMissing] = lBlocks;
    if (src) {
      if (lMatches = src.match(/^\*[\*\s]*(.*)$/s)) { // an asterisk
        // skip any following asterisks or whitespace
        // capture the real source string
        src = lMatches[1];
        lTests.push([-lineNum, src, expImports, expMissing]);
      } else {
        lTests.push([lineNum, ...lBlocks]);
      }
    }
  };
  await forEachSetOfBlocks(filepath, callback);
  results = [];
  for (i = 0, len = lTests.length; i < len; i++) {
    [lineNum, src, expImports, expMissing] = lTests[i];
    [lImports, lMissing] = getNeededImports(src);
    simple.equal(lineNum, lImports.join('\n'), expImports);
    results.push(simple.equal(lineNum, lMissing.join('\n'), expMissing));
  }
  return results;
})();

// ----------------------------------------------------------------------------
